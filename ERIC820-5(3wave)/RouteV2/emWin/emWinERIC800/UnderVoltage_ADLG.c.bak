/*
**********************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.36                          *
*        Compiled Aug 31 2016, 10:53:09                              *
*        (c) 2016 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*/

// USER START (Optionally insert additional includes)
// USER END

#include "DIALOG.h"
#include "Emwin_eric800.h"
#include "InitSystem.h"

extern const unsigned char _aclogo2_s[17237UL + 1];

static GRAPH_DATA_Handle ahDataUA; // ------(1)
static GRAPH_DATA_Handle ahDataUB; // ------(2)
static GRAPH_DATA_Handle ahDataUC; // ------(3)
static GRAPH_DATA_Handle ahData3U; // ------(3)
WM_HWIN UA_hWin;
//static u8 SelectWave;
static uint8_t SelectWaveSave;


/*********************************************************************
*
*       Defines
*
**********************************************************************
*/
#define ID_FRAMEWIN_0     (GUI_ID_USER + 0x00)
#define ID_BUTTON_0     (GUI_ID_USER + 0x01)
#define ID_BUTTON_1     (GUI_ID_USER + 0x02)
#define ID_BUTTON_2     (GUI_ID_USER + 0x03)
#define ID_BUTTON_3     (GUI_ID_USER + 0x04)
//#define ID_BUTTON_4     (GUI_ID_USER + 0x05)
#define ID_BUTTON_5     (GUI_ID_USER + 0x06)
#define ID_BUTTON_6     (GUI_ID_USER + 0x07)
#define ID_BUTTON_7     (GUI_ID_USER + 0x08)
#define ID_BUTTON_8     (GUI_ID_USER + 0x09)
#define ID_BUTTON_9     (GUI_ID_USER + 0x0A)
#define ID_BUTTON_10     (GUI_ID_USER + 0x0B)
#define ID_BUTTON_11     (GUI_ID_USER + 0x0C)
#define ID_BUTTON_20     (GUI_ID_USER + 0x0D)
#define ID_BUTTON_21     (GUI_ID_USER + 0x0E)
#define ID_BUTTON_30     (GUI_ID_USER + 0x0F)
#define ID_GRAPH_0     (GUI_ID_USER + 0x10)
#define ID_TEXT_0     (GUI_ID_USER + 0x11)
#define ID_TEXT_1     (GUI_ID_USER + 0x12)
#define ID_TEXT_2     (GUI_ID_USER + 0x13)
#define ID_TEXT_3     (GUI_ID_USER + 0x14)
#define ID_TEXT_4     (GUI_ID_USER + 0x15)
#define ID_TEXT_5     (GUI_ID_USER + 0x16)
#define ID_TEXT_7     (GUI_ID_USER + 0x17)
#define ID_TEXT_8     (GUI_ID_USER + 0x18)
#define ID_TEXT_14     (GUI_ID_USER + 0x19)
#define ID_TEXT_15     (GUI_ID_USER + 0x1a)
//#define ID_TEXT_9     (GUI_ID_USER + 0x19)
#define ID_TEXT_20     (GUI_ID_USER + 0x1b)


// USER START (Optionally insert additional defines)
// USER END

/*********************************************************************
*
*       Static data
*
**********************************************************************
*/
static void Clear_Graph()
{
	GRAPH_DATA_YT_Clear(ahDataUA);
	GRAPH_DATA_YT_Clear(ahDataUB);
	GRAPH_DATA_YT_Clear(ahDataUC); 	
	GRAPH_DATA_YT_Clear(ahData3U); 	
}

static void _cbButton0(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("RealMonitor", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("实时监控", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton1(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}
		/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("SystemSet", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("系统设置", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton2(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("AlarmList", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("告警查询", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton3(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("PowerQuality", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("电能质量", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}
#if 0
static void _cbButton4(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("About us", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("关于我们", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}
#endif
static void _cbButton5(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Over Voltage Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("过压故障", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton6(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}
/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Temp&humidity Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("温湿度告警", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton7(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Ground Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("接地故障", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton8(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Resonance Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("系统过电压", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton9(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Resonance Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("短路故障", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton20(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Resonance Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("PT故障", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton21(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Resonance Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("低压故障", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}
// USER START (Optionally insert additional static data)
// USER END

/*********************************************************************
*
*       _aDialogCreate
*/
static const GUI_WIDGET_CREATE_INFO _aDialogCreate[] = {
  { FRAMEWIN_CreateIndirect, "OverVoltage_A", ID_FRAMEWIN_0, 0, 0, 800, 480, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "RealMonitor", ID_BUTTON_0, 150, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "SystemSet", ID_BUTTON_1, 280, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "AlarmList", ID_BUTTON_2, 410, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "PowerQuality", ID_BUTTON_3, 540, 0, 129, 45, 0, 0x0, 0 },
 // { BUTTON_CreateIndirect, "Button", ID_BUTTON_4, 670, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Over Voltage Alarm", ID_BUTTON_5, 378, 431, 107, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Temp&humidity Alarm", ID_BUTTON_6, 242, 431, 134, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, " Ground Alarm", ID_BUTTON_7, 134, 431, 106, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Resonance Alarm", ID_BUTTON_8, 0, 431, 132, 45, 0, 0x0, 0 },
	{ BUTTON_CreateIndirect, "Short Alarm", ID_BUTTON_9, 691, 431, 109, 45, 0, 0x0, 0 },
	{ BUTTON_CreateIndirect, "PTOpen Alarm", ID_BUTTON_20, 598, 431, 91, 45, 0, 0x0, 0 },
	{ BUTTON_CreateIndirect, "PTOpen Alarm", ID_BUTTON_21, 487, 431, 109, 45, 0, 0x0, 0 },
	
  { BUTTON_CreateIndirect, "Up", ID_BUTTON_10, 50, 380, 130, 45, 0, 0x0, 0},
  { BUTTON_CreateIndirect, "Next", ID_BUTTON_11, 240, 380, 130, 45, 0, 0x0, 0 },
	{ BUTTON_CreateIndirect, "Select", ID_BUTTON_30, 430, 380, 130, 45, 0, 0x0, 0 },
  { GRAPH_CreateIndirect, "Graph", ID_GRAPH_0, 20, 150, 780, 200, 0, 0x0, 0 },
	
	//time
  { TEXT_CreateIndirect, "", ID_TEXT_0, 20, 60, 400, 25, 0, 0x0, 0},
	
  { TEXT_CreateIndirect, "", ID_TEXT_1, 20, 94, 200, 25, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_2, 220, 94, 200, 20, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_3, 420, 94, 200, 20, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_4, 620, 94, 200, 20, 0, 0x0, 0 },
	//{ TEXT_CreateIndirect, "", ID_TEXT_9, 500, 200, 200, 20, 0, 0x0, 0 },
	{ TEXT_CreateIndirect, "", ID_TEXT_7, 430, 60, 180, 25, 0, 0x0, 0 },
	{ TEXT_CreateIndirect, "", ID_TEXT_8, 620, 60, 180, 25, 0, 0x0, 0 },
	//=====displaytime
	{ TEXT_CreateIndirect, "             ", ID_TEXT_14, 680, 6, 120, 20, 0, 0x0, 0 },
	{ TEXT_CreateIndirect, "             ", ID_TEXT_15, 680, 26, 120, 20, 0, 0x0, 0 },
	
	{ TEXT_CreateIndirect, "", ID_TEXT_20, 2, 130, 50, 25, 0, 0x0, 0 },
	#if 0
  { TEXT_CreateIndirect, "", ID_TEXT_5, 500, 197, 176, 20, 0, 0x0, 0 },
	#endif
  // USER START (Optionally insert additional widgets)
  // USER END
};

/*********************************************************************
*
*       Static code
*
**********************************************************************
*/

// USER START (Optionally insert additional static code)
// USER END

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
  WM_HWIN hItem;
  int     NCode;
  int     Id;
	int i,n;
	float VoltageTemp;
	char s[30];
	u8 PhaseFlag;
	int16_t Wave[8];
	float Sort_D[4];
	static float Scale;
	u8 year,month,day,hour,minute,second;
	u32 us;
	#if 0
	u8 PhaseFlag;
	#endif
	uint32_t Voltage;
  GUI_MEMDEV_Handle hMemJPEG;
  GUI_JPEG_INFO JpegInfo;
	#ifdef UseDefaultScale
  GRAPH_SCALE_Handle hScale;
	#endif
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
	case WM_TIMER:
		WM_RestartTimer(pMsg->Data.v,500);
		 //==========display time
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_14);
    TEXT_SetFont(hItem, GUI_FONT_20_ASCII);
    TEXT_SetTextColor(hItem, GUI_WHITE);
		SystemTime=SysGetTime();
    //sprintf(s,"%02d:%02d:%02d  20%02d/%02d/%02d",SystemTime.hour,SystemTime.minute,SystemTime.second,SystemTime.year,SystemTime.month,SystemTime.day);
		sprintf(s,"%02d:%02d:%02d",SystemTime.hour,SystemTime.minute,SystemTime.second);
		TEXT_SetText(hItem,s);
 
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_15);
    TEXT_SetFont(hItem, GUI_FONT_20_ASCII);
    TEXT_SetTextColor(hItem, GUI_WHITE);
		SystemTime=SysGetTime();
    sprintf(s,"20%02d-%02d-%02d",SystemTime.year,SystemTime.month,SystemTime.day);
		TEXT_SetText(hItem,s);

		break;	
	#if 1	
	case WM_DisplayWave:
			
		// ReadSDAlarmVALenght();
		//hWinOld= WM_SelectWindow(WM_GetClientWindow(pMsg->hWin));	
	
		 if(SDUnderValFault_sum<=0)
		 {
			hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
			TEXT_SetTextColor(hItem, GUI_GREEN); 
			TEXT_SetFont(hItem, &XBF_Font24);
			TEXT_SetText(hItem,"没有低电压故障"); 
			
			hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
			TEXT_SetText(hItem,"");
			 
			hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
			TEXT_SetText(hItem,"");

			hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_3);
			TEXT_SetText(hItem,"");	
			 
			hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
			TEXT_SetText(hItem,""); 
			 
		 }
		 else
			 
	{	 
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x00000000));
		#ifdef Use_AllData
		year=SDAlarmData->PTAlarm.Tim.year;
		month=SDAlarmData->PTAlarm.Tim.month;
		day=SDAlarmData->PTAlarm.Tim.day;
		hour=SDAlarmData->PTAlarm.Tim.hour;
		minute=SDAlarmData->PTAlarm.Tim.minute;
		second=SDAlarmData->PTAlarm.Tim.second;		
		us=SDAlarmData->PTAlarm.Tim.us;		
		us=us/1000;	 
		#else	 
		year=*(u8 *)(SDAlarm_SDRAM);
		month=*(u8 *)(SDAlarm_SDRAM+1);
		day=*(u8 *)(SDAlarm_SDRAM+2);
		hour=*(u8 *)(SDAlarm_SDRAM+3);
		minute=*(u8 *)(SDAlarm_SDRAM+4);
		second=*(u8 *)(SDAlarm_SDRAM+5);
		us=*(u8 *)(SDAlarm_SDRAM+6);
		us+=*(u8 *)(SDAlarm_SDRAM+7)<<8;
    us+=*(u8 *)(SDAlarm_SDRAM+8)<<16;
		us+=*(u8 *)(SDAlarm_SDRAM+9)<<24;	
		us=us/1000;
		#endif
		//sprintf(s,"20%02d-%02d-%02d %02d:%02d:%02d.%03d",year,month,day,hour,minute,second,us);  
		sprintf(s,"故障时间：20%02d-%02d-%02d %02d:%02d:%02d",year,month,day,hour,minute,second);  
    TEXT_SetTextColor(hItem, GUI_WHITE);
		TEXT_SetFont(hItem, &XBF_Font24); 
		TEXT_SetText(hItem,s); 
    //
    // Initialization of 'A Ground '
    //
		#ifdef Use_AllData 
		PhaseFlag=SDAlarmData->PTAlarm.ValueFlag;
		#else
		PhaseFlag=*(u8 *)(SDAlarm_SDRAM+42);
		#endif
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
    TEXT_SetTextColor(hItem, GUI_RED); 
    //TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
		TEXT_SetFont(hItem, &XBF_Font24);
		
		switch(PhaseFlag&0x7f)
		{
		case 1:
		TEXT_SetText(hItem,"A相低电压");
		break;
		case 2:
		TEXT_SetText(hItem,"B相低电压");
		break;
		case 3:
		TEXT_SetText(hItem,"AB相低电压");
		break;
		case 4:
		TEXT_SetText(hItem,"C相低电压");
		break;
		case 5:
		TEXT_SetText(hItem,"AC相低电压");
    break;
		case 6:
		TEXT_SetText(hItem,"BC低电压");
    break;
		case 7:
		TEXT_SetText(hItem,"ABC低电压");
    break;
		default:
		break;
		}
		
					
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_10);
		BUTTON_SetFont(hItem,&XBF_Font24);
		BUTTON_SetTextColor(hItem,BUTTON_CI_UNPRESSED,0x000455ea);
		BUTTON_SetText(hItem,"上一条");
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_11);
		BUTTON_SetFont(hItem,&XBF_Font24);
		BUTTON_SetTextColor(hItem,BUTTON_CI_UNPRESSED,0x000455ea);
		BUTTON_SetText(hItem,"下一条");
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_7);
		TEXT_SetTextColor(hItem, GUI_WHITE); 
		TEXT_SetFont(hItem, &XBF_Font24);
		sprintf(s,"全部故障:%d",SDUnderValFault_sum);
		TEXT_SetText(hItem,s);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_8);
		TEXT_SetTextColor(hItem, GUI_WHITE); 
		TEXT_SetFont(hItem, &XBF_Font24);
		sprintf(s,"当前故障:%d",SDUnderValFault_sum-UVA_WavePosition);
		TEXT_SetText(hItem,s);
		
		
		
		/*
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_30);
		BUTTON_SetFont(hItem,&XBF_Font24);
		BUTTON_SetTextColor(hItem,BUTTON_CI_UNPRESSED,0x000455ea);
		BUTTON_SetText(hItem,"选择");
		*/
    //
    // Initialization of 'Ua=10.00          KV'
    //
		
		switch(SelectWave)
		{
		case 0:
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_20);	
		TEXT_SetFont(hItem,GUI_FONT_24B_ASCII);
		TEXT_SetTextColor(hItem, GUI_YELLOW);
		TEXT_SetText(hItem,"KV");
			
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    
		Voltage=SDAlarmData->PTAlarm.RMSValue[0];	
		
		VoltageTemp=Voltage/100.0;
		Sort_D[0]=VoltageTemp;
		VoltageTemp*=Setting.RatioStruct.RatioPT;
		VoltageTemp=VoltageTemp/1000;
		VoltageTemp=(int32_t)(VoltageTemp*100)/100.0;
		sprintf(s,"Ua=%6.2fKV",VoltageTemp);
    TEXT_SetTextColor(hItem, GUI_YELLOW);
		TEXT_SetText(hItem,s);
    //
    // Initialization of 'Ub=10.00         KV'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_3);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FF00));
    TEXT_SetTextColor(hItem, GUI_GREEN);
		
		Voltage=SDAlarmData->PTAlarm.RMSValue[1];	
		
		VoltageTemp=Voltage/100.0;
		Sort_D[1]=VoltageTemp;
		VoltageTemp*=Setting.RatioStruct.RatioPT;
		VoltageTemp=VoltageTemp/1000;
		VoltageTemp=(int32_t)(VoltageTemp*100)/100.0;
		sprintf(s,"Ub=%6.2fKV",VoltageTemp);
		TEXT_SetText(hItem,s);
    //
    // Initialization of 'Uc=10.00         KV'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x000000FF));
    TEXT_SetTextColor(hItem, GUI_RED);
		
		Voltage=SDAlarmData->PTAlarm.RMSValue[2];	
		
		VoltageTemp=Voltage/100.0;
		Sort_D[2]=VoltageTemp;
		VoltageTemp*=Setting.RatioStruct.RatioPT;
		VoltageTemp=VoltageTemp/1000;
		VoltageTemp=(int32_t)(VoltageTemp*100)/100.0;
		sprintf(s,"Uc=%6.2fKV",VoltageTemp);
		TEXT_SetText(hItem,s);
		/*
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_9);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x000000FF));
    TEXT_SetTextColor(hItem, GUI_WHITE);
		*/
		Voltage=SDAlarmData->PTAlarm.RMSValue[3];	
		
		VoltageTemp=Voltage/100;
		Sort_D[3]=VoltageTemp;
		/*
		VoltageTemp*=Setting.RatioStruct.RatioPT;
		VoltageTemp=VoltageTemp/1000;
		sprintf(s,"3U0=%6.2fKV",VoltageTemp);
		TEXT_SetText(hItem,s);
		*/
		
		GRAPH_DATA_YT_Clear(ahDataUA);
		GRAPH_DATA_YT_Clear(ahDataUB);
		GRAPH_DATA_YT_Clear(ahDataUC);
		GRAPH_DATA_YT_Clear(ahData3U);

		
		
		Scale=sort(Sort_D,3)/(50/1.42);
			 
		for(i=6;i<18;i++)//中心点在第10周期 前4后8
			{
				//for(n=0;n<256;n++)
				n=0;
				
				while(1)
				{
					#ifdef Use_AllData 
					Wave[0]=*(u16 *)(&(SDAlarmData->PTAlarm.Wave[0][0])+i*256+n);
					Wave[1]=*(u16 *)(&(SDAlarmData->PTAlarm.Wave[1][0])+i*256+n);
					Wave[2]=*(u16 *)(&(SDAlarmData->PTAlarm.Wave[2][0])+i*256+n);
					#else
					Wave[0]=*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+2*n);
					Wave[0]+=(*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+2*n+1))<<8;
					
					Wave[1]=*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+10240+2*n);
					Wave[1]+=(*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+10240+2*n+1))<<8;
					
					Wave[2]=*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+20480+2*n);
					Wave[2]+=(*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+20480+2*n+1))<<8;
					
					#endif
					
					
					GRAPH_DATA_YT_AddValue(ahDataUA,Wave[0]/(Scale*ADCFifo->fftratio[0])+100);
				
					GRAPH_DATA_YT_AddValue(ahDataUB,Wave[1]/(Scale*ADCFifo->fftratio[1])+100);
				
					GRAPH_DATA_YT_AddValue(ahDataUC,Wave[2]/(Scale*ADCFifo->fftratio[2])+100);
					n+=4;
					if(n>=256)
						break;
					
					
			  }	
		 	 
		  }
			break;
		case 1:	//display 3U0
			
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_20);	
		TEXT_SetFont(hItem,GUI_FONT_24B_ASCII);
		TEXT_SetTextColor(hItem, GUI_YELLOW);
		TEXT_SetText(hItem," V");
		
    
		Voltage=SDAlarmData->PTAlarm.RMSValue[0];	
		
		VoltageTemp=Voltage/100;
		Sort_D[0]=VoltageTemp;
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
		TEXT_SetText(hItem,"");
    //
    // Initialization of 'Ub=10.00         KV'
    
		Voltage=SDAlarmData->PTAlarm.RMSValue[1];	
		
		VoltageTemp=Voltage/100;
		Sort_D[1]=VoltageTemp;
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_3);
		TEXT_SetText(hItem,"");
		
    //
    // Initialization of 'Uc=10.00         KV'
    //
  
		
		Voltage=SDAlarmData->PTAlarm.RMSValue[2];	
		
		VoltageTemp=Voltage/100;
		Sort_D[2]=VoltageTemp;
		
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x000000FF));
    TEXT_SetTextColor(hItem, GUI_WHITE);
		
		Voltage=SDAlarmData->PTAlarm.RMSValue[3];	
		
		VoltageTemp=Voltage/100.0;
		Sort_D[3]=VoltageTemp;
		
		//VoltageTemp*=Setting.RatioStruct.RatioPT;
		//VoltageTemp=VoltageTemp/1000;
		VoltageTemp=(int32_t)(VoltageTemp*100)/100.0;
		sprintf(s,"3U0=%6.2fV",VoltageTemp);
		TEXT_SetText(hItem,s);
		
		
		
		GRAPH_DATA_YT_Clear(ahDataUA);
		GRAPH_DATA_YT_Clear(ahDataUB);
		GRAPH_DATA_YT_Clear(ahDataUC);
		GRAPH_DATA_YT_Clear(ahData3U);

		
		Scale=Sort_D[3]/(50/1.42);
		
		for(i=6;i<18;i++)//中心点在第10周期 前4后8
			{
				//for(n=0;n<256;n++)
				n=0;
				
				while(1)
				{
					#ifdef Use_AllData 
					Wave[3]=*(u16 *)(&(SDAlarmData->PTAlarm.Wave[3][0])+i*256+n);
					#else
					Wave[3]=*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+10240*3+2*n);
					Wave[3]+=(*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+10240*3+2*n+1))<<8;
					#endif
										
					GRAPH_DATA_YT_AddValue(ahData3U,Wave[3]/(Scale*ADCFifo->fftratio[3])+100);
				
					
					n+=4;
					if(n>=256)
						break;
					
			  }	
			}
		  
			break;
		case 2://display IaIbIc
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_20);	
		TEXT_SetFont(hItem,GUI_FONT_24B_ASCII);
		TEXT_SetTextColor(hItem, GUI_YELLOW);
		TEXT_SetText(hItem,"A");
	 
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    
		Voltage=SDAlarmData->PTAlarm.RMSValue[4];	
		
		VoltageTemp=Voltage/100.0;
		Sort_D[0]=VoltageTemp;
		VoltageTemp*=Setting.RatioStruct.RatioCT;
		//VoltageTemp=VoltageTemp/1000;
		VoltageTemp=(int32_t)(VoltageTemp*100)/100.0;
		sprintf(s,"Ia=%6.2fA",VoltageTemp);
    TEXT_SetTextColor(hItem, GUI_YELLOW);
		TEXT_SetText(hItem,s);
    //
    // Initialization of 'Ub=10.00         KV'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_3);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FF00));
    TEXT_SetTextColor(hItem, GUI_GREEN);
		 
		Voltage=SDAlarmData->PTAlarm.RMSValue[5];	
		
		VoltageTemp=Voltage/100.0;
		Sort_D[1]=VoltageTemp;
		VoltageTemp*=Setting.RatioStruct.RatioCT;
		//VoltageTemp=VoltageTemp/1000;
		VoltageTemp=(int32_t)(VoltageTemp*100)/100.0;
		sprintf(s,"Ib=%6.2fA",VoltageTemp);
		TEXT_SetText(hItem,s);
    //
    // Initialization of 'Uc=10.00         KV'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x000000FF));
    TEXT_SetTextColor(hItem, GUI_RED);
		 
		Voltage=SDAlarmData->PTAlarm.RMSValue[6];	
		
		VoltageTemp=Voltage/100.0;
		Sort_D[2]=VoltageTemp;
		VoltageTemp*=Setting.RatioStruct.RatioCT;
		//VoltageTemp=VoltageTemp/1000;
		VoltageTemp=(int32_t)(VoltageTemp*100)/100.0;
		sprintf(s,"Ic=%6.2fA",VoltageTemp);
		TEXT_SetText(hItem,s);
		/*
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_9);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x000000FF));
    TEXT_SetTextColor(hItem, GUI_WHITE);
		 */
		Voltage=SDAlarmData->PTAlarm.RMSValue[7];	
		
		VoltageTemp=Voltage/100;
		Sort_D[3]=VoltageTemp;
		/*
		VoltageTemp*=Setting.RatioStruct.RatioCT;
		//VoltageTemp=VoltageTemp/1000;
		sprintf(s,"3I0=%6.2fA",VoltageTemp);
		TEXT_SetText(hItem,s);	
		*/
		
		
		GRAPH_DATA_YT_Clear(ahDataUA);
		GRAPH_DATA_YT_Clear(ahDataUB);
		GRAPH_DATA_YT_Clear(ahDataUC);
		GRAPH_DATA_YT_Clear(ahData3U);

		
		
		Scale=sort(Sort_D,3)/(50/2);
			 
		for(i=6;i<18;i++)//中心点在第10周期 前4后8
			{
				//for(n=0;n<256;n++)
				n=0;
				
				while(1)
				{
					#ifdef Use_AllData 
					Wave[4]=*(u16 *)(&(SDAlarmData->PTAlarm.Wave[4][0])+i*256+n);
					Wave[5]=*(u16 *)(&(SDAlarmData->PTAlarm.Wave[5][0])+i*256+n);
					Wave[6]=*(u16 *)(&(SDAlarmData->PTAlarm.Wave[6][0])+i*256+n);
					#else
					Wave[4]=*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+10240*4+2*n);
					Wave[4]+=(*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+10240*4+2*n+1))<<8;
					
					Wave[5]=*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+10240*5+2*n);
					Wave[5]+=(*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+10240*5+2*n+1))<<8;
					
					Wave[6]=*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+10240*6+2*n);
					Wave[6]+=(*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+10240*6+2*n+1))<<8;
					#endif
					
					
					GRAPH_DATA_YT_AddValue(ahDataUA,Wave[4]/(Scale*ADCFifo->fftratio[4])+100);
				
					GRAPH_DATA_YT_AddValue(ahDataUB,Wave[5]/(Scale*ADCFifo->fftratio[5])+100);
				
					GRAPH_DATA_YT_AddValue(ahDataUC,Wave[6]/(Scale*ADCFifo->fftratio[6])+100);
					n+=4;
					if(n>=256)
						break;
					
					
			  }	
		 	 
		  }
			
			break;
		case 3:
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_20);	
		TEXT_SetFont(hItem,GUI_FONT_24B_ASCII);
		TEXT_SetTextColor(hItem, GUI_YELLOW);
		TEXT_SetText(hItem,"A");
	 
		
    
		Voltage=SDAlarmData->PTAlarm.RMSValue[4];	
		
		VoltageTemp=Voltage/100;
		Sort_D[0]=VoltageTemp;
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
		TEXT_SetText(hItem,"");	
    //
    // Initialization of 'Ub=10.00         KV'
    
		 
		Voltage=SDAlarmData->PTAlarm.RMSValue[5];	
		
		VoltageTemp=Voltage/100;
		Sort_D[1]=VoltageTemp;
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_3);
		TEXT_SetText(hItem,"");	
		
    //
    // Initialization of 'Uc=10.00         KV'
    
		 
		Voltage=SDAlarmData->PTAlarm.RMSValue[6];	
		
		VoltageTemp=Voltage/100;
		Sort_D[2]=VoltageTemp;
		
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x000000FF));
    TEXT_SetTextColor(hItem, GUI_WHITE);
		 
		Voltage=SDAlarmData->PTAlarm.RMSValue[7];	
		
		VoltageTemp=Voltage/100.0;
		Sort_D[3]=VoltageTemp;
		
		VoltageTemp*=Setting.RatioStruct.RatioCT;
		//VoltageTemp=VoltageTemp/1000;
		VoltageTemp=(int32_t)(VoltageTemp*100)/100.0;
		sprintf(s,"3I0=%6.2fA",VoltageTemp);
		TEXT_SetText(hItem,s);	
		

		
		GRAPH_DATA_YT_Clear(ahDataUA);
		GRAPH_DATA_YT_Clear(ahDataUB);
		GRAPH_DATA_YT_Clear(ahDataUC);
		GRAPH_DATA_YT_Clear(ahData3U);
		
		
		Scale=Sort_D[3]/(50/2);
		
		for(i=6;i<18;i++)//中心点在第10周期 前4后8
			{
				//for(n=0;n<256;n++)
				n=0;
				
				while(1)
				{
					#ifdef Use_AllData 
					Wave[7]=*(u16 *)(&(SDAlarmData->PTAlarm.Wave[7][0])+i*256+n);
					#else
					Wave[7]=*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+10240*7+2*n);
					Wave[7]+=(*(u8 *)(SDAlarm_SDRAM+T_VoltageDataOffset+i*512+10240*7+2*n+1))<<8;
					#endif
										
					GRAPH_DATA_YT_AddValue(ahData3U,Wave[7]/(Scale*ADCFifo->fftratio[7])+100);
				
					
					n+=4;
					if(n>=256)
						break;
					
			  }	
			}
		
			
			break;//display 3I0
		default:
			break;
			
		}
	}
   break;
#endif	 
	
  case WM_PAINT:
    //========bmp logo
    GUI_JPEG_GetInfo(_aclogo2_s, sizeof(_aclogo2_s) ,&JpegInfo);

    hMemJPEG = GUI_MEMDEV_CreateEx(2,2,JpegInfo.XSize,JpegInfo.YSize,GUI_MEMDEV_NOTRANS);
    //hMemJPEG = GUI_MEMDEV_CreateFixed(0,0,JpegInfo.XSize,JpegInfo.YSize,GUI_MEMDEV_HASTRANS,GUI_MEMDEV_APILIST_16,GUICC_M565 );
    GUI_MEMDEV_Select(hMemJPEG);
    GUI_JPEG_Draw(_aclogo2_s,sizeof(_aclogo2_s),0,0);
    GUI_MEMDEV_Select(0);

    GUI_MEMDEV_WriteAt(hMemJPEG,2,2);
	
		GUI_MEMDEV_Delete(hMemJPEG);//


		//=======标Y轴刻度
		GUI_SetColor(GUI_YELLOW);
		GUI_SetFont(GUI_FONT_24B_ASCII);
	 switch(SelectWave)
	 	{
			case 0:
				GUI_DispStringAt("KV",2,130);
			break;
			case 1:
				GUI_DispStringAt(" V",2,130);
			break;
			case 2:
				GUI_DispStringAt("A ",2,130);
			break;
		}
		
	
		//=======标X轴刻度
				GUI_DispStringAt("-80",20,355);
				GUI_DispStringAt("-40",276-128,355);
				GUI_DispStringAt("0",276,355);
				GUI_DispStringAt("40",276+128,355);
				GUI_DispStringAt("80",276+256,355);
				GUI_DispStringAt("120",276+384,355);
				GUI_DispStringAt("120",276+384,355);
				GUI_DispStringAt("ms",760,355);
				
				hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_30);
				BUTTON_SetFont(hItem,&XBF_Font24);
				BUTTON_SetTextColor(hItem,BUTTON_CI_UNPRESSED,0x000455ea);
				switch(SelectWave)
				{	
					case 0:
					BUTTON_SetText(hItem,"电压波形");
					break;
					case 1:
					BUTTON_SetText(hItem,"3U0波形");
					break;
					case 2:
					BUTTON_SetText(hItem,"电流波形");
					break;
					case 3:
					BUTTON_SetText(hItem,"矢量图");
					break;
					default:
					break;	
				}
				
			//=======time backcolor
			GUI_SetColor(0x00959595);
			GUI_FillRect(670, 0, 800, 45);	
			//======fresh wave
				if(SelectWave!=SelectWaveSave)
				{
					SelectWaveSave=SelectWave;
					WM_SendMessageNoPara(WM_GetClientWindow(UA_hWin), WM_DisplayWave);
				}


      break;


  case WM_INIT_DIALOG:
    //
    // Initialization of 'OverVoltage_A'
    //
    hItem = pMsg->hWin;
    FRAMEWIN_SetTitleVis(hItem, 0);
    FRAMEWIN_SetClientColor(hItem,0x00333333);
    //
    // Initialization of 'Graph'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_GRAPH_0);
    GRAPH_SetBorder(hItem, 2, 0, 0, 0);
    GRAPH_SetColor(hItem,0x00333333,GRAPH_CI_BK);
    GRAPH_SetColor(hItem,0x000455ea,GRAPH_CI_BORDER);
   // GRAPH_SetColor(hItem,GUI_WHITE,GRAPH_CI_GRID);

    GRAPH_SetGridVis(hItem,1);
    GRAPH_SetGridDistX(hItem,20);//设X栅格 为20
    GRAPH_SetGridDistY(hItem,20);//设Y栅格
		#ifdef UseDefaultScale
     hScale = GRAPH_SCALE_Create(165,GUI_TS_NORMAL,GRAPH_SCALE_CF_HORIZONTAL,64);//产生X轴坐标小工具
    //hItem = GRAPH_SCALE_Create(20,GUI_TS_NORMAL,GRAPH_SCALE_CF_VERTICAL,10);
    GRAPH_AttachScale(hItem,hScale);//添加X坐标刻度
    GRAPH_SCALE_SetFactor(hScale,1);//比例因子
    GRAPH_SCALE_SetTextColor(hScale,GUI_RED);
		GRAPH_SCALE_SetFont(hScale,GUI_FONT_16B_1);

   // hScale = GRAPH_SCALE_Create(0,GUI_TS_NORMAL,GRAPH_SCALE_CF_VERTICAL,20);//产生Y轴坐标小工具
   // hScale = GRAPH_SCALE_Create(20,GUI_TA_CENTER,GRAPH_SCALE_CF_VERTICAL,20);//产生Y轴坐标小工具
    hScale = GRAPH_SCALE_Create(0,GUI_TS_NORMAL,GRAPH_SCALE_CF_VERTICAL,40);
    GRAPH_SCALE_SetOff(hScale,90);//产生负坐标
    GRAPH_AttachScale(hItem,hScale);//添加Y坐标刻度
    GRAPH_SCALE_SetFactor(hScale,0.15);//比例因子
    GRAPH_SCALE_SetTextColor(hScale,GUI_YELLOW);
		GRAPH_SCALE_SetFont(hScale,GUI_FONT_16B_1);
		#endif
//==================================================================

		/*创建数据对象 ********************** */
     ahDataUA = GRAPH_DATA_YT_Create(GUI_YELLOW,780,0,0);
     /* 数据对象添加到图形控件*/
     GRAPH_AttachData(hItem,ahDataUA);
		 GRAPH_DATA_YT_SetAlign(ahDataUA,GRAPH_ALIGN_LEFT);//向左对齐
		 
		 /*创建数据对象 ********************** */
     ahDataUB = GRAPH_DATA_YT_Create(GUI_GREEN,780,0,0);
     /* 数据对象添加到图形控件*/
     GRAPH_AttachData(hItem,ahDataUB);
		 GRAPH_DATA_YT_SetAlign(ahDataUB,GRAPH_ALIGN_LEFT);//向左对齐
		 
		 /*创建数据对象 ********************** */
     ahDataUC = GRAPH_DATA_YT_Create(GUI_RED,780,0,0);
     /* 数据对象添加到图形控件*/
     GRAPH_AttachData(hItem,ahDataUC);
		 GRAPH_DATA_YT_SetAlign(ahDataUC,GRAPH_ALIGN_LEFT);//向左对齐
		 
		 /*创建数据对象 ********************** */
     ahData3U = GRAPH_DATA_YT_Create(GUI_WHITE,780,0,0);
     /* 数据对象添加到图形控件*/
     GRAPH_AttachData(hItem,ahData3U);
		 GRAPH_DATA_YT_SetAlign(ahData3U,GRAPH_ALIGN_LEFT);//向左对齐
		 
		 
		 
		 //==================显示故障电压波形
		 StartReadSD_UVA_Flag=1;
		 UVA_WavePosition=0;
		 SelectWave=0;
		 SelectWaveSave=SelectWave;

		//Graph_Pt=ADCFifo.pt;
		//Graph_Pt=Get_pointer(ADCFifo.pt,4);//取4个周期的数据
	
		
		
		
		
		



    
    //
		#if 0
    // Initialization of '3U0=0.25          KV'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_5);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x00000000));
    TEXT_SetTextColor(hItem, GUI_WHITE);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
		#endif
		
    // USER START (Optionally insert additional code for further widget initialization)
    // USER END
     //增加回调函数改变BUTTON的皮肤。
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_0);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton0);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_1);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton1);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_2);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton2);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_3);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton3);
	#if 0
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_4);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton4);
#endif
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_5);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton5);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_6);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton6);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_7);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton7);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_8);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton8);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_9);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton9);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_20);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton20);	
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_21);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton21);

		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_10);
		BUTTON_SetFont(hItem,&XBF_Font24);
		BUTTON_SetTextColor(hItem,BUTTON_CI_UNPRESSED,0x000455ea);
		BUTTON_SetText(hItem,"上一条");
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_11);
		BUTTON_SetFont(hItem,&XBF_Font24);
		BUTTON_SetTextColor(hItem,BUTTON_CI_UNPRESSED,0x000455ea);
		BUTTON_SetText(hItem,"下一条");
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_30);
		BUTTON_SetFont(hItem,&XBF_Font24);
		BUTTON_SetTextColor(hItem,BUTTON_CI_UNPRESSED,0x000455ea);
		BUTTON_SetText(hItem,"电压波形");
		
    break;
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
    NCode = pMsg->Data.v;
		if(NCode==WM_NOTIFICATION_CLICKED)
		{
			if(SelectWaveOpen==1)
				{
					GUI_EndDialog(WS_hWin,0);
					SelectWaveOpen=0;
					if(Id==ID_BUTTON_30)
					break;
				}
				
		}
    switch(Id) {
    case ID_BUTTON_0: // Notifications sent by 'RealMonitor'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreateMain();//切换到主画面
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_1: // Notifications sent by 'SystemSet'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        //CreateTempHumdity_S();
				Createpassword();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_2: // Notifications sent by 'AlarmList'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_3: // Notifications sent by 'PowerQuality'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreatePowerQuality();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
			#if 0
    case ID_BUTTON_4: // Notifications sent by 'Button'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        Createaboutus();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
			#endif
    case ID_BUTTON_5: // Notifications sent by 'Over Voltage Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreateOverVoltage_A();//过压报警
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_6: // Notifications sent by 'Temp&humidity Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreateTempHumidity_A();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
         
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_7: // Notifications sent by ' Ground Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreateGround_A();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
				
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_8: // Notifications sent by 'Resonance Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreateResonance_A();//过压报警
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
			
		 case ID_BUTTON_9: // Notifications sent by 'short Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreateShort_A();//短路故障
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;	
			
			case ID_BUTTON_20: // Notifications sent by 'PTOpen Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreatePTOpen_A();//PT断线报警
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
			
			
			case ID_BUTTON_21: // Notifications sent by 'PT Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;	
			
			
			
    case ID_BUTTON_10: // Notifications sent by 'Up'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				if(UVA_WavePosition>=(SDUnderValFault_sum-1))
				{
					break;
				}
				UVA_WavePosition++;
				StartReadSD_UVA_Flag=1;
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
				
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_11: // Notifications sent by 'Next'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				if(UVA_WavePosition>0)
				{
					UVA_WavePosition--;
					StartReadSD_UVA_Flag=1;
				}
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
				
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
			
			case ID_BUTTON_30: // Notifications sent by 'Select'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				#if 0
				SelectWave++;
			  if(SelectWave>=4)
				SelectWave=0;	
				WM_SendMessageNoPara(WM_GetClientWindow(UA_hWin), WM_DisplayWave);
				#endif
				hItem=CreateWaveSelect();
				WM_SetStayOnTop(hItem,1);
				//StartReadSD_GA_Flag=1;
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
				
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    // USER START (Optionally insert additional code for further Ids)
    // USER END
    }
    break;
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
    break;
  }
}

/*********************************************************************
*
*       Public code
*
**********************************************************************
*/
/*********************************************************************
*
*       CreateOverVoltage_A
*/
WM_HWIN CreateUnderVoltage_A(void);
WM_HWIN CreateUnderVoltage_A(void) {
  //WM_HWIN hWin;
	WM_HTIMER hTimer;
  UA_hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
	hTimer =WM_CreateTimer(WM_GetClientWindow(UA_hWin),0,100,0);
  (void)hTimer;
  return UA_hWin;
}

// USER START (Optionally insert additional public code)
// USER END

/*************************** End of file ****************************/
