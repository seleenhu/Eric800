/*********************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.36                          *
*        Compiled Aug 31 2016, 10:53:09                              *
*        (c) 2016 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*/

// USER START (Optionally insert additional includes)
// USER END

#include "DIALOG.h"
#include "Emwin_eric800.h"
#include "InitSystem.h"
#include <stdio.h> 
extern const unsigned char _aclogo2_s[17237UL + 1];
//PowerQualityStruct PowerQuality;


/*********************************************************************
*
*       Defines
*
**********************************************************************
*/
#define ID_FRAMEWIN_0     (GUI_ID_USER + 0x00)
#define ID_BUTTON_0     (GUI_ID_USER + 0x01)
#define ID_BUTTON_1     (GUI_ID_USER + 0x02)
#define ID_BUTTON_2     (GUI_ID_USER + 0x03)
#define ID_BUTTON_3     (GUI_ID_USER + 0x04)
#define ID_BUTTON_4     (GUI_ID_USER + 0x05)
#define ID_LISTVIEW_0     (GUI_ID_USER + 0x06)


// USER START (Optionally insert additional defines)
// USER END

/*********************************************************************
*
*       Static data
*
**********************************************************************
*/

// USER START (Optionally insert additional static data)
// USER END

/*********************************************************************
*
*       _aDialogCreate
*/
static const GUI_WIDGET_CREATE_INFO _aDialogCreate[] = {
  { FRAMEWIN_CreateIndirect, "PowerQuality", ID_FRAMEWIN_0, 0, 0, 800, 480, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "RealMonitor", ID_BUTTON_0, 150, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "SystemSet", ID_BUTTON_1, 280, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "AlarmList", ID_BUTTON_2, 410, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "PowerQuality", ID_BUTTON_3, 540, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Button", ID_BUTTON_4, 670, 0, 129, 45, 0, 0x0, 0 },
  { LISTVIEW_CreateIndirect, "Listview", ID_LISTVIEW_0, 30, 70, 740, 175, 0, 0x0, 0 },
  // USER START (Optionally insert additional widgets)
  // USER END
};

/*********************************************************************
*
*       Static code
*
**********************************************************************
*/

static void _cbButton0(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("RealMonitor", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("实时监控", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton1(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("SystemSet", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("系统设置", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton2(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	
	
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("AlarmList", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("告警查询", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton3(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("PowerQuality", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("电能质量", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton4(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("About us", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("关于我们", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}


// USER START (Optionally insert additional static code)
// USER END

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
  WM_HWIN hItem;
	WM_HWIN hWinOld;
	HEADER_Handle hHeader;
  int     NCode;
  int     Id;
  GUI_MEMDEV_Handle hMemJPEG;
  GUI_JPEG_INFO JpegInfo;
  //int ResonanceValue[3][30];
  int x0,x1,y0,y1;
  int i;
	uint16_t scale;

  float     Value;
  char  s[10];

  

  // USER START (Optionally insert additional variables)
  // USER END
  
  switch (pMsg->MsgId) {
	case WM_TIMER:
		
			hWinOld= WM_SelectWindow(WM_GetClientWindow(pMsg->hWin));	
			WM_RestartTimer(pMsg->Data.v,1000);
	
      hItem = WM_GetDialogItem(pMsg->hWin, ID_LISTVIEW_0);
			//LISTVIEW_SetFont(hItem,&GUI_Font20_ASCII);
			Value=PowerQuality->ElecU[0];//A相流电压有效值
			Value=Value*Setting.RatioStruct.RatioPT;
			Value=Value/1000;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 1, 0, s);
	
			Value=PowerQuality->ElecU[1];//B相流电压有效值
			Value=Value*Setting.RatioStruct.RatioPT;
			Value=Value/1000;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 1, 1, s);
			
			Value=PowerQuality->ElecU[2];//C相流电压有效值
			Value=Value*Setting.RatioStruct.RatioPT;
			Value=Value/1000;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 1, 2, s);
			
			
			Value=PowerQuality->ElecI[0];//A相流电流有效值
			Value=Value*Setting.RatioStruct.RatioCT;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 2, 0, s);
			
			Value=PowerQuality->ElecI[1];//B相流电流有效值
			Value=Value*Setting.RatioStruct.RatioCT;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 2, 1, s);
			
			Value=PowerQuality->ElecI[2];//C相流电流有效值
			Value=Value*Setting.RatioStruct.RatioCT;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 2, 2, s);
			
			Value=PowerQuality->ElecPowerFactor[0];//A相功率因数
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 3, 0, s);
			
			Value=PowerQuality->ElecPowerFactor[1];//B相功率因数
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 3, 1, s);
			
			Value=PowerQuality->ElecPowerFactor[2];//C相功率因数
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 3, 2, s);
			
			Value=PowerQuality->ElecActivePower[0];//A相有功功率
			Value=Value*Setting.RatioStruct.RatioPT;
			Value=Value/1000;
			Value=Value*Setting.RatioStruct.RatioCT;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 4, 0, s);
			
			Value=PowerQuality->ElecActivePower[1];//B相有功功率
			Value=Value*Setting.RatioStruct.RatioPT;
			Value=Value/1000;
			Value=Value*Setting.RatioStruct.RatioCT;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 4, 1, s);
			
			Value=PowerQuality->ElecActivePower[2];//C相有功功率
			Value=Value*Setting.RatioStruct.RatioPT;
			Value=Value/1000;
			Value=Value*Setting.RatioStruct.RatioCT;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 4, 2, s);
			
			Value=PowerQuality->ElecActivePower[3];//总有功功率
			Value=Value*Setting.RatioStruct.RatioPT;
			Value=Value/1000;
			Value=Value*Setting.RatioStruct.RatioCT;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 4, 3, s);
			
			Value=PowerQuality->ElecReactivePower[0];//A相无功功率
			Value=Value*Setting.RatioStruct.RatioPT;
			Value=Value/1000;
			Value=Value*Setting.RatioStruct.RatioCT;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 5, 0, s);
			
			Value=PowerQuality->ElecReactivePower[1];//B相无功功率
			Value=Value*Setting.RatioStruct.RatioPT;
			Value=Value/1000;
			Value=Value*Setting.RatioStruct.RatioCT;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 5, 1, s);
			
			Value=PowerQuality->ElecReactivePower[2];//C相无功功率
			Value=Value*Setting.RatioStruct.RatioPT;
			Value=Value/1000;
			Value=Value*Setting.RatioStruct.RatioCT;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 5, 2, s);
			
			Value=PowerQuality->ElecReactivePower[3];//总无功功率
			Value=Value*Setting.RatioStruct.RatioPT;
			Value=Value/1000;
			Value=Value*Setting.RatioStruct.RatioCT;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 5, 3, s);
		
			Value=PowerQuality->ElecApparentPower[0];//A相视在功率
			Value=Value*Setting.RatioStruct.RatioPT;
			Value=Value/1000;
			Value=Value*Setting.RatioStruct.RatioCT;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 6, 0, s);
			
			Value=PowerQuality->ElecApparentPower[1];//B相视在功率
			Value=Value*Setting.RatioStruct.RatioPT;
			Value=Value/1000;
			Value=Value*Setting.RatioStruct.RatioCT;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 6, 1, s);
			
			Value=PowerQuality->ElecApparentPower[2];//C相视在功率
			Value=Value*Setting.RatioStruct.RatioPT;
			Value=Value/1000;
			Value=Value*Setting.RatioStruct.RatioCT;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 6, 2, s);
			
			Value=PowerQuality->ElecApparentPower[3];//总视在功率
			Value=Value*Setting.RatioStruct.RatioPT;
			Value=Value/1000;
			Value=Value*Setting.RatioStruct.RatioCT;
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 6, 3, s);
			
			Value=PowerQuality->FrequencyA;//频率
			Value=Value/100;//频率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 7, 0, s);
			
			Value=PowerQuality->FrequencyB;//频率
			Value=Value/100;//频率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 7, 1, s);
			
			Value=PowerQuality->FrequencyC;//频率
			Value=Value/100;//频率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 7, 2, s);
			
      
	
			
	
	

//================画柱状图
		Value=sort(PowerQuality->ElecThdu[0],30);
		if(Value>=170)
		{
			scale=170/Value;	
		}
		else
			scale=1;

    for(i=0;i<30;i++)
    {
        x0=25+22*i;
        //y0=455-ResonanceValue[i];
				y0=455-PowerQuality->ElecThdu[0][i]*scale;
        x1=47+22*i;
        y1=455;
        if(i%2==0)
        GUI_SetColor(0x00959595);
        else
        GUI_SetColor(0x00dddddd);
        GUI_FillRect(x0,y0,x1,y1);
    }
	
		WM_SelectWindow(hWinOld);
  break;		
		
  case WM_PAINT:
      //========bmp logo
    GUI_JPEG_GetInfo(_aclogo2_s, sizeof(_aclogo2_s) ,&JpegInfo);

    hMemJPEG = GUI_MEMDEV_CreateEx(2,2,JpegInfo.XSize,JpegInfo.YSize,GUI_MEMDEV_NOTRANS);
    //hMemJPEG = GUI_MEMDEV_CreateFixed(0,0,JpegInfo.XSize,JpegInfo.YSize,GUI_MEMDEV_HASTRANS,GUI_MEMDEV_APILIST_16,GUICC_M565 );
    GUI_MEMDEV_Select(hMemJPEG);
    GUI_JPEG_Draw(_aclogo2_s,sizeof(_aclogo2_s),0,0);
    GUI_MEMDEV_Select(0);

    GUI_MEMDEV_WriteAt(hMemJPEG,2,2);
	
		GUI_MEMDEV_Delete(hMemJPEG);//

	
	#if  0
//=========================test
			PowerQuality.ElecU[0]=380.0;
			PowerQuality.ElecU[1]=379.9;
			PowerQuality.ElecU[2]=378.5;
			PowerQuality.ElecI[0]=100.0;
			PowerQuality.ElecI[1]=99.7;
			PowerQuality.ElecI[2]=98.4;
			PowerQuality.Frequency=49.8;
	
//==========================	

      hItem = WM_GetDialogItem(pMsg->hWin, ID_LISTVIEW_0);
			//LISTVIEW_SetFont(hItem,&GUI_Font20_ASCII);
			Value=PowerQuality.ElecU[0];//A相流电压有效值
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 1, 0, s);
	
			Value=PowerQuality.ElecU[1];//B相流电压有效值
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 1, 1, s);
			
			Value=PowerQuality.ElecU[2];//C相流电压有效值
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 1, 2, s);
			
			
			Value=PowerQuality.ElecI[0];//A相流电流有效值
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 2, 0, s);
			
			Value=PowerQuality.ElecI[1];//B相流电流有效值
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 2, 1, s);
			
			Value=PowerQuality.ElecI[2];//C相流电流有效值
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 2, 2, s);
			
			Value=PowerQuality.ElecPowerFactor[0];//A相功率因数
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 3, 0, s);
			
			Value=PowerQuality.ElecPowerFactor[1];//B相功率因数
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 3, 1, s);
			
			Value=PowerQuality.ElecPowerFactor[2];//C相功率因数
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 3, 2, s);
			
			Value=PowerQuality.ElecActivePower[0];//A相有功功率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 4, 0, s);
			
			Value=PowerQuality.ElecActivePower[1];//B相有功功率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 4, 1, s);
			
			Value=PowerQuality.ElecActivePower[2];//C相有功功率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 4, 2, s);
			
			Value=PowerQuality.ElecActivePower[3];//总有功功率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 4, 3, s);
			
			Value=PowerQuality.ElecReactivePower[0];//A相无功功率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 5, 0, s);
			
			Value=PowerQuality.ElecReactivePower[1];//B相无功功率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 5, 1, s);
			
			Value=PowerQuality.ElecReactivePower[2];//C相无功功率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 5, 2, s);
			
			Value=PowerQuality.ElecReactivePower[3];//总无功功率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 5, 3, s);
		
			Value=PowerQuality.ElecApparentPower[0];//A相视在功率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 6, 0, s);
			
			Value=PowerQuality.ElecApparentPower[1];//B相视在功率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 6, 1, s);
			
			Value=PowerQuality.ElecApparentPower[2];//C相视在功率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 6, 2, s);
			
			Value=PowerQuality.ElecApparentPower[3];//总视在功率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 6, 3, s);
			
			Value=PowerQuality.Frequency;//频率
			sprintf(s,"%6.2f",Value);
			LISTVIEW_SetItemText(hItem, 7, 0, s);
			
      
	
			
	
	

//================画柱状图

    ResonanceValue[0]=150;
    ResonanceValue[1]=120;
    ResonanceValue[2]=100;
    ResonanceValue[3]=80;
    ResonanceValue[4]=50;
    ResonanceValue[5]=60;
    ResonanceValue[6]=70;
    ResonanceValue[7]=30;
    ResonanceValue[8]=80;
    ResonanceValue[9]=40;
    ResonanceValue[10]=30;
    ResonanceValue[11]=20;
    ResonanceValue[12]=10;
    ResonanceValue[13]=15;
    ResonanceValue[14]=10;
    ResonanceValue[15]=30;
    ResonanceValue[16]=20;
    ResonanceValue[17]=10;
    ResonanceValue[18]=5;
    ResonanceValue[19]=15;
    ResonanceValue[20]=5;
    ResonanceValue[21]=10;
    ResonanceValue[22]=2;
    ResonanceValue[23]=5;
    ResonanceValue[24]=6;
    ResonanceValue[25]=4;
    ResonanceValue[26]=3;
    ResonanceValue[27]=2;
    ResonanceValue[28]=3;
    ResonanceValue[29]=5;
    ResonanceValue[30]=4;
    ResonanceValue[31]=2;

    //GUI_SetPenSize(22);

    for(i=0;i<32;i++)
    {
        x0=25+22*i;
        y0=455-ResonanceValue[i];
        x1=47+22*i;
        y1=455;
        if(i%2==0)
        GUI_SetColor(0x00959595);
        else
        GUI_SetColor(0x00dddddd);
        GUI_FillRect(x0,y0,x1,y1);
    }


  #endif 
		
		GUI_SetColor(0x000455ea);
		GUI_SetFont(&XBF_Font32);
		GUI_DispStringAt("谐波柱状图：",30,255);
      break;
  case WM_INIT_DIALOG:
    //
    // Initialization of 'PowerQuality'
    //
    hItem = pMsg->hWin;
    FRAMEWIN_SetTitleVis(hItem, 0);
    FRAMEWIN_SetClientColor(hItem,0x00333333);
    //
    // Initialization of 'Listview'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_LISTVIEW_0);
	  hHeader=LISTVIEW_GetHeader(hItem);
		HEADER_SetFont(hHeader,&XBF_Font24);
		//LISTVIEW_SetDefaultBkColor(LISTVIEW_CI_UNSEL,GUI_RED);
		//LISTVIEW_SetDefaultFont(&GUI_Font24B_ASCII);
		//LISTVIEW_SetFont(hItem,&XBF_Font24);
		LISTVIEW_SetTextColor(hItem,LISTVIEW_CI_UNSEL,GUI_BLACK);
		
    //LISTVIEW_AddColumn(hItem, 92, "Parameter", GUI_TA_HCENTER | GUI_TA_VCENTER);
		LISTVIEW_AddColumn(hItem, 92, "参数", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 92, "U(KV)", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 92, "I(A)", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddRow(hItem, NULL);
    LISTVIEW_SetGridVis(hItem, 1);
    LISTVIEW_AddColumn(hItem, 92, "COS", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 92, "P(KW)", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 92, "Q(Kvar)", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 92, "S(KVA)", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 92, "f(HZ)", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_SetRowHeight(hItem, 35);
    LISTVIEW_SetHeaderHeight(hItem, 35);
    LISTVIEW_AddRow(hItem, NULL);
    LISTVIEW_AddRow(hItem, NULL);
    LISTVIEW_AddRow(hItem, NULL);
		
		LISTVIEW_SetFont(hItem,&XBF_Font24);
		LISTVIEW_SetItemTextColor(hItem,0,0,LISTVIEW_CI_UNSEL,GUI_YELLOW);
    LISTVIEW_SetItemText(hItem, 0, 0, "A相");
		LISTVIEW_SetItemTextColor(hItem,0,1,LISTVIEW_CI_UNSEL,GUI_GREEN);
    LISTVIEW_SetItemText(hItem, 0, 1, "B相");
		LISTVIEW_SetItemTextColor(hItem,0,2,LISTVIEW_CI_UNSEL,GUI_RED);
    LISTVIEW_SetItemText(hItem, 0, 2, "C相");
		LISTVIEW_SetItemTextColor(hItem,0,3,LISTVIEW_CI_UNSEL,0x000455ea);
    LISTVIEW_SetItemText(hItem, 0, 3, "总数");
		
		
    // USER START (Optionally insert additional code for further widget initialization)
    // USER END
      //增加回调函数改变BUTTON的皮肤。
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_0);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton0);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_1);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton1);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_2);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton2);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_3);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton3);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_4);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton4);

		if(NumPadOpen==1)
				{
					GUI_EndDialog(NM_hWin,0);
					NumPadOpen=0;
				}
    break;
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
    NCode = pMsg->Data.v;
    switch(Id) {
    case ID_BUTTON_0: // Notifications sent by 'RealMonitor'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				 GUI_EndDialog(pMsg->hWin,0);
        CreateMain();//切换到主画面
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
       
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_1: // Notifications sent by 'SystemSet'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				GUI_EndDialog(pMsg->hWin,0);
        //CreateTempHumdity_S();
				 Createpassword();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_2: // Notifications sent by 'AlarmList'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				GUI_EndDialog(pMsg->hWin,0);
        CreateOverVoltage_A();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_3: // Notifications sent by 'PowerQuality'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_4: // Notifications sent by 'Button'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				GUI_EndDialog(pMsg->hWin,0);
        Createaboutus();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_LISTVIEW_0: // Notifications sent by 'Listview'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_SEL_CHANGED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    // USER START (Optionally insert additional code for further Ids)
    // USER END
    }
    break;
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
    break;
  }
}

/*********************************************************************
*
*       Public code
*
**********************************************************************
*/
/*********************************************************************
*
*       CreatePowerQuality
*/
WM_HWIN CreatePowerQuality(void);
WM_HWIN CreatePowerQuality(void) {
  WM_HWIN hWin;
	WM_HTIMER hTimer;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
	hTimer =WM_CreateTimer(WM_GetClientWindow(hWin),0,100,0);
	(void)hTimer;
  return hWin;
}

// USER START (Optionally insert additional public code)
// USER END

/*************************** End of file ****************************/
