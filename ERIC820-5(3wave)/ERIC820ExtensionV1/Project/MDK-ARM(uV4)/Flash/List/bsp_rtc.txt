; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_rtc.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_rtc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\arithmetic -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX --omf_browse=.\flash\obj\bsp_rtc.crf ..\..\User\bsp_stm32f4xx\src\bsp_rtc.c]
                          THUMB

                          AREA ||i.My_RTC_Init||, CODE, READONLY, ALIGN=2

                  My_RTC_Init PROC
;;;14     
;;;15     uint8_t My_RTC_Init(uint8_t setflag)
000000  b570              PUSH     {r4-r6,lr}
;;;16     {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;17     	RTC_InitTypeDef RTC_InitStructure;
;;;18     	uint32_t data32;
;;;19     	u16 retry=0x01;
000006  2501              MOVS     r5,#1
;;;20     	RTC_TimeTypeDef settime;
;;;21     	RTC_DateTypeDef setdate;
;;;22     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);//使能 PWR 时钟
000008  2101              MOVS     r1,#1
00000a  0708              LSLS     r0,r1,#28
00000c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;23     	PWR_BackupAccessCmd(ENABLE); //使能后备寄存器访问
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       PWR_BackupAccessCmd
;;;24     	data32 = RTC_ReadBackupRegister(RTC_BKP_DR0);
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       RTC_ReadBackupRegister
00001c  4606              MOV      r6,r0
;;;25     	if((data32 !=0x5050)||setflag)//是否第一次配置?
00001e  f2450050          MOV      r0,#0x5050
000022  4286              CMP      r6,r0
000024  d101              BNE      |L1.42|
000026  2c00              CMP      r4,#0
000028  d048              BEQ      |L1.188|
                  |L1.42|
;;;26     	{
;;;27     		RCC_LSEConfig(RCC_LSE_ON);//LSE 开启
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       RCC_LSEConfig
;;;28     		while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET)
000030  e001              B        |L1.54|
                  |L1.50|
;;;29     		//检查指定的 RCC 标志位设置与否,等待低速晶振就绪
;;;30     		{ 	
;;;31     			retry++;
000032  1c68              ADDS     r0,r5,#1
000034  b285              UXTH     r5,r0
                  |L1.54|
000036  2041              MOVS     r0,#0x41              ;28
000038  f7fffffe          BL       RCC_GetFlagStatus
00003c  2800              CMP      r0,#0                 ;28
00003e  d0f8              BEQ      |L1.50|
;;;32     			
;;;33     		}
;;;34     		if(retry==0)return 1; //LSE 开启失败.
000040  b915              CBNZ     r5,|L1.72|
000042  2001              MOVS     r0,#1
                  |L1.68|
;;;35     		RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE); //选择 LSE 作为 RTC 时钟STM32F4 开发指南(库函数版)	
;;;36     		RCC_RTCCLKCmd(ENABLE); //使能 RTC 时钟
;;;37     		RTC_InitStructure.RTC_AsynchPrediv = 0x7F;//RTC 异步分频系数(1~0X7F)
;;;38     		RTC_InitStructure.RTC_SynchPrediv = 0xFF;//RTC 同步分频系数(0~7FFF)
;;;39     		RTC_InitStructure.RTC_HourFormat = RTC_HourFormat_24;//24 小时格式
;;;40     		RTC_Init(&RTC_InitStructure);//初始化 RTC 参数
;;;41     
;;;42     		settime.RTC_H12 = RTC_H12_AM;
;;;43     		settime.RTC_Hours=SystemTime.hour;
;;;44     		settime.RTC_Minutes=SystemTime.minute;
;;;45     		settime.RTC_Seconds=SystemTime.second;
;;;46     		setdate.RTC_Year = SystemTime.year;
;;;47     		setdate.RTC_Month= SystemTime.month;
;;;48     		setdate.RTC_Date= SystemTime.day;
;;;49     		setdate.RTC_WeekDay = 0;
;;;50     		RTC_SetTime(RTC_Format_BIN, &settime);
;;;51     		RTC_SetDate(RTC_Format_BIN, &setdate);	
;;;52     		RTC_WriteBackupRegister(RTC_BKP_DR0,0x5050);//标记已经初始化过了
;;;53     	}
;;;54     	return 0;
;;;55     }//My_RTC_Init
000044  b006              ADD      sp,sp,#0x18
000046  bd70              POP      {r4-r6,pc}
                  |L1.72|
000048  f44f7080          MOV      r0,#0x100             ;35
00004c  f7fffffe          BL       RCC_RTCCLKConfig
000050  2001              MOVS     r0,#1                 ;36
000052  f7fffffe          BL       RCC_RTCCLKCmd
000056  207f              MOVS     r0,#0x7f              ;37
000058  9004              STR      r0,[sp,#0x10]         ;37
00005a  20ff              MOVS     r0,#0xff              ;38
00005c  9005              STR      r0,[sp,#0x14]         ;38
00005e  2000              MOVS     r0,#0                 ;39
000060  9003              STR      r0,[sp,#0xc]          ;39
000062  a803              ADD      r0,sp,#0xc            ;40
000064  f7fffffe          BL       RTC_Init
000068  2000              MOVS     r0,#0                 ;42
00006a  f88d000b          STRB     r0,[sp,#0xb]          ;42
00006e  4814              LDR      r0,|L1.192|
000070  78c0              LDRB     r0,[r0,#3]            ;43  ; SystemTime
000072  f88d0008          STRB     r0,[sp,#8]            ;43
000076  4812              LDR      r0,|L1.192|
000078  7900              LDRB     r0,[r0,#4]            ;44  ; SystemTime
00007a  f88d0009          STRB     r0,[sp,#9]            ;44
00007e  4810              LDR      r0,|L1.192|
000080  7940              LDRB     r0,[r0,#5]            ;45  ; SystemTime
000082  f88d000a          STRB     r0,[sp,#0xa]          ;45
000086  480e              LDR      r0,|L1.192|
000088  7800              LDRB     r0,[r0,#0]            ;46  ; SystemTime
00008a  f88d0007          STRB     r0,[sp,#7]            ;46
00008e  480c              LDR      r0,|L1.192|
000090  7840              LDRB     r0,[r0,#1]            ;47  ; SystemTime
000092  f88d0005          STRB     r0,[sp,#5]            ;47
000096  480a              LDR      r0,|L1.192|
000098  7880              LDRB     r0,[r0,#2]            ;48  ; SystemTime
00009a  f88d0006          STRB     r0,[sp,#6]            ;48
00009e  2000              MOVS     r0,#0                 ;49
0000a0  f88d0004          STRB     r0,[sp,#4]            ;49
0000a4  a902              ADD      r1,sp,#8              ;50
0000a6  f7fffffe          BL       RTC_SetTime
0000aa  a901              ADD      r1,sp,#4              ;51
0000ac  2000              MOVS     r0,#0                 ;51
0000ae  f7fffffe          BL       RTC_SetDate
0000b2  f2450150          MOV      r1,#0x5050            ;52
0000b6  2000              MOVS     r0,#0                 ;52
0000b8  f7fffffe          BL       RTC_WriteBackupRegister
                  |L1.188|
0000bc  2000              MOVS     r0,#0                 ;54
0000be  e7c1              B        |L1.68|
;;;56     
                          ENDP

                  |L1.192|
                          DCD      SystemTime

                          AREA ||i.ReadRtcTime||, CODE, READONLY, ALIGN=2

                  ReadRtcTime PROC
;;;56     
;;;57     void ReadRtcTime(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;58     {
;;;59     	RTC_TimeTypeDef settime;
;;;60     	RTC_DateTypeDef setdate;
;;;61     
;;;62     	RTC_GetTime(RTC_Format_BIN, &settime);
000002  a901              ADD      r1,sp,#4
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       RTC_GetTime
;;;63     	RTC_GetDate(RTC_Format_BIN, &setdate);
00000a  4669              MOV      r1,sp
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       RTC_GetDate
;;;64     	SystemTime.hour = settime.RTC_Hours;
000012  f89d0004          LDRB     r0,[sp,#4]
000016  490f              LDR      r1,|L2.84|
000018  70c8              STRB     r0,[r1,#3]
;;;65     	SystemTime.minute = settime.RTC_Minutes;
00001a  f89d0005          LDRB     r0,[sp,#5]
00001e  7108              STRB     r0,[r1,#4]
;;;66     	SystemTime.second = settime.RTC_Seconds;
000020  f89d0006          LDRB     r0,[sp,#6]
000024  7148              STRB     r0,[r1,#5]
;;;67     	SystemTime.year = setdate.RTC_Year;
000026  f89d0003          LDRB     r0,[sp,#3]
00002a  7008              STRB     r0,[r1,#0]
;;;68     	SystemTime.month = setdate.RTC_Month;
00002c  f89d0001          LDRB     r0,[sp,#1]
000030  7048              STRB     r0,[r1,#1]
;;;69     	SystemTime.day = setdate.RTC_Date;
000032  f89d0002          LDRB     r0,[sp,#2]
000036  7088              STRB     r0,[r1,#2]
;;;70     	SystemTime.us = TIM_GetCounter(TIM3);
000038  4807              LDR      r0,|L2.88|
00003a  f7fffffe          BL       TIM_GetCounter
00003e  4905              LDR      r1,|L2.84|
000040  f8c10006          STR      r0,[r1,#6]  ; SystemTime
;;;71     	SystemTime.us <<= 4;
000044  4608              MOV      r0,r1
000046  f8d00006          LDR      r0,[r0,#6]  ; SystemTime
00004a  0100              LSLS     r0,r0,#4
00004c  f8c10006          STR      r0,[r1,#6]  ; SystemTime
;;;72     }//ReadRtcTime
000050  bd1c              POP      {r2-r4,pc}
;;;73     
                          ENDP

000052  0000              DCW      0x0000
                  |L2.84|
                          DCD      SystemTime
                  |L2.88|
                          DCD      0x40000400

                          AREA ||i.TIM3_Int_Init||, CODE, READONLY, ALIGN=2

                  TIM3_Int_Init PROC
;;;73     
;;;74     void TIM3_Int_Init(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;75     {
;;;76     	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
;;;77     	//NVIC_InitTypeDef NVIC_InitStructure;
;;;78     	
;;;79     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE); //①使能 TIM3 时钟
000002  2101              MOVS     r1,#1
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;80     	TIM_TimeBaseInitStructure.TIM_Period = 62500-1; //自动重装载值
00000a  f24f4023          MOV      r0,#0xf423
00000e  9001              STR      r0,[sp,#4]
;;;81     	TIM_TimeBaseInitStructure.TIM_Prescaler= 168*16-1; //定时器分频
000010  f640207f          MOV      r0,#0xa7f
000014  f8ad0000          STRH     r0,[sp,#0]
;;;82     	TIM_TimeBaseInitStructure.TIM_CounterMode=TIM_CounterMode_Up; //向上计数模式
000018  2000              MOVS     r0,#0
00001a  f8ad0002          STRH     r0,[sp,#2]
;;;83     	TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1;
00001e  f8ad0008          STRH     r0,[sp,#8]
;;;84     	TIM_TimeBaseInit(TIM3,&TIM_TimeBaseInitStructure);// ②初始化定时器 TIM3
000022  4669              MOV      r1,sp
000024  4803              LDR      r0,|L3.52|
000026  f7fffffe          BL       TIM_TimeBaseInit
;;;85     
;;;86     #if 0	
;;;87     	TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE); //③允许定时器 3 更新中断
;;;88     	NVIC_InitStructure.NVIC_IRQChannel=TIM3_IRQn; //定时器 3 中断
;;;89     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=0x01; //抢占优先级 1
;;;90     	NVIC_InitStructure.NVIC_IRQChannelSubPriority=0x03; //子优先级 3
;;;91     	NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;
;;;92     	NVIC_Init(&NVIC_InitStructure);// ④初始化 NVIC
;;;93     #endif
;;;94     	
;;;95     	TIM_Cmd(TIM3,ENABLE); //⑤使能定时器 3
00002a  2101              MOVS     r1,#1
00002c  4801              LDR      r0,|L3.52|
00002e  f7fffffe          BL       TIM_Cmd
;;;96     }
000032  bd0e              POP      {r1-r3,pc}
;;;97     
                          ENDP

                  |L3.52|
                          DCD      0x40000400

                          AREA ||.data||, DATA, ALIGN=0

                  SystemTime
000000  140a0c09          DCB      0x14,0x0a,0x0c,0x09
000004  2f1e              DCB      0x2f,0x1e
                          DCDU     0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_rtc_c_0028878a____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_rtc_c_0028878a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_rtc_c_0028878a____REVSH|
#line 144
|__asm___9_bsp_rtc_c_0028878a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
