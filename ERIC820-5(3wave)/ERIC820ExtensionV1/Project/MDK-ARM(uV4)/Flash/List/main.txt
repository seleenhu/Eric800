; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\arithmetic -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;66     */
;;;67     int main(void)
000000  2000              MOVS     r0,#0
;;;68     {
;;;69     
;;;70     	for(MainDelayTime = 0; MainDelayTime<26250000;MainDelayTime++);
000002  4947              LDR      r1,|L1.288|
000004  6008              STR      r0,[r1,#0]  ; MainDelayTime
000006  e004              B        |L1.18|
                  |L1.8|
000008  4845              LDR      r0,|L1.288|
00000a  6800              LDR      r0,[r0,#0]  ; MainDelayTime
00000c  1c40              ADDS     r0,r0,#1
00000e  4944              LDR      r1,|L1.288|
000010  6008              STR      r0,[r1,#0]  ; MainDelayTime
                  |L1.18|
000012  4843              LDR      r0,|L1.288|
000014  6800              LDR      r0,[r0,#0]  ; MainDelayTime
000016  4943              LDR      r1,|L1.292|
000018  4288              CMP      r0,r1
00001a  d3f5              BCC      |L1.8|
;;;71     
;;;72     	bsp_Init();		/* 硬件初始化 */
00001c  f7fffffe          BL       bsp_Init
;;;73     
;;;74     	
;;;75     	TestPinInit();
000020  f7fffffe          BL       TestPinInit
;;;76     
;;;77     	
;;;78     	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);//使能写入PR和RLR
000024  f2455055          MOV      r0,#0x5555
000028  f7fffffe          BL       IWDG_WriteAccessCmd
;;;79     	IWDG_SetPrescaler(IWDG_Prescaler_256);	//写入PR预分频值
00002c  2006              MOVS     r0,#6
00002e  f7fffffe          BL       IWDG_SetPrescaler
;;;80     	IWDG_SetReload(1000);  //写入RLR
000032  f44f707a          MOV      r0,#0x3e8
000036  f7fffffe          BL       IWDG_SetReload
;;;81     	IWDG_Enable();//KR写入0xCCCC
00003a  f7fffffe          BL       IWDG_Enable
;;;82     	//bsp_LedOn(0);	
;;;83     	//bsp_LedOff(0);
;;;84     	//bsp_LedOn(1);
;;;85     	//bsp_LedOff(1);
;;;86     	//bsp_LedToggle(0);
;;;87     	//bsp_LedToggle(1);
;;;88     	bsp_LedOff(iGreenLed);
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       bsp_LedOff
;;;89     	bsp_LedOn(iRedLed);
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       bsp_LedOn
;;;90     	//bsp_LedOn(iRedLed);
;;;91     
;;;92     	//SendCanMsg(0x321,"12345678",8);	
;;;93     	while(1){
00004a  e067              B        |L1.284|
                  |L1.76|
;;;94     		if(FIFO_length(ADCFifo.bt, AD_pt, ADCbufSize)>=512){
00004c  4836              LDR      r0,|L1.296|
00004e  f7fffffe          BL       DMA_GetCurrDataCounter
000052  f5c04020          RSB      r0,r0,#0xa000
000056  b284              UXTH     r4,r0
000058  4934              LDR      r1,|L1.300|
00005a  8808              LDRH     r0,[r1,#0]  ; ADCFifo
00005c  f44f4220          MOV      r2,#0xa000
000060  4621              MOV      r1,r4
000062  f7fffffe          BL       FIFO_length
000066  f5b07f00          CMP      r0,#0x200
00006a  db0f              BLT      |L1.140|
;;;95     			ADCFifo.bt = FIFO_pointer(ADCFifo.bt, 128, ADCbufSize);
00006c  492f              LDR      r1,|L1.300|
00006e  8808              LDRH     r0,[r1,#0]  ; ADCFifo
000070  f44f4220          MOV      r2,#0xa000
000074  2180              MOVS     r1,#0x80
000076  f7fffffe          BL       FIFO_pointer
00007a  492c              LDR      r1,|L1.300|
00007c  8008              STRH     r0,[r1,#0]
;;;96     			F5mS = 1;
00007e  482c              LDR      r0,|L1.304|
000080  7800              LDRB     r0,[r0,#0]  ; TimData
000082  f0200001          BIC      r0,r0,#1
000086  1c40              ADDS     r0,r0,#1
000088  4929              LDR      r1,|L1.304|
00008a  7008              STRB     r0,[r1,#0]
                  |L1.140|
;;;97     			//Test1Xor();
;;;98     		}
;;;99     		if(F5mS){
00008c  4828              LDR      r0,|L1.304|
00008e  7800              LDRB     r0,[r0,#0]  ; TimData
000090  f0000001          AND      r0,r0,#1
000094  2800              CMP      r0,#0
000096  d03d              BEQ      |L1.276|
;;;100    			F5mS = 0;
000098  4825              LDR      r0,|L1.304|
00009a  7800              LDRB     r0,[r0,#0]  ; TimData
00009c  f0200001          BIC      r0,r0,#1
0000a0  4923              LDR      r1,|L1.304|
0000a2  7008              STRB     r0,[r1,#0]
;;;101    			CanDelayTim++;
0000a4  4823              LDR      r0,|L1.308|
0000a6  8800              LDRH     r0,[r0,#0]  ; CanDelayTim
0000a8  1c40              ADDS     r0,r0,#1
0000aa  4922              LDR      r1,|L1.308|
0000ac  8008              STRH     r0,[r1,#0]
;;;102    			IWDG_ReloadCounter();
0000ae  f7fffffe          BL       IWDG_ReloadCounter
;;;103    			F1SCount++;
0000b2  4821              LDR      r0,|L1.312|
0000b4  7800              LDRB     r0,[r0,#0]  ; F1SCount
0000b6  1c40              ADDS     r0,r0,#1
0000b8  491f              LDR      r1,|L1.312|
0000ba  7008              STRB     r0,[r1,#0]
;;;104    			if(F1SCount>=200){
0000bc  4608              MOV      r0,r1
0000be  7800              LDRB     r0,[r0,#0]  ; F1SCount
0000c0  28c8              CMP      r0,#0xc8
0000c2  db12              BLT      |L1.234|
;;;105    				F1SCount = 0;
0000c4  2000              MOVS     r0,#0
0000c6  7008              STRB     r0,[r1,#0]
;;;106    				CalRMS(AD_pt);
0000c8  4817              LDR      r0,|L1.296|
0000ca  f7fffffe          BL       DMA_GetCurrDataCounter
0000ce  f5c04020          RSB      r0,r0,#0xa000
0000d2  b284              UXTH     r4,r0
0000d4  4620              MOV      r0,r4
0000d6  f7fffffe          BL       CalRMS
;;;107    				if(EepromSaveFlag){
0000da  4818              LDR      r0,|L1.316|
0000dc  7800              LDRB     r0,[r0,#0]  ; EepromSaveFlag
0000de  b120              CBZ      r0,|L1.234|
;;;108    					EepromSaveFlag = 0;
0000e0  2000              MOVS     r0,#0
0000e2  4916              LDR      r1,|L1.316|
0000e4  7008              STRB     r0,[r1,#0]
;;;109    					FlashWrite();
0000e6  f7fffffe          BL       FlashWrite
                  |L1.234|
;;;110    				}
;;;111    				
;;;112    			}
;;;113    			if(VerifyFlag){
0000ea  4815              LDR      r0,|L1.320|
0000ec  7800              LDRB     r0,[r0,#0]  ; VerifyFlag
0000ee  b158              CBZ      r0,|L1.264|
;;;114    				VerifyFlag = 0;
0000f0  2000              MOVS     r0,#0
0000f2  4913              LDR      r1,|L1.320|
0000f4  7008              STRB     r0,[r1,#0]
;;;115    				CalVerify(AD_pt);
0000f6  480c              LDR      r0,|L1.296|
0000f8  f7fffffe          BL       DMA_GetCurrDataCounter
0000fc  f5c04020          RSB      r0,r0,#0xa000
000100  b284              UXTH     r4,r0
000102  4620              MOV      r0,r4
000104  f7fffffe          BL       CalVerify
                  |L1.264|
;;;116    			}
;;;117    			
;;;118    			can_SetTask();
000108  f7fffffe          BL       can_SetTask
;;;119    			CanBreath();
00010c  f7fffffe          BL       CanBreath
;;;120    			CanSendWave();
000110  f7fffffe          BL       CanSendWave
                  |L1.276|
;;;121    		}
;;;122    		can_Task();
000114  f7fffffe          BL       can_Task
;;;123    		SelCalRMS();		
000118  f7fffffe          BL       SelCalRMS
                  |L1.284|
00011c  e796              B        |L1.76|
;;;124    	}
;;;125    }
;;;126    
                          ENDP

00011e  0000              DCW      0x0000
                  |L1.288|
                          DCD      MainDelayTime
                  |L1.292|
                          DCD      0x01908b10
                  |L1.296|
                          DCD      0x40026410
                  |L1.300|
                          DCD      ADCFifo
                  |L1.304|
                          DCD      TimData
                  |L1.308|
                          DCD      CanDelayTim
                  |L1.312|
                          DCD      F1SCount
                  |L1.316|
                          DCD      EepromSaveFlag
                  |L1.320|
                          DCD      VerifyFlag

                          AREA ||.data||, DATA, ALIGN=2

                  MainDelayTime
                          DCD      0x00000000
                  F1SCount
000004  00                DCB      0x00
                  CalFlag
000005  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 144
|__asm___6_main_c_main____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
