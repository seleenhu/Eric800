; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\arithmetic -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX --omf_browse=.\flash\obj\bsp.crf ..\..\User\bsp_stm32f4xx\bsp.c]
                          THUMB

                          AREA ||i.bsp_Idle||, CODE, READONLY, ALIGN=1

                  bsp_Idle PROC
;;;94     */
;;;95     void bsp_Idle(void)
000000  4770              BX       lr
;;;96     {
;;;97     	/* --- 喂狗 */
;;;98     
;;;99     	/* --- 让CPU进入休眠，由Systick定时中断唤醒或者其他中断唤醒 */
;;;100    
;;;101    	/* 对于 emWin 图形库，可以插入图形库需要的轮询函数 */
;;;102    	//GUI_Exec();
;;;103    
;;;104    	/* 对于 uIP 协议实现，可以插入uip轮询函数 */
;;;105    }
;;;106    
                          ENDP


                          AREA ||i.bsp_Init||, CODE, READONLY, ALIGN=2

                  bsp_Init PROC
;;;28     */
;;;29     void bsp_Init(void)
000000  b510              PUSH     {r4,lr}
;;;30     {
;;;31     	/*
;;;32     		由于ST固件库的启动文件已经执行了CPU系统时钟的初始化，所以不必再次重复配置系统时钟。
;;;33     		启动文件配置了CPU主时钟频率、内部Flash访问速度和可选的外部SRAM FSMC初始化。
;;;34     
;;;35     		系统时钟缺省配置为168MHz，如果需要更改，可以修改 system_stm32f4xx.c 文件
;;;36     	*/
;;;37     
;;;38     	bsp_InitUart(); 	/* 初始化串口 */
000002  f7fffffe          BL       bsp_InitUart
;;;39     	//bsp_InitKey();		/* 初始化按键变量（必须在 bsp_InitTimer() 之前调用） */
;;;40     	bsp_InitTimer();	/* 初始化系统滴答定时器 */
000006  f7fffffe          BL       bsp_InitTimer
;;;41     	My_RTC_Init(0);
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       My_RTC_Init
;;;42     	TIM3_Int_Init();
000010  f7fffffe          BL       TIM3_Int_Init
;;;43     	EepromDataInit();
000014  f7fffffe          BL       EepromDataInit
;;;44     
;;;45     	/* 针对不同的应用程序，添加需要的底层驱动模块初始化函数 */
;;;46     
;;;47     	//bsp_InitLed(); 		/* 初始LED指示灯端口 */
;;;48     	ADCInit();
000018  f7fffffe          BL       ADCInit
;;;49     	can_Init();
00001c  f7fffffe          BL       can_Init
;;;50     	can_NVIC_Config();
000020  f7fffffe          BL       can_NVIC_Config
;;;51     	bsp_InitLed();
000024  f7fffffe          BL       bsp_InitLed
;;;52     
;;;53     	memset(CanComData,0,0x10000);
000028  f44f3180          MOV      r1,#0x10000
00002c  4802              LDR      r0,|L2.56|
00002e  6800              LDR      r0,[r0,#0]  ; CanComData
000030  f7fffffe          BL       __aeabi_memclr4
;;;54     
;;;55     	
;;;56     }
000034  bd10              POP      {r4,pc}
;;;57     
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      CanComData

                          AREA ||i.bsp_RunPer10ms||, CODE, READONLY, ALIGN=1

                  bsp_RunPer10ms PROC
;;;66     */
;;;67     void bsp_RunPer10ms(void)
000000  4770              BX       lr
;;;68     {
;;;69     	//bsp_KeyScan();		/* 按键扫描 */
;;;70     }
;;;71     
                          ENDP


                          AREA ||i.bsp_RunPer1ms||, CODE, READONLY, ALIGN=1

                  bsp_RunPer1ms PROC
;;;80     */
;;;81     void bsp_RunPer1ms(void)
000000  4770              BX       lr
;;;82     {
;;;83     	//TOUCH_Scan();	/* 触摸扫描 */
;;;84     }
;;;85     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\bsp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_bsp_Init____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_bsp_c_bsp_Init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_bsp_Init____REVSH|
#line 144
|__asm___5_bsp_c_bsp_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
