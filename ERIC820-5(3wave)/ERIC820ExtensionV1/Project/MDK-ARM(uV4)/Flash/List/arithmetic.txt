; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\arithmetic.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\arithmetic.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\arithmetic -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX --omf_browse=.\flash\obj\arithmetic.crf ..\..\User\arithmetic\arithmetic.c]
                          THUMB

                          AREA ||i.CalRMS||, CODE, READONLY, ALIGN=2

                  CalRMS PROC
;;;24     */	
;;;25     void CalRMS(uint16_t bt)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;26     {
000004  ed2d8b06          VPUSH    {d8-d10}
000008  4604              MOV      r4,r0
;;;27     	uint16_t j;
;;;28     	int16_t bt1,Indata;	
;;;29     	float buf;
;;;30     
;;;31     	
;;;32     	bt = FIFO_Backpointer(bt, ADC_Period*ADC_N, ADCbufSize);
00000a  f44f4220          MOV      r2,#0xa000
00000e  f44f7100          MOV      r1,#0x200
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       FIFO_Backpointer
000018  4604              MOV      r4,r0
;;;33     	buf = 0;	
00001a  ed9f0a30          VLDR     s0,|L1.220|
00001e  eeb08a40          VMOV.F32 s16,s0
;;;34     	for(j=0;j<32;j++){		
000022  2500              MOVS     r5,#0
000024  e020              B        |L1.104|
                  |L1.38|
;;;35     		bt1 = FIFO_pointer(bt, ADC_N-1, ADCbufSize);
000026  f44f4220          MOV      r2,#0xa000
00002a  2101              MOVS     r1,#1
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       FIFO_pointer
000032  b207              SXTH     r7,r0
;;;36     		Indata = ADCFifo.AD_Value[bt] - ADCFifo.AD_Value[bt1];
000034  482a              LDR      r0,|L1.224|
000036  f8301014          LDRH     r1,[r0,r4,LSL #1]
00003a  f8300017          LDRH     r0,[r0,r7,LSL #1]
00003e  1a08              SUBS     r0,r1,r0
000040  b206              SXTH     r6,r0
;;;37     		buf += (Indata*Indata);		
000042  fb16f006          SMULBB   r0,r6,r6
000046  ee000a10          VMOV     s0,r0
00004a  eeb80ac0          VCVT.F32.S32 s0,s0
00004e  ee300a08          VADD.F32 s0,s0,s16
000052  eeb08a40          VMOV.F32 s16,s0
;;;38     		bt = FIFO_pointer(bt, ADC_N*8, ADCbufSize);
000056  f44f4220          MOV      r2,#0xa000
00005a  2110              MOVS     r1,#0x10
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       FIFO_pointer
000062  4604              MOV      r4,r0
000064  1c68              ADDS     r0,r5,#1              ;34
000066  b285              UXTH     r5,r0                 ;34
                  |L1.104|
000068  2d20              CMP      r5,#0x20              ;34
00006a  dbdc              BLT      |L1.38|
;;;39     	}
;;;40     	
;;;41     	buf /= 32;		
00006c  ed9f0a1d          VLDR     s0,|L1.228|
000070  eec80a00          VDIV.F32 s1,s16,s0
000074  eeb08a60          VMOV.F32 s16,s1
;;;42     	
;;;43     	buf = sqrt(buf);
000078  ee180a10          VMOV     r0,s16
00007c  f7fffffe          BL       __aeabi_f2d
000080  ec410b1a          VMOV     d10,r0,r1
000084  eeb00a4a          VMOV.F32 s0,s20
000088  eef00a6a          VMOV.F32 s1,s21
00008c  f7fffffe          BL       __hardfp_sqrt
000090  eeb09a40          VMOV.F32 s18,s0
000094  eef09a60          VMOV.F32 s19,s1
000098  ec510b19          VMOV     r0,r1,d9
00009c  f7fffffe          BL       __aeabi_d2f
0000a0  ee080a10          VMOV     s16,r0
;;;44     	buf = buf / EepromData.ratio;
0000a4  4810              LDR      r0,|L1.232|
0000a6  ed900a01          VLDR     s0,[r0,#4]
0000aa  eec80a00          VDIV.F32 s1,s16,s0
0000ae  eeb08a60          VMOV.F32 s16,s1
;;;45     	ADCFifo.RMSbuf = buf;
0000b2  480b              LDR      r0,|L1.224|
0000b4  3808              SUBS     r0,r0,#8
0000b6  ed808a01          VSTR     s16,[r0,#4]
;;;46     	if(ADCFifo.RMSbuf < (float)(0.05)){
0000ba  ed900a01          VLDR     s0,[r0,#4]
0000be  eddf0a0b          VLDR     s1,|L1.236|
0000c2  eeb40ae0          VCMPE.F32 s0,s1
0000c6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000ca  d203              BCS      |L1.212|
;;;47     		ADCFifo.RMSbuf = 0;
0000cc  ed9f0a03          VLDR     s0,|L1.220|
0000d0  ed800a01          VSTR     s0,[r0,#4]
                  |L1.212|
;;;48     	}
;;;49     	
;;;50     }//CalRMS
0000d4  ecbd8b06          VPOP     {d8-d10}
0000d8  e8bd81f0          POP      {r4-r8,pc}
;;;51     
                          ENDP

                  |L1.220|
0000dc  00000000          DCFS     0x00000000 ; 0
                  |L1.224|
                          DCD      ADCFifo+0x8
                  |L1.228|
0000e4  42000000          DCFS     0x42000000 ; 32
                  |L1.232|
                          DCD      EepromData
                  |L1.236|
0000ec  3d4ccccd          DCFS     0x3d4ccccd ; 0.05000000074505806

                          AREA ||i.CalVerify||, CODE, READONLY, ALIGN=2

                  CalVerify PROC
;;;52     
;;;53     void CalVerify(uint16_t bt)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;54     {
000004  ed2d8b06          VPUSH    {d8-d10}
000008  4604              MOV      r4,r0
;;;55     
;;;56     	uint16_t j;
;;;57     	int16_t Indata;
;;;58     	uint16_t bt1;
;;;59     	float Verifbuf;	
;;;60     	
;;;61     	bt = FIFO_Backpointer(bt, 10*ADC_Period*ADC_N, ADCbufSize);
00000a  f44f4220          MOV      r2,#0xa000
00000e  10d1              ASRS     r1,r2,#3
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       FIFO_Backpointer
000016  4604              MOV      r4,r0
;;;62     	
;;;63     	Verifbuf = 0;
000018  ed9f0a29          VLDR     s0,|L2.192|
00001c  eeb08a40          VMOV.F32 s16,s0
;;;64     	
;;;65     	for(j=0;j<ADC_Period*10;j++){		
000020  2500              MOVS     r5,#0
000022  e020              B        |L2.102|
                  |L2.36|
;;;66     		bt1 = FIFO_pointer(bt, ADC_N-1, ADCbufSize);		
000024  f44f4220          MOV      r2,#0xa000
000028  2101              MOVS     r1,#1
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       FIFO_pointer
000030  4607              MOV      r7,r0
;;;67     		Indata = ADCFifo.AD_Value[bt] - ADCFifo.AD_Value[bt1];
000032  4824              LDR      r0,|L2.196|
000034  f8301014          LDRH     r1,[r0,r4,LSL #1]
000038  f8300017          LDRH     r0,[r0,r7,LSL #1]
00003c  1a08              SUBS     r0,r1,r0
00003e  b206              SXTH     r6,r0
;;;68     		Verifbuf += (Indata*Indata);		
000040  fb16f006          SMULBB   r0,r6,r6
000044  ee000a10          VMOV     s0,r0
000048  eeb80ac0          VCVT.F32.S32 s0,s0
00004c  ee300a08          VADD.F32 s0,s0,s16
000050  eeb08a40          VMOV.F32 s16,s0
;;;69     		bt = FIFO_pointer(bt, ADC_N, ADCbufSize);
000054  f44f4220          MOV      r2,#0xa000
000058  2102              MOVS     r1,#2
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       FIFO_pointer
000060  4604              MOV      r4,r0
000062  1c68              ADDS     r0,r5,#1              ;65
000064  b285              UXTH     r5,r0                 ;65
                  |L2.102|
000066  f5b56f20          CMP      r5,#0xa00             ;65
00006a  dbdb              BLT      |L2.36|
;;;70     	}	
;;;71     	Verifbuf /= ADC_Period*10;		
00006c  ed9f0a16          VLDR     s0,|L2.200|
000070  eec80a00          VDIV.F32 s1,s16,s0
000074  eeb08a60          VMOV.F32 s16,s1
;;;72     	Verifbuf = sqrt(Verifbuf);
000078  ee180a10          VMOV     r0,s16
00007c  f7fffffe          BL       __aeabi_f2d
000080  ec410b1a          VMOV     d10,r0,r1
000084  eeb00a4a          VMOV.F32 s0,s20
000088  eef00a6a          VMOV.F32 s1,s21
00008c  f7fffffe          BL       __hardfp_sqrt
000090  eeb09a40          VMOV.F32 s18,s0
000094  eef09a60          VMOV.F32 s19,s1
000098  ec510b19          VMOV     r0,r1,d9
00009c  f7fffffe          BL       __aeabi_d2f
0000a0  ee080a10          VMOV     s16,r0
;;;73     	
;;;74     	EepromData.ratio = Verifbuf/5;	
0000a4  eeb10a04          VMOV.F32 s0,#5.00000000
0000a8  eec80a00          VDIV.F32 s1,s16,s0
0000ac  4807              LDR      r0,|L2.204|
0000ae  edc00a01          VSTR     s1,[r0,#4]
;;;75     	EepromSaveFlag = 1;
0000b2  2001              MOVS     r0,#1
0000b4  4906              LDR      r1,|L2.208|
0000b6  7008              STRB     r0,[r1,#0]
;;;76     		
;;;77     
;;;78     }//CalVerify
0000b8  ecbd8b06          VPOP     {d8-d10}
0000bc  e8bd81f0          POP      {r4-r8,pc}
;;;79     
                          ENDP

                  |L2.192|
0000c0  00000000          DCFS     0x00000000 ; 0
                  |L2.196|
                          DCD      ADCFifo+0x8
                  |L2.200|
0000c8  45200000          DCFS     0x45200000 ; 2560
                  |L2.204|
                          DCD      EepromData
                  |L2.208|
                          DCD      EepromSaveFlag

                          AREA ||i.SelCalRMS||, CODE, READONLY, ALIGN=2

                  SelCalRMS PROC
;;;89     */
;;;90     void SelCalRMS(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;91     {
000004  ed2d8b06          VPUSH    {d8-d10}
;;;92     	uint16_t i,j,len;
;;;93     	uint16_t bt,bt1;
;;;94     	int16_t Indata;
;;;95     	float buf;
;;;96     
;;;97     	static uint8_t step;
;;;98     
;;;99     	switch(step){
000008  4892              LDR      r0,|L3.596|
00000a  7800              LDRB     r0,[r0,#0]  ; step
00000c  b110              CBZ      r0,|L3.20|
00000e  2801              CMP      r0,#1
000010  d17e              BNE      |L3.272|
000012  e0ba              B        |L3.394|
                  |L3.20|
;;;100    		case 0:
;;;101    			if(CanComData->FaultFlag){
000014  4890              LDR      r0,|L3.600|
000016  6800              LDR      r0,[r0,#0]  ; CanComData
000018  f5005080          ADD      r0,r0,#0x1000
00001c  f890040e          LDRB     r0,[r0,#0x40e]
000020  2800              CMP      r0,#0
000022  d076              BEQ      |L3.274|
;;;102    				CanComData->Faultbt = FIFO_Backpointer(CanComData->Faultbt, (ADC_Period+ADC_Period/4)*ADC_N, ADCbufSize);
000024  498c              LDR      r1,|L3.600|
000026  6809              LDR      r1,[r1,#0]  ; CanComData
000028  f5015180          ADD      r1,r1,#0x1000
00002c  f8b10410          LDRH     r0,[r1,#0x410]
000030  f44f4220          MOV      r2,#0xa000
000034  1191              ASRS     r1,r2,#6
000036  f7fffffe          BL       FIFO_Backpointer
00003a  4987              LDR      r1,|L3.600|
00003c  6809              LDR      r1,[r1,#0]  ; CanComData
00003e  f5015180          ADD      r1,r1,#0x1000
000042  f8a10410          STRH     r0,[r1,#0x410]
;;;103    				//Test1Set();
;;;104    				bt = CanComData->Faultbt;
000046  4884              LDR      r0,|L3.600|
000048  6800              LDR      r0,[r0,#0]  ; CanComData
00004a  f5005080          ADD      r0,r0,#0x1000
00004e  f8b05410          LDRH     r5,[r0,#0x410]
;;;105    				for(j=0;j<ADC_Period;j++){
000052  f04f0800          MOV      r8,#0
000056  e023              B        |L3.160|
                  |L3.88|
;;;106    					bt1 = FIFO_pointer(bt, ADC_N-1, ADCbufSize);		
000058  f44f4220          MOV      r2,#0xa000
00005c  2101              MOVS     r1,#1
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       FIFO_pointer
000064  4607              MOV      r7,r0
;;;107    					Indata = ADCFifo.AD_Value[bt] - ADCFifo.AD_Value[bt1];
000066  487d              LDR      r0,|L3.604|
000068  f8301015          LDRH     r1,[r0,r5,LSL #1]
00006c  f8300017          LDRH     r0,[r0,r7,LSL #1]
000070  1a08              SUBS     r0,r1,r0
000072  fa0ff980          SXTH     r9,r0
;;;108    					buf += (Indata*Indata);					
000076  fb19f009          SMULBB   r0,r9,r9
00007a  ee000a10          VMOV     s0,r0
00007e  eeb80ac0          VCVT.F32.S32 s0,s0
000082  ee300a08          VADD.F32 s0,s0,s16
000086  eeb08a40          VMOV.F32 s16,s0
;;;109    					bt = FIFO_pointer(bt, ADC_N, ADCbufSize);
00008a  f44f4220          MOV      r2,#0xa000
00008e  2102              MOVS     r1,#2
000090  4628              MOV      r0,r5
000092  f7fffffe          BL       FIFO_pointer
000096  4605              MOV      r5,r0
000098  f1080001          ADD      r0,r8,#1              ;105
00009c  fa1ff880          UXTH     r8,r0                 ;105
                  |L3.160|
0000a0  f1b80fff          CMP      r8,#0xff              ;105
0000a4  ddd8              BLE      |L3.88|
;;;110    				}			
;;;111    				
;;;112    				
;;;113    				buf /= ADC_Period;
0000a6  ed9f0a6e          VLDR     s0,|L3.608|
0000aa  eec80a00          VDIV.F32 s1,s16,s0
0000ae  eeb08a60          VMOV.F32 s16,s1
;;;114    				buf = sqrt(buf);
0000b2  ee180a10          VMOV     r0,s16
0000b6  f7fffffe          BL       __aeabi_f2d
0000ba  ec410b1a          VMOV     d10,r0,r1
0000be  eeb00a4a          VMOV.F32 s0,s20
0000c2  eef00a6a          VMOV.F32 s1,s21
0000c6  f7fffffe          BL       __hardfp_sqrt
0000ca  eeb09a40          VMOV.F32 s18,s0
0000ce  eef09a60          VMOV.F32 s19,s1
0000d2  ec510b19          VMOV     r0,r1,d9
0000d6  f7fffffe          BL       __aeabi_d2f
0000da  ee080a10          VMOV     s16,r0
;;;115    				buf /= EepromData.ratio;				
0000de  4861              LDR      r0,|L3.612|
0000e0  ed900a01          VLDR     s0,[r0,#4]
0000e4  eec80a00          VDIV.F32 s1,s16,s0
0000e8  eeb08a60          VMOV.F32 s16,s1
;;;116    				
;;;117    				CanComData->FaultRms = buf;
0000ec  485a              LDR      r0,|L3.600|
0000ee  6800              LDR      r0,[r0,#0]  ; CanComData
0000f0  f50050a0          ADD      r0,r0,#0x1400
0000f4  ed808a05          VSTR     s16,[r0,#0x14]
;;;118    				
;;;119    				step++;
0000f8  4856              LDR      r0,|L3.596|
0000fa  7800              LDRB     r0,[r0,#0]  ; step
0000fc  1c40              ADDS     r0,r0,#1
0000fe  4955              LDR      r1,|L3.596|
000100  7008              STRB     r0,[r1,#0]
;;;120    				
;;;121    				len = 0;
000102  2400              MOVS     r4,#0
;;;122    				CanComData->Txbuf[len++] = (uint8_t)iCanComHad;
000104  22ff              MOVS     r2,#0xff
000106  4621              MOV      r1,r4
000108  1c64              ADDS     r4,r4,#1
00010a  4853              LDR      r0,|L3.600|
00010c  6800              LDR      r0,[r0,#0]  ; CanComData
00010e  e001              B        |L3.276|
                  |L3.272|
000110  e097              B        |L3.578|
                  |L3.274|
000112  e039              B        |L3.392|
                  |L3.276|
000114  5442              STRB     r2,[r0,r1]
;;;123    				CanComData->Txbuf[len++] = iCanComHad>>8;
000116  22cb              MOVS     r2,#0xcb
000118  4621              MOV      r1,r4
00011a  1c64              ADDS     r4,r4,#1
00011c  484e              LDR      r0,|L3.600|
00011e  6800              LDR      r0,[r0,#0]  ; CanComData
000120  5442              STRB     r2,[r0,r1]
;;;124    				CanComData->Txbuf[len++] = 0xE1;
000122  22e1              MOVS     r2,#0xe1
000124  4621              MOV      r1,r4
000126  1c64              ADDS     r4,r4,#1
000128  484b              LDR      r0,|L3.600|
00012a  6800              LDR      r0,[r0,#0]  ; CanComData
00012c  5442              STRB     r2,[r0,r1]
;;;125    				len++;
00012e  1c64              ADDS     r4,r4,#1
;;;126    				len++;								
000130  1c64              ADDS     r4,r4,#1
;;;127    				memcpy(CanComData->Txbuf+len,(uint8_t *)&CanComData->FaultRms,4);
000132  4849              LDR      r0,|L3.600|
000134  6800              LDR      r0,[r0,#0]  ; CanComData
000136  1901              ADDS     r1,r0,r4
000138  4847              LDR      r0,|L3.600|
00013a  6800              LDR      r0,[r0,#0]  ; CanComData
00013c  f50050a0          ADD      r0,r0,#0x1400
000140  6940              LDR      r0,[r0,#0x14]
000142  6008              STR      r0,[r1,#0]
;;;128    				len	+=	4;
000144  1d24              ADDS     r4,r4,#4
;;;129    				CanComData->Txbuf[3] = (len-5);
000146  1f60              SUBS     r0,r4,#5
000148  4943              LDR      r1,|L3.600|
00014a  6809              LDR      r1,[r1,#0]  ; CanComData
00014c  70c8              STRB     r0,[r1,#3]
;;;130    				CanComData->Txbuf[4] = (len-5)>>8;
00014e  1f60              SUBS     r0,r4,#5
000150  0a00              LSRS     r0,r0,#8
000152  4941              LDR      r1,|L3.600|
000154  6809              LDR      r1,[r1,#0]  ; CanComData
000156  7108              STRB     r0,[r1,#4]
;;;131    				bt = CRC_GetModbus16(CanComData->Txbuf, len);
000158  4621              MOV      r1,r4
00015a  483f              LDR      r0,|L3.600|
00015c  6800              LDR      r0,[r0,#0]  ; CanComData
00015e  f7fffffe          BL       CRC_GetModbus16
000162  4605              MOV      r5,r0
;;;132    				CanComData->Txbuf[len++] = bt;
000164  4621              MOV      r1,r4
000166  1c64              ADDS     r4,r4,#1
000168  483b              LDR      r0,|L3.600|
00016a  6800              LDR      r0,[r0,#0]  ; CanComData
00016c  5445              STRB     r5,[r0,r1]
;;;133    				CanComData->Txbuf[len++] = bt>>8;
00016e  122a              ASRS     r2,r5,#8
000170  4621              MOV      r1,r4
000172  1c64              ADDS     r4,r4,#1
000174  4838              LDR      r0,|L3.600|
000176  6800              LDR      r0,[r0,#0]  ; CanComData
000178  5442              STRB     r2,[r0,r1]
;;;134    				SendCanbuf(EepromData.CanID,CanComData->Txbuf,len);
00017a  493a              LDR      r1,|L3.612|
00017c  8908              LDRH     r0,[r1,#8]  ; EepromData
00017e  4622              MOV      r2,r4
000180  4935              LDR      r1,|L3.600|
000182  6809              LDR      r1,[r1,#0]  ; CanComData
000184  f7fffffe          BL       SendCanbuf
                  |L3.392|
;;;135    			}
;;;136    			break;
000188  e05f              B        |L3.586|
                  |L3.394|
;;;137    		case 1:
;;;138    			if(FIFO_length(CanComData->Faultbt, AD_pt, ADCbufSize)>=11 * ADC_Period * ADC_N){
00018a  4837              LDR      r0,|L3.616|
00018c  f7fffffe          BL       DMA_GetCurrDataCounter
000190  f5c04020          RSB      r0,r0,#0xa000
000194  fa1ffa80          UXTH     r10,r0
000198  492f              LDR      r1,|L3.600|
00019a  6809              LDR      r1,[r1,#0]  ; CanComData
00019c  f5015180          ADD      r1,r1,#0x1000
0001a0  f8b10410          LDRH     r0,[r1,#0x410]
0001a4  f44f4220          MOV      r2,#0xa000
0001a8  4651              MOV      r1,r10
0001aa  f7fffffe          BL       FIFO_length
0001ae  f5b05fb0          CMP      r0,#0x1600
0001b2  db45              BLT      |L3.576|
;;;139    				bt = FIFO_Backpointer(CanComData->Faultbt, 9 * ADC_Period * ADC_N, ADCbufSize);
0001b4  4928              LDR      r1,|L3.600|
0001b6  6809              LDR      r1,[r1,#0]  ; CanComData
0001b8  f5015180          ADD      r1,r1,#0x1000
0001bc  f8b10410          LDRH     r0,[r1,#0x410]
0001c0  f44f4220          MOV      r2,#0xa000
0001c4  f44f5190          MOV      r1,#0x1200
0001c8  f7fffffe          BL       FIFO_Backpointer
0001cc  4605              MOV      r5,r0
;;;140    				for(i=0;i<20 * ADC_Period;i++){
0001ce  2600              MOVS     r6,#0
0001d0  e01d              B        |L3.526|
                  |L3.466|
;;;141    					bt1 = FIFO_pointer(bt, ADC_N-1, ADCbufSize);
0001d2  f44f4220          MOV      r2,#0xa000
0001d6  2101              MOVS     r1,#1
0001d8  4628              MOV      r0,r5
0001da  f7fffffe          BL       FIFO_pointer
0001de  4607              MOV      r7,r0
;;;142    					CanComData->FaultWave[i] = ADCFifo.AD_Value[bt] - ADCFifo.AD_Value[bt1];
0001e0  481e              LDR      r0,|L3.604|
0001e2  f8301015          LDRH     r1,[r0,r5,LSL #1]
0001e6  f8300017          LDRH     r0,[r0,r7,LSL #1]
0001ea  1a08              SUBS     r0,r1,r0
0001ec  b200              SXTH     r0,r0
0001ee  491a              LDR      r1,|L3.600|
0001f0  6809              LDR      r1,[r1,#0]  ; CanComData
0001f2  f2414222          MOV      r2,#0x1422
0001f6  4411              ADD      r1,r1,r2
0001f8  f8210016          STRH     r0,[r1,r6,LSL #1]
;;;143    					bt = FIFO_pointer(bt, ADC_N, ADCbufSize);
0001fc  f44f4220          MOV      r2,#0xa000
000200  2102              MOVS     r1,#2
000202  4628              MOV      r0,r5
000204  f7fffffe          BL       FIFO_pointer
000208  4605              MOV      r5,r0
00020a  1c70              ADDS     r0,r6,#1              ;140
00020c  b286              UXTH     r6,r0                 ;140
                  |L3.526|
00020e  f5b65fa0          CMP      r6,#0x1400            ;140
000212  dbde              BLT      |L3.466|
;;;144    				}
;;;145    				Test1Clr();
000214  f44f7100          MOV      r1,#0x200
000218  4814              LDR      r0,|L3.620|
00021a  f7fffffe          BL       GPIO_ResetBits
;;;146    				step = 0;
00021e  2000              MOVS     r0,#0
000220  490c              LDR      r1,|L3.596|
000222  7008              STRB     r0,[r1,#0]
;;;147    				CanComData->FaultFlag = 0;
000224  2100              MOVS     r1,#0
000226  480c              LDR      r0,|L3.600|
000228  6800              LDR      r0,[r0,#0]  ; CanComData
00022a  f5005080          ADD      r0,r0,#0x1000
00022e  f880140e          STRB     r1,[r0,#0x40e]
;;;148    				CanComData->CanWaveSampleFlag = 1;
000232  2101              MOVS     r1,#1
000234  4808              LDR      r0,|L3.600|
000236  6800              LDR      r0,[r0,#0]  ; CanComData
000238  f5005080          ADD      r0,r0,#0x1000
00023c  f8801409          STRB     r1,[r0,#0x409]
                  |L3.576|
;;;149    				
;;;150    			
;;;151    			}
;;;152    			break;
000240  e003              B        |L3.586|
                  |L3.578|
;;;153    		default:
;;;154    			step = 0;
000242  2000              MOVS     r0,#0
000244  4903              LDR      r1,|L3.596|
000246  7008              STRB     r0,[r1,#0]
000248  bf00              NOP                            ;99
                  |L3.586|
00024a  bf00              NOP                            ;136
;;;155    	}
;;;156    }//SelCalRMS
00024c  ecbd8b06          VPOP     {d8-d10}
000250  e8bd87f0          POP      {r4-r10,pc}
;;;157    
                          ENDP

                  |L3.596|
                          DCD      step
                  |L3.600|
                          DCD      CanComData
                  |L3.604|
                          DCD      ADCFifo+0x8
                  |L3.608|
000260  43800000          DCFS     0x43800000 ; 256
                  |L3.612|
                          DCD      EepromData
                  |L3.616|
                          DCD      0x40026410
                  |L3.620|
                          DCD      0x40020000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  radical3
000000  3fddb3d7          DCFS     0x3fddb3d7 ; 1.7320507764816284
                  radical2
000004  3fb504f3          DCFS     0x3fb504f3 ; 1.4142135381698608

                          AREA ||.data||, DATA, ALIGN=0

                  VerifyFlag
000000  00                DCB      0x00
                  step
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\arithmetic\\arithmetic.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_arithmetic_c_radical3____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_arithmetic_c_radical3____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_arithmetic_c_radical3____REVSH|
#line 144
|__asm___12_arithmetic_c_radical3____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
