; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_led.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_led.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\arithmetic -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX --omf_browse=.\flash\obj\bsp_led.crf ..\..\User\bsp_stm32f4xx\src\bsp_led.c]
                          THUMB

                          AREA ||i.bsp_InitLed||, CODE, READONLY, ALIGN=2

                  bsp_InitLed PROC
;;;53     */
;;;54     void bsp_InitLed(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;55     {
;;;56     	GPIO_InitTypeDef GPIO_InitStructure;
;;;57     
;;;58     	/* 打开GPIO时钟 */
;;;59     	RCC_AHB1PeriphClockCmd(RCC_ALL_LED, ENABLE);
000002  2101              MOVS     r1,#1
000004  2010              MOVS     r0,#0x10
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;60     
;;;61     	/*
;;;62     		配置所有的LED指示灯GPIO为推挽输出模式
;;;63     		由于将GPIO设置为输出时，GPIO输出寄存器的值缺省是0，因此会驱动LED点亮.
;;;64     		这是我不希望的，因此在改变GPIO为输出前，先关闭LED指示灯
;;;65     	*/
;;;66     	bsp_LedOff(0);
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       bsp_LedOff
;;;67     	bsp_LedOff(1);	
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       bsp_LedOff
;;;68     
;;;69     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		/* 设为输出口 */
000016  2001              MOVS     r0,#1
000018  f88d0004          STRB     r0,[sp,#4]
;;;70     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽模式 */
00001c  2000              MOVS     r0,#0
00001e  f88d0006          STRB     r0,[sp,#6]
;;;71     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 上下拉电阻不使能 */
000022  f88d0007          STRB     r0,[sp,#7]
;;;72     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	/* IO口最大速度 */
000026  2003              MOVS     r0,#3
000028  f88d0005          STRB     r0,[sp,#5]
;;;73     
;;;74     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED1;
00002c  2004              MOVS     r0,#4
00002e  9000              STR      r0,[sp,#0]
;;;75     	GPIO_Init(GPIO_PORT_LED1, &GPIO_InitStructure);
000030  4669              MOV      r1,sp
000032  4805              LDR      r0,|L1.72|
000034  f7fffffe          BL       GPIO_Init
;;;76     
;;;77     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED2;
000038  2008              MOVS     r0,#8
00003a  9000              STR      r0,[sp,#0]
;;;78     	GPIO_Init(GPIO_PORT_LED2, &GPIO_InitStructure);
00003c  4669              MOV      r1,sp
00003e  4802              LDR      r0,|L1.72|
000040  f7fffffe          BL       GPIO_Init
;;;79     
;;;80     	
;;;81     }
000044  bd1c              POP      {r2-r4,pc}
;;;82     
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
                          DCD      0x40021000

                          AREA ||i.bsp_LedOff||, CODE, READONLY, ALIGN=2

                  bsp_LedOff PROC
;;;113    */
;;;114    void bsp_LedOff(uint8_t _no)
000000  b510              PUSH     {r4,lr}
;;;115    {
000002  4604              MOV      r4,r0
;;;116    
;;;117    
;;;118    	if (_no == 0)
000004  b924              CBNZ     r4,|L2.16|
;;;119    	{
;;;120    		GPIO_SetBits(GPIO_PORT_LED1, GPIO_PIN_LED1);		
000006  2104              MOVS     r1,#4
000008  4805              LDR      r0,|L2.32|
00000a  f7fffffe          BL       GPIO_SetBits
00000e  e005              B        |L2.28|
                  |L2.16|
;;;121    	}
;;;122    	else if (_no == 1)
000010  2c01              CMP      r4,#1
000012  d103              BNE      |L2.28|
;;;123    	{
;;;124    		GPIO_SetBits(GPIO_PORT_LED2, GPIO_PIN_LED2);		
000014  2108              MOVS     r1,#8
000016  4802              LDR      r0,|L2.32|
000018  f7fffffe          BL       GPIO_SetBits
                  |L2.28|
;;;125    	}	
;;;126    }
00001c  bd10              POP      {r4,pc}
;;;127    
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      0x40021000

                          AREA ||i.bsp_LedOn||, CODE, READONLY, ALIGN=2

                  bsp_LedOn PROC
;;;90     */
;;;91     void bsp_LedOn(uint8_t _no)
000000  b510              PUSH     {r4,lr}
;;;92     {
000002  4604              MOV      r4,r0
;;;93     
;;;94     	if (_no == 0)
000004  b924              CBNZ     r4,|L3.16|
;;;95     	{
;;;96     		GPIO_ResetBits(GPIO_PORT_LED1, GPIO_PIN_LED1);
000006  2104              MOVS     r1,#4
000008  4805              LDR      r0,|L3.32|
00000a  f7fffffe          BL       GPIO_ResetBits
00000e  e005              B        |L3.28|
                  |L3.16|
;;;97     		
;;;98     	}
;;;99     	else if (_no == 1)
000010  2c01              CMP      r4,#1
000012  d103              BNE      |L3.28|
;;;100    	{
;;;101    		GPIO_ResetBits(GPIO_PORT_LED2, GPIO_PIN_LED2);
000014  2108              MOVS     r1,#8
000016  4802              LDR      r0,|L3.32|
000018  f7fffffe          BL       GPIO_ResetBits
                  |L3.28|
;;;102    		
;;;103    	}	
;;;104    }
00001c  bd10              POP      {r4,pc}
;;;105    
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      0x40021000

                          AREA ||i.bsp_LedToggle||, CODE, READONLY, ALIGN=2

                  bsp_LedToggle PROC
;;;135    */
;;;136    void bsp_LedToggle(uint8_t _no)
000000  b510              PUSH     {r4,lr}
;;;137    {
000002  4604              MOV      r4,r0
;;;138    	if (_no == 0)
000004  b924              CBNZ     r4,|L4.16|
;;;139    	{
;;;140    		GPIO_ToggleBits(GPIO_PORT_LED1, GPIO_PIN_LED1);			
000006  2104              MOVS     r1,#4
000008  4805              LDR      r0,|L4.32|
00000a  f7fffffe          BL       GPIO_ToggleBits
00000e  e005              B        |L4.28|
                  |L4.16|
;;;141    	}
;;;142    	else if (_no == 1)
000010  2c01              CMP      r4,#1
000012  d103              BNE      |L4.28|
;;;143    	{
;;;144    		GPIO_ToggleBits(GPIO_PORT_LED2, GPIO_PIN_LED2);			
000014  2108              MOVS     r1,#8
000016  4802              LDR      r0,|L4.32|
000018  f7fffffe          BL       GPIO_ToggleBits
                  |L4.28|
;;;145    	}
;;;146    	
;;;147    }
00001c  bd10              POP      {r4,pc}
;;;148    
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      0x40021000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_led.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_led_c_ba23b041____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_led_c_ba23b041____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_led_c_ba23b041____REVSH|
#line 144
|__asm___9_bsp_led_c_ba23b041____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
