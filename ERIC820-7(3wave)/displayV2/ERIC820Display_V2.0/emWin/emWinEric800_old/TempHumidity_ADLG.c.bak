/*********************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.36                          *
*        Compiled Aug 31 2016, 10:53:09                              *
*        (c) 2016 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*/

// USER START (Optionally insert additional includes)
// USER END

#include "DIALOG.h"
#include "Emwin_eric800.h"
extern const unsigned char _aclogo2_s[17237UL + 1];


/*********************************************************************
*
*       Defines
*
**********************************************************************
*/
#define ID_FRAMEWIN_0  (GUI_ID_USER + 0x00)
#define ID_BUTTON_0  (GUI_ID_USER + 0x01)
#define ID_BUTTON_1  (GUI_ID_USER + 0x02)
#define ID_BUTTON_2  (GUI_ID_USER + 0x03)
#define ID_BUTTON_3  (GUI_ID_USER + 0x04)
#define ID_BUTTON_4  (GUI_ID_USER + 0x05)
#define ID_BUTTON_5  (GUI_ID_USER + 0x06)
#define ID_BUTTON_6  (GUI_ID_USER + 0x07)
#define ID_BUTTON_7  (GUI_ID_USER + 0x08)
#define ID_BUTTON_8  (GUI_ID_USER + 0x09)
#define ID_BUTTON_9  (GUI_ID_USER + 0x0A)
#define ID_BUTTON_10  (GUI_ID_USER + 0x0B)
#define ID_BUTTON_21  (GUI_ID_USER + 0x0C)
#define ID_TEXT_0  (GUI_ID_USER + 0x10)
#define ID_TEXT_1  (GUI_ID_USER + 0x11)
#define ID_TEXT_2  (GUI_ID_USER + 0x12)
#define ID_LISTVIEW_0     (GUI_ID_USER + 0x13)


// USER START (Optionally insert additional defines)
// USER END

/*********************************************************************
*
*       Static data
*
**********************************************************************
*/

// USER START (Optionally insert additional static data)
// USER END

/*********************************************************************
*
*       _aDialogCreate
*/
static const GUI_WIDGET_CREATE_INFO _aDialogCreate[] = {
  { FRAMEWIN_CreateIndirect, "TempHumidity_A", ID_FRAMEWIN_0, 0, 0, 800, 480, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "RealMonitor", ID_BUTTON_0, 150, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "SystemSet", ID_BUTTON_1, 280, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "AlarmList", ID_BUTTON_2, 410, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "PowerQuality", ID_BUTTON_3, 540, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Button", ID_BUTTON_4, 670, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Over Voltage Alarm", ID_BUTTON_5, 0, 70, 120, 39, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Temp&humidity Alarm", ID_BUTTON_6, 0, 110, 120, 39, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, " Ground Alarm", ID_BUTTON_7, 0, 190, 120, 39, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Resonance Alarm", ID_BUTTON_8, 0, 150, 120, 39, 0, 0x0, 0 },
	{ BUTTON_CreateIndirect, "Short Alarm", ID_BUTTON_9, 0, 230, 120, 39, 0, 0x0, 0 },
	{ BUTTON_CreateIndirect, "PTOpen Alarm", ID_BUTTON_10, 0, 270, 120, 39, 0, 0x0, 0 },
	{ BUTTON_CreateIndirect, "UnderVoltage Alarm", ID_BUTTON_21, 0, 310, 120, 39, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "2017-12-05 10:57:12.320", ID_TEXT_0, 175, 75, 154, 20, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "Cupboard A1 Over", ID_TEXT_1, 180, 200, 173, 25, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "Temperture 95 ", ID_TEXT_2, 441, 199, 151, 25, 0, 0x0, 0 },
	{ LISTVIEW_CreateIndirect, "Listview", ID_LISTVIEW_0, 160, 70, 638, 385, 0, 0x0, 0 },
  // USER START (Optionally insert additional widgets)
  // USER END
};

/*********************************************************************
*
*       Static code
*
**********************************************************************
*/
static void CheckTempHumdityAlarm(WM_MESSAGE * pMsg_A)
{
	int i ,j;
	int m;
	float Temp;
	u8 Temp_H;
	char s[10];
	char time[50];
	u8 year,month,day,hour,minute,second;
	u32 us;
	WM_HWIN hItem;
	//HEADER_Handle hHeader;
	m=0;
	hItem = WM_GetDialogItem(pMsg_A->hWin, ID_LISTVIEW_0);
	//hHeader=LISTVIEW_GetHeader(hItem);
	for(i=0;i<20;i++)
		{	
			j=0;
			
			Temp=Cupboard_P[i][j].Value.TempBusA;
			Temp=Temp/100;
			if(Temp<Setting.TempSet.MinValue||Temp>Setting.TempSet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				LISTVIEW_SetTextColor(hItem,LISTVIEW_CI_UNSEL,GUI_RED);
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);//显示序号
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"母线A相" );
				LISTVIEW_SetItemText(hItem, 3,m,"温度" );
				sprintf(s,"%6.2f",Temp);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				(void)us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
			}
			
			j=1;
			
			Temp=Cupboard_P[i][j].Value.TempBusB;
			Temp=Temp/100;
			if(Temp<Setting.TempSet.MinValue||Temp>Setting.TempSet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"母线B相" );
				LISTVIEW_SetItemText(hItem, 3,m,"温度" );
				sprintf(s,"%6.2f",Temp);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
			}
			
			j=2;
			
			Temp=Cupboard_P[i][j].Value.TempBusC;
			Temp=Temp/100;
			if(Temp<Setting.TempSet.MinValue||Temp>Setting.TempSet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"母线C相" );
				LISTVIEW_SetItemText(hItem, 3,m,"温度" );
				sprintf(s,"%6.2f",Temp);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
			}
			
			j=3;
			
			Temp=Cupboard_P[i][j].Value.TempTouchUpA;
			Temp=Temp/100;
			if(Temp<Setting.TempSet.MinValue||Temp>Setting.TempSet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"A相上触头" );
				LISTVIEW_SetItemText(hItem, 3,m,"温度" );
				sprintf(s,"%6.2f",Temp);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
			}
			j=4;
			
			Temp=Cupboard_P[i][j].Value.TempTouchUpB;
			Temp=Temp/100;
			if(Temp<Setting.TempSet.MinValue||Temp>Setting.TempSet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"B相上触头" );
				LISTVIEW_SetItemText(hItem, 3,m,"温度" );
				sprintf(s,"%6.2f",Temp);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
			}
			j=5;
			
			Temp=Cupboard_P[i][j].Value.TempTouchUpC;
			Temp=Temp/100;
			if(Temp<Setting.TempSet.MinValue||Temp>Setting.TempSet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"C相上触头" );
				LISTVIEW_SetItemText(hItem, 3,m,"温度" );
				sprintf(s,"%6.2f",Temp);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
			}
			j=6;
			
			Temp=Cupboard_P[i][j].Value.TempTouchDownA;
			Temp=Temp/100;
			if(Temp<Setting.TempSet.MinValue||Temp>Setting.TempSet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"A相下触头" );
				LISTVIEW_SetItemText(hItem, 3,m,"温度" );
				sprintf(s,"%6.2f",Temp);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
			}
			
			j=7;
			
			Temp=Cupboard_P[i][j].Value.TempTouchDownB;
			Temp=Temp/100;
			if(Temp<Setting.TempSet.MinValue||Temp>Setting.TempSet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"B相下触头" );
				LISTVIEW_SetItemText(hItem, 3,m,"温度" );
				sprintf(s,"%6.2f",Temp);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
			}
			j=8;
			
			Temp=Cupboard_P[i][j].Value.TempTouchDownC;
			Temp=Temp/100;
			if(Temp<Setting.TempSet.MinValue||Temp>Setting.TempSet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"C相下触头" );
				LISTVIEW_SetItemText(hItem, 3,m,"温度" );
				sprintf(s,"%6.2f",Temp);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
			}
			j=9;
			
			Temp=Cupboard_P[i][j].Value.TempCupboard;
			Temp=Temp/100;
			if(Temp<Setting.TempSet.MinValue||Temp>Setting.TempSet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"柜体" );
				LISTVIEW_SetItemText(hItem, 3,m,"温度" );
				sprintf(s,"%6.2f",Temp);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
			}
			j=10;
			
			Temp_H=Cupboard_P[i][j].Value.HumdityCupboard;
			if(Temp_H<Setting.HumiditySet.MinValue||Temp_H>Setting.HumiditySet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"柜体" );
				LISTVIEW_SetItemText(hItem, 3,m,"湿度" );
				sprintf(s,"%d",Temp_H);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
			}
			j=11;
			
			Temp=Cupboard_P[i][j].Value.ProtectorData.OverVoltageTA;
			Temp=Temp/100;
			if(Temp<Setting.TempSet.MinValue||Temp>Setting.TempSet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"保护器A相" );
				LISTVIEW_SetItemText(hItem, 3,m,"温度" );
				sprintf(s,"%6.2f",Temp);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
			}
			
			
			Temp=Cupboard_P[i][j].Value.ProtectorData.OverVoltageTB;
			Temp=Temp/100;
			if(Temp<Setting.TempSet.MinValue||Temp>Setting.TempSet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"保护器B相" );
				LISTVIEW_SetItemText(hItem, 3,m,"温度" );
				sprintf(s,"%6.2f",Temp);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
			}
			
			
			Temp=Cupboard_P[i][j].Value.ProtectorData.OverVoltageTC;
			Temp=Temp/100;
			if(Temp<Setting.TempSet.MinValue||Temp>Setting.TempSet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"保护器C相" );
				LISTVIEW_SetItemText(hItem, 3,m,"温度" );
				sprintf(s,"%6.2f",Temp);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
			}
			
			
			Temp_H=Cupboard_P[i][j].Value.ProtectorData.OverVoltageHA;
			if(Temp_H<Setting.HumiditySet.MinValue||Temp_H>Setting.HumiditySet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"保护器A相" );
				LISTVIEW_SetItemText(hItem, 3,m,"湿度" );
				sprintf(s,"%d",Temp_H);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
			}
			
			
			Temp_H=Cupboard_P[i][j].Value.ProtectorData.OverVoltageHB;
			if(Temp_H<Setting.HumiditySet.MinValue||Temp_H>Setting.HumiditySet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"保护器B相" );
				LISTVIEW_SetItemText(hItem, 3,m,"湿度" );
				sprintf(s,"%d",Temp_H);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
			}
			
			
			Temp_H=Cupboard_P[i][j].Value.ProtectorData.OverVoltageHC;
			if(Temp_H<Setting.HumiditySet.MinValue||Temp_H>Setting.HumiditySet.MaxValue)
			{
				LISTVIEW_AddRow(hItem, NULL);
				LISTVIEW_SetFont(hItem,&XBF_Font24);
				//LISTVIEW_SetItemTextColor(hItem,m,n,LISTVIEW_CI_UNSEL,GUI_RED);
				m++;
				sprintf(s,"%d",m+1);
				LISTVIEW_SetItemText(hItem, 0,m,s);
				sprintf(s,"A%d",i+1);
				LISTVIEW_SetItemText(hItem, 1,m,s);
				LISTVIEW_SetItemText(hItem, 2,m,"保护器C相" );
				LISTVIEW_SetItemText(hItem, 3,m,"湿度" );
				sprintf(s,"%d",Temp_H);
				LISTVIEW_SetItemText(hItem, 4,m, s);
				//======显示时间
				year=Cupboard_P[i][j].TimeStamp.year;
				month=Cupboard_P[i][j].TimeStamp.month;
				day=Cupboard_P[i][j].TimeStamp.day;
				hour=Cupboard_P[i][j].TimeStamp.hour;
				minute=Cupboard_P[i][j].TimeStamp.minute;
				second=Cupboard_P[i][j].TimeStamp.second;	
				us=Cupboard_P[i][j].TimeStamp.us;
				sprintf(time,"20%02d.%02d.%02d.%02d:%02d.%02d",year,month,day,hour,minute,second);
				LISTVIEW_SetItemText(hItem, 5,m, time);
				
				
			}
			m++;
		
		}
}
		




static void _cbButton0(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("RealMonitor", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("实时监控", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton1(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("SystemSet", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("系统设置", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton2(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("AlarmList", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("告警查询", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton3(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("PowerQuality", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("电能质量", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton4(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("About us", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("关于我们", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton5(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Over Voltage Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("过电压告警", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton6(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Temp&humidity Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("温湿度告警", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton7(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Ground Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("接地故障", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton8(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Resonance Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("系统过电压", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton9(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Resonance Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("短路故障", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton10(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Resonance Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("PT故障", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton21(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Resonance Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("低压故障", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}
// USER START (Optionally insert additional static code)
// USER END

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
  WM_HWIN hItem;
	HEADER_Handle hHeader;
	SCROLLBAR_Handle hScroll;
  int     NCode;
  int     Id;
	//char s[10];
	
    GUI_MEMDEV_Handle hMemJPEG;
    GUI_JPEG_INFO JpegInfo;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
   case WM_PAINT:
    //========bmp logo
    GUI_JPEG_GetInfo(_aclogo2_s, sizeof(_aclogo2_s) ,&JpegInfo);

    hMemJPEG = GUI_MEMDEV_CreateEx(2,2,JpegInfo.XSize,JpegInfo.YSize,GUI_MEMDEV_NOTRANS);
    //hMemJPEG = GUI_MEMDEV_CreateFixed(0,0,JpegInfo.XSize,JpegInfo.YSize,GUI_MEMDEV_HASTRANS,GUI_MEMDEV_APILIST_16,GUICC_M565 );
    GUI_MEMDEV_Select(hMemJPEG);
    GUI_JPEG_Draw(_aclogo2_s,sizeof(_aclogo2_s),0,0);
    GUI_MEMDEV_Select(0);

    GUI_MEMDEV_WriteAt(hMemJPEG,2,2);

		GUI_MEMDEV_Delete(hMemJPEG);//




      break;


  case WM_INIT_DIALOG:
    //
    // Initialization of 'TempHumidity_A'
    //
    hItem = pMsg->hWin;
    FRAMEWIN_SetTitleVis(hItem, 0);
    FRAMEWIN_SetClientColor(hItem,0x00333333);
    //
		#if 0
    // Initialization of '2017-12-05 10:57:12.320'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
    TEXT_SetTextColor(hItem, GUI_WHITE);
    //
    // Initialization of 'Cupboard A Over'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
    //TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
		TEXT_SetFont(hItem, &XBF_Font24);
    TEXT_SetTextColor(hItem,GUI_YELLOW);// GUI_MAKE_COLOR(0x0000FFFF));
	  TEXT_SetText(hItem,"柜体A1超温");
    //
    // Initialization of 'Temperture 95 '
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
    //TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
		TEXT_SetFont(hItem, &XBF_Font24);
    TEXT_SetTextColor(hItem,GUI_RED);// GUI_MAKE_COLOR(0x000000FF));
		TEXT_SetText(hItem,"温度:95℃");
		#endif
		
	//=======================Init ListView	
		hItem = WM_GetDialogItem(pMsg->hWin, ID_LISTVIEW_0);
	  hHeader=LISTVIEW_GetHeader(hItem);
		HEADER_SetFont(hHeader,&XBF_Font24);
		//LISTVIEW_SetDefaultBkColor(LISTVIEW_CI_UNSEL,GUI_RED);
		//LISTVIEW_SetDefaultFont(&GUI_Font24B_ASCII);
		//LISTVIEW_SetFont(hItem,&XBF_Font24);
		LISTVIEW_SetTextColor(hItem,LISTVIEW_CI_UNSEL,GUI_BLACK);
		
    //LISTVIEW_AddColumn(hItem, 92, "Parameter", GUI_TA_HCENTER | GUI_TA_VCENTER);
		LISTVIEW_AddColumn(hItem, 50, "序号", GUI_TA_HCENTER | GUI_TA_VCENTER);
		LISTVIEW_AddColumn(hItem, 70, "柜体", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 120, "位置", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 50, "类型", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_SetGridVis(hItem, 1);
    LISTVIEW_AddColumn(hItem, 80, "超标值", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 240, "时间", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_SetRowHeight(hItem, 35);
    LISTVIEW_SetHeaderHeight(hItem, 35);
		
		/*
		LISTVIEW_AddRow(hItem, NULL);
    LISTVIEW_AddRow(hItem, NULL);
    LISTVIEW_AddRow(hItem, NULL);
    LISTVIEW_AddRow(hItem, NULL);
		*/
		
		//LISTVIEW_SetAutoScrollV(hItem,1);//启用垂直滚动条
		hScroll=SCROLLBAR_CreateAttached(hItem, SCROLLBAR_CF_VERTICAL);
		SCROLLBAR_SetWidth(hScroll,25);
		
		CheckTempHumdityAlarm(pMsg);
		#if 0
		LISTVIEW_SetFont(hItem,&XBF_Font24);
		LISTVIEW_SetTextColor(hItem,LISTVIEW_CI_UNSEL,GUI_RED);
		sprintf(s,"A%d",1);
		LISTVIEW_SetItemText(hItem, 0,0,s);
		LISTVIEW_SetItemText(hItem, 1,0,"母线A相" );
		LISTVIEW_SetItemText(hItem, 2,0,"温度" );
		//sprintf(s,"%6.2f",);
		LISTVIEW_SetItemText(hItem, 3,0, "测试");
		#endif
		
		
		
    // USER START (Optionally insert additional code for further widget initialization)
       //增加回调函数改变BUTTON的皮肤。
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_0);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton0);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_1);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton1);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_2);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton2);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_3);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton3);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_4);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton4);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_5);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton5);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_6);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton6);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_7);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton7);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_8);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton8);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_9);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton9);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_10);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton10);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_21);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton21);
		
    // USER END
    break;
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
    NCode = pMsg->Data.v;
    switch(Id) {
    case ID_BUTTON_0: // Notifications sent by 'RealMonitor'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				GUI_EndDialog(pMsg->hWin,0);
        CreateMain();//切换到主画面
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_1: // Notifications sent by 'SystemSet'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				GUI_EndDialog(pMsg->hWin,0);
        //CreateTempHumdity_S();
				Createpassword();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_2: // Notifications sent by 'AlarmList'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_3: // Notifications sent by 'PowerQuality'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				GUI_EndDialog(pMsg->hWin,0);
        CreatePowerQuality();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_4: // Notifications sent by 'Button'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				GUI_EndDialog(pMsg->hWin,0);
        Createaboutus();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_5: // Notifications sent by 'Over Voltage Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				GUI_EndDialog(pMsg->hWin,0);
        CreateOverVoltage_A();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_6: // Notifications sent by 'Temp&humidity Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_7: // Notifications sent by ' Ground Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				GUI_EndDialog(pMsg->hWin,0);
        CreateGround_A();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
         
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_8: // Notifications sent by 'Resonance Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				GUI_EndDialog(pMsg->hWin,0);
        CreateResonance_A();//过压报警
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        

        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
		case ID_BUTTON_9: // Notifications sent by 'Resonance Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				GUI_EndDialog(pMsg->hWin,0);
        CreateShort_A();//短路故障
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        

        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;	
			
		case ID_BUTTON_10: // Notifications sent by 'Resonance Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				GUI_EndDialog(pMsg->hWin,0);
        CreatePTOpen_A();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        

        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;		
		case ID_BUTTON_21: // Notifications sent by 'Resonance Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				GUI_EndDialog(pMsg->hWin,0);
        CreateUnderVoltage_A();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        

        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;			
			
    // USER START (Optionally insert additional code for further Ids)
    // USER END
    }
    break;
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
    break;
  }
}

/*********************************************************************
*
*       Public code
*
**********************************************************************
*/
/*********************************************************************
*
*       CreateTempHumidity_A
*/
WM_HWIN CreateTempHumidity_A(void);
WM_HWIN CreateTempHumidity_A(void) {
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
  return hWin;
}

// USER START (Optionally insert additional public code)
// USER END

/*************************** End of file ****************************/
