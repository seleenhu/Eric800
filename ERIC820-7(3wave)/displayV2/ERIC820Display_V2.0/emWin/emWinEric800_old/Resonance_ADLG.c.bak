/*
**********************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.36                          *
*        Compiled Aug 31 2016, 10:53:09                              *
*        (c) 2016 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*/

// USER START (Optionally insert additional includes)
// USER END

#include "DIALOG.h"
#include "Emwin_eric800.h"
extern const unsigned char _aclogo2_s[17237UL + 1];

static GRAPH_DATA_Handle ahDataUA; // ------(1)
static GRAPH_DATA_Handle ahDataUB; // ------(2)
static GRAPH_DATA_Handle ahDataUC; // ------(3)
static GRAPH_DATA_Handle ahData3U; // ------(4)
WM_HWIN RA_hWin;
static u8 SelectWave;


/*********************************************************************
*
*       Defines
*
**********************************************************************
*/
#define ID_FRAMEWIN_0  (GUI_ID_USER + 0x00)
#define ID_BUTTON_0  (GUI_ID_USER + 0x01)
#define ID_BUTTON_1  (GUI_ID_USER + 0x02)
#define ID_BUTTON_2  (GUI_ID_USER + 0x03)
#define ID_BUTTON_3  (GUI_ID_USER + 0x04)
#define ID_BUTTON_4  (GUI_ID_USER + 0x05)
#define ID_BUTTON_5  (GUI_ID_USER + 0x06)
#define ID_BUTTON_6  (GUI_ID_USER + 0x07)
#define ID_BUTTON_7  (GUI_ID_USER + 0x08)
#define ID_BUTTON_8  (GUI_ID_USER + 0x09)
#define ID_BUTTON_9	 (GUI_ID_USER + 0x0A)
#define ID_BUTTON_10  (GUI_ID_USER + 0x0B)
#define ID_BUTTON_11	 (GUI_ID_USER + 0x0C)
#define ID_BUTTON_20	 (GUI_ID_USER + 0x0D)
#define ID_BUTTON_21	 (GUI_ID_USER + 0x0E)
#define ID_BUTTON_30	 (GUI_ID_USER + 0x0F)
#define ID_BUTTON_31	 (GUI_ID_USER + 0x20)

#if UseDefaultScale
#define ID_TEXT_0  (GUI_ID_USER + 0x10)
#define ID_TEXT_1  (GUI_ID_USER + 0x11)
#define ID_TEXT_2  (GUI_ID_USER + 0x12)
#define ID_TEXT_3  (GUI_ID_USER + 0x13)
#define ID_TEXT_4  (GUI_ID_USER + 0x14)
#define ID_TEXT_5  (GUI_ID_USER + 0x15)
#define ID_TEXT_6  (GUI_ID_USER + 0x16)
#define ID_TEXT_7  (GUI_ID_USER + 0x17)
#define ID_TEXT_8  (GUI_ID_USER + 0x18)
#define ID_TEXT_9  (GUI_ID_USER + 0x19)
#define ID_TEXT_10  (GUI_ID_USER + 0x1A)
#define ID_TEXT_11  (GUI_ID_USER + 0x1B)
#define ID_TEXT_12  (GUI_ID_USER + 0x1C)
#define ID_TEXT_13  (GUI_ID_USER + 0x1D)
#define ID_TEXT_14  (GUI_ID_USER + 0x1E)
#define ID_TEXT_15  (GUI_ID_USER + 0x1F)
#define ID_TEXT_16  (GUI_ID_USER + 0x20)
#define ID_TEXT_17  (GUI_ID_USER + 0x21)
#define ID_TEXT_18  (GUI_ID_USER + 0x22)
#define ID_TEXT_19  (GUI_ID_USER + 0x23)
#define ID_TEXT_20  (GUI_ID_USER + 0x24)
#endif

#define ID_TEXT_0  (GUI_ID_USER + 0x10)
//#define ID_TEXT_1  (GUI_ID_USER + 0x11)
#define ID_TEXT_2  (GUI_ID_USER + 0x12)
#define ID_TEXT_3  (GUI_ID_USER + 0x13)
#define ID_TEXT_4  (GUI_ID_USER + 0x14)

#define ID_TEXT_7  (GUI_ID_USER + 0x15)
#define ID_TEXT_8  (GUI_ID_USER + 0x16)

#define ID_TEXT_10  (GUI_ID_USER + 0x17)
#define ID_TEXT_11  (GUI_ID_USER + 0x18)
#define ID_TEXT_12  (GUI_ID_USER + 0x19)
#define ID_TEXT_13  (GUI_ID_USER + 0x1a)

#define ID_TEXT_20  (GUI_ID_USER + 0x1B)

#define ID_GRAPH_0  (GUI_ID_USER + 0x30)

// USER START (Optionally insert additional defines)
// USER END

/*********************************************************************
*
*       Static data
*
**********************************************************************
*/

// USER START (Optionally insert additional static data)
// USER END

/*********************************************************************
*
*       _aDialogCreate
*/
static const GUI_WIDGET_CREATE_INFO _aDialogCreate[] = {
  { FRAMEWIN_CreateIndirect, "TempHumidity_A", ID_FRAMEWIN_0, 0, 0, 800, 480, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "RealMonitor", ID_BUTTON_0, 150, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "SystemSet", ID_BUTTON_1, 280, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "AlarmList", ID_BUTTON_2, 410, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "PowerQuality", ID_BUTTON_3, 540, 0, 129, 45, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Button", ID_BUTTON_4, 670, 0, 129, 45, 0, 0x0, 0 },
	
  { BUTTON_CreateIndirect, "Over Voltage Alarm", ID_BUTTON_5, 0, 70, 120, 39, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Temp&humidity Alarm", ID_BUTTON_6, 0, 110, 120, 39, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, " Ground Alarm", ID_BUTTON_7, 680, 70, 120, 39, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Resonance Alarm", ID_BUTTON_8, 0, 150, 120, 39, 0, 0x0, 0 },
	{ BUTTON_CreateIndirect, "Short Alarm", ID_BUTTON_9, 680, 110, 120, 39, 0, 0x0, 0 },
	{ BUTTON_CreateIndirect, "PTOpen Alarm", ID_BUTTON_20, 680, 150, 120, 39, 0, 0x0, 0 },
	{ BUTTON_CreateIndirect, "PTOpen Alarm", ID_BUTTON_21, 680, 190, 120, 39, 0, 0x0, 0 },
	
	{ BUTTON_CreateIndirect, "Up", ID_BUTTON_10, 265, 440, 80, 35, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Next", ID_BUTTON_11, 465, 440, 80, 35, 0, 0x0, 0 },
	{ BUTTON_CreateIndirect, "Select", ID_BUTTON_30, 580, 440, 80, 35, 0, 0x0, 0 },
	{ BUTTON_CreateIndirect, "ProtectData", ID_BUTTON_31, 335, 120, 80, 35, 0, 0x0, 0 },
	
	{ GRAPH_CreateIndirect, "Graph", ID_GRAPH_0, 20, 240, 780, 180, 0, 0x0, 0 },
	#if UseDefaultScale
	{ TEXT_CreateIndirect, "", ID_TEXT_0, 221, 60, 150, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_1, 221, 60+40, 100, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_2, 348, 60+40, 91, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_3, 472, 60+40, 103, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_4, 155, 93+40, 80, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_5, 155, 137+40, 80, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_6, 155, 182+40, 80, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_7, 155, 225+40, 80, 25, 0, 0x64, 0 },
	
	{ TEXT_CreateIndirect, "", ID_TEXT_8, 221, 93+40, 82, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_9, 221, 137+40, 82, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_10, 221, 182+40, 82, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_11, 221, 225+40, 82, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_12, 348, 93+40, 82, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_13, 348, 137+40, 82, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_14, 348, 182+40, 82, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_15, 348, 225+40, 82, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_16, 472, 93+40, 82, 25, 0,  0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_17, 472, 137+40, 82, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_18, 472, 182+40, 82, 25, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_19, 472, 225+40, 82, 25, 0, 0x64, 0 },
	
	{ TEXT_CreateIndirect, "", ID_TEXT_20, 380, 60, 400, 25, 0, 0x64, 0 },
	#endif
	
	{ TEXT_CreateIndirect, "", ID_TEXT_0, 175, 75, 250, 25, 0, 0x0, 0 },
  //{ TEXT_CreateIndirect, "", ID_TEXT_1, 175, 120, 147, 25, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_2, 130, 160, 150, 20, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_3, 280, 160, 150, 20, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_4, 430, 160, 150, 20, 0, 0x0, 0 },
	
	{ TEXT_CreateIndirect, "", ID_TEXT_7, 425, 75, 300, 25, 0, 0x0, 0 },
	{ TEXT_CreateIndirect, "", ID_TEXT_8, 425, 120, 300, 25, 0, 0x0, 0 },
	
	{ TEXT_CreateIndirect, "", ID_TEXT_10, 60, 210, 150, 20, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_11, 210, 210, 150, 20, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "", ID_TEXT_12, 360, 210, 150, 20, 0, 0x0, 0 },
	{ TEXT_CreateIndirect, "", ID_TEXT_13, 510, 210, 150, 20, 0, 0x0, 0 },
	{ TEXT_CreateIndirect, "", ID_TEXT_20, 2, 210, 50, 25, 0, 0x0, 0 },
	

	
	
	
  // USER START (Optionally insert additional widgets)
  // USER END
};

/*********************************************************************
*
*       Static code
*
**********************************************************************
*/
static void Clear_Graph(void)
{
	GRAPH_DATA_YT_Clear(ahDataUA);
	GRAPH_DATA_YT_Clear(ahDataUB);
	GRAPH_DATA_YT_Clear(ahDataUC); 	 
	GRAPH_DATA_YT_Clear(ahData3U); 	 
}

static void _cbButton0(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("RealMonitor", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("实时监控", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton1(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}
/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("SystemSet", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("系统设置", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton2(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("AlarmList", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("告警查询", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton3(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("PowerQuality", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("电能质量", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton4(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("About us", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font32);
			GUI_DispStringInRect("关于我们", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton5(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Over Voltage Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("过电压告警", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton6(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Temp&humidity Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("温湿度告警", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton7(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Ground Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("接地故障", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton8(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Resonance Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("系统过电压", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton9(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Resonance Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("短路故障", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton20(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Resonance Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("PT故障", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}

static void _cbButton21(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x00959595);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x00959595);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font16_ASCII);
			GUI_DispStringInRect("Resonance Alarm", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("低压故障", &Rect, GUI_TA_LEFT | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}


// USER START (Optionally insert additional static code)
// USER END

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
  WM_HWIN hItem;
  int     NCode;
  int     Id;
	int i,n;
	char s[20];
	int16_t Wave[8];
	float Sort_D[4];
	static float Scale;
	float VoltageTemp;
	float Voltage;
	u8 year;
	u8 month;
	u8 day;
	u8 hour;
	u8 minute;
	u8 second;
	u8 us;
	
    GUI_MEMDEV_Handle hMemJPEG;
    GUI_JPEG_INFO JpegInfo;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
	case WM_DisplayWave:
			
		// ReadSDAlarmVALenght();
		//hWinOld= WM_SelectWindow(WM_GetClientWindow(pMsg->hWin));	
		 if(SDInstantaneousVoltageFault_sum<=0)
		 {
			hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
			TEXT_SetTextColor(hItem, GUI_GREEN);
		  TEXT_SetFont(hItem,&XBF_Font24 );  
		  TEXT_SetText(hItem,"没有系统过电压告警");  
			 
			hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
			TEXT_SetText(hItem,"");
			
			hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_3);
			TEXT_SetText(hItem,"");	
			 
			hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
			TEXT_SetText(hItem,""); 
			 
		 }
		 else
		 {	 
		 //ReadSDAlarmVAData(AlarmVaCount);
		 
		 
		 
		 //
    // Initialization of '2017-12-05 10:57:12.320'
    //
		
		
				
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x00000000));
		#ifdef Use_AllData 
		year=SDSuddentAlarmData->Tim.year;
		month=SDSuddentAlarmData->Tim.month;
		day=SDSuddentAlarmData->Tim.day;
		hour=SDSuddentAlarmData->Tim.hour;
		minute=SDSuddentAlarmData->Tim.minute;
		second=SDSuddentAlarmData->Tim.second;
		us=SDSuddentAlarmData->Tim.us;			 
    us=us/1000;			 
		#else	 
		year=*(u8 *)(SDAlarm_SDRAM);
		month=*(u8 *)(SDAlarm_SDRAM+1);
		day=*(u8 *)(SDAlarm_SDRAM+2);
		hour=*(u8 *)(SDAlarm_SDRAM+3);
		minute=*(u8 *)(SDAlarm_SDRAM+4);
		second=*(u8 *)(SDAlarm_SDRAM+5);
		us=*(u8 *)(SDAlarm_SDRAM+6);
		us+=*(u8 *)(SDAlarm_SDRAM+7)<<8;
    us+=*(u8 *)(SDAlarm_SDRAM+8)<<16;
		us+=*(u8 *)(SDAlarm_SDRAM+9)<<24;	 
		us=us/1000;	
		#endif
		//sprintf(s,"20%02d-%02d-%02d %02d:%02d:%02d.%03d",year,month,day,hour,minute,second,us);  
		sprintf(s,"20%02d-%02d-%02d %02d:%02d:%02d",year,month,day,hour,minute,second);  
    TEXT_SetTextColor(hItem, GUI_WHITE);
		TEXT_SetFont(hItem, GUI_FONT_20_ASCII);  
		TEXT_SetText(hItem,s); 
    //
    // Initialization of 'A Ground '
    //
	
    //
    // Initialization of 'Ua=10.00          KV'
    //
		
		#if 0
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
		//VoltageTemp=SystemAlarm->GroundAlarm.UaValue;
		
		Voltage=*(u8 *)(SDAlarm_SDRAM+10);
		Voltage+=*(u8 *)(SDAlarm_SDRAM+11)<<8;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+12)<<16;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+13)<<24;
		VoltageTemp=Voltage/100;
		
		VoltageTemp*=Setting.RatioStruct.RatioPT;
		VoltageTemp=VoltageTemp/1000;
		sprintf(s,"17HZ=%6.2fKV",VoltageTemp);
    TEXT_SetTextColor(hItem, GUI_YELLOW);
		TEXT_SetText(hItem,s);
    //
    // Initialization of 'Ub=10.00         KV'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_3);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FF00));
    TEXT_SetTextColor(hItem, GUI_GREEN);
		//VoltageTemp=SystemAlarm->GroundAlarm.UbValue;
		Voltage=*(u8 *)(SDAlarm_SDRAM+14);
		Voltage+=*(u8 *)(SDAlarm_SDRAM+15)<<8;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+16)<<16;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+17)<<24;
		VoltageTemp=Voltage/100;
		VoltageTemp*=Setting.RatioStruct.RatioPT;
		VoltageTemp=VoltageTemp/1000;
		sprintf(s,"25HZ=%6.2fKV",VoltageTemp);
		TEXT_SetText(hItem,s);
    //
    // Initialization of 'Uc=10.00         KV'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x000000FF));
    TEXT_SetTextColor(hItem, GUI_RED);
		//VoltageTemp=SystemAlarm->GroundAlarm.UcValue;
		Voltage=*(u8 *)(SDAlarm_SDRAM+18);
		Voltage+=*(u8 *)(SDAlarm_SDRAM+19)<<8;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+20)<<16;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+21)<<24;
		VoltageTemp=Voltage/100;
		VoltageTemp*=Setting.RatioStruct.RatioPT;
		VoltageTemp=VoltageTemp/1000;
		sprintf(s,"150HZ=%6.2fKV",VoltageTemp);
		TEXT_SetText(hItem,s);
		
		#endif
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_7);
		TEXT_SetTextColor(hItem, GUI_WHITE); 
		TEXT_SetFont(hItem, &XBF_Font24);
		sprintf(s,"全部故障:%d",SDInstantaneousVoltageFault_sum);
		TEXT_SetText(hItem,s);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_8);
		TEXT_SetTextColor(hItem, GUI_WHITE); 
		TEXT_SetFont(hItem, &XBF_Font24);
		sprintf(s,"当前故障:%d",SDInstantaneousVoltageFault_sum-SVA_WavePosition);
		TEXT_SetText(hItem,s);
		
		
		
	
		
    //
    // Initialization of 'Ua=10.00          KV'
    //
		if(SelectWave<2)
		{	
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_20);	
		TEXT_SetFont(hItem,GUI_FONT_24B_ASCII);
		TEXT_SetTextColor(hItem, GUI_YELLOW);
		TEXT_SetText(hItem,"KV");	
			
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_10);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
		//VoltageTemp=SystemAlarm->GroundAlarm.UaValue;
		#ifdef Use_AllData 
		Voltage=SDSuddentAlarmData->RMSValue[0][1];
		VoltageTemp=Voltage;	
		#else	
		Voltage=*(u8 *)(SDAlarm_SDRAM+22);
		Voltage+=*(u8 *)(SDAlarm_SDRAM+23)<<8;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+24)<<16;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+25)<<24;
		VoltageTemp=Voltage/100;
		#endif	
		Sort_D[0]=VoltageTemp;
		VoltageTemp*=Setting.RatioStruct.RatioPT;
		VoltageTemp=VoltageTemp/1000;
		sprintf(s,"Ua=%6.2fKV",VoltageTemp);
    TEXT_SetTextColor(hItem, GUI_YELLOW);
		TEXT_SetText(hItem,s);
    //
    // Initialization of 'Ub=10.00         KV'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_11);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FF00));
    TEXT_SetTextColor(hItem, GUI_GREEN);
		//VoltageTemp=SystemAlarm->GroundAlarm.UbValue;
		#ifdef Use_AllData 
		Voltage=SDSuddentAlarmData->RMSValue[1][1];
		VoltageTemp=Voltage;
		#else	
		Voltage=*(u8 *)(SDAlarm_SDRAM+26);
		Voltage+=*(u8 *)(SDAlarm_SDRAM+27)<<8;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+28)<<16;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+29)<<24;
		VoltageTemp=Voltage/100;
		#endif
		
		Sort_D[1]=VoltageTemp;
		VoltageTemp*=Setting.RatioStruct.RatioPT;
		VoltageTemp=VoltageTemp/1000;
		sprintf(s,"Ub=%6.2fKV",VoltageTemp);
		TEXT_SetText(hItem,s);
    //
    // Initialization of 'Uc=10.00         KV'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_12);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x000000FF));
    TEXT_SetTextColor(hItem, GUI_RED);
		//VoltageTemp=SystemAlarm->GroundAlarm.UcValue;
		#ifdef Use_AllData 
		Voltage=SDSuddentAlarmData->RMSValue[2][1];
		VoltageTemp=Voltage;
		#else	
		Voltage=*(u8 *)(SDAlarm_SDRAM+30);
		Voltage+=*(u8 *)(SDAlarm_SDRAM+31)<<8;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+32)<<16;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+33)<<24;
		VoltageTemp=Voltage/100;
		#endif
		
		Sort_D[2]=VoltageTemp;
		VoltageTemp*=Setting.RatioStruct.RatioPT;
		VoltageTemp=VoltageTemp/1000;
		sprintf(s,"Uc=%6.2fKV",VoltageTemp);
		TEXT_SetText(hItem,s);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_13);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x000000FF));
    TEXT_SetTextColor(hItem, GUI_WHITE);
		//VoltageTemp=SystemAlarm->GroundAlarm.UcValue;
		#ifdef Use_AllData 
		Voltage=SDSuddentAlarmData->RMSValue[3][1];
		VoltageTemp=Voltage;
		#else	
		Voltage=*(u8 *)(SDAlarm_SDRAM+34);
		Voltage+=*(u8 *)(SDAlarm_SDRAM+35)<<8;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+36)<<16;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+37)<<24;
		VoltageTemp=Voltage/100;
		#endif
		Sort_D[3]=VoltageTemp;
		VoltageTemp*=Setting.RatioStruct.RatioPT;
		VoltageTemp=VoltageTemp/1000;
		sprintf(s,"3U0=%6.2fKV",VoltageTemp);
		TEXT_SetText(hItem,s);
	}
		else
 {
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_20);	
		TEXT_SetFont(hItem,GUI_FONT_24B_ASCII);
		TEXT_SetTextColor(hItem, GUI_YELLOW);
		TEXT_SetText(hItem,"A");
	 
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_10);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
		//VoltageTemp=SystemAlarm->GroundAlarm.UaValue;
	  #ifdef Use_AllData 
		Voltage=SDSuddentAlarmData->RMSValue[4][1];
		VoltageTemp=Voltage;
		#else
		Voltage=*(u8 *)(SDAlarm_SDRAM+38);
		Voltage+=*(u8 *)(SDAlarm_SDRAM+39)<<8;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+40)<<16;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+41)<<24;
		VoltageTemp=Voltage/100;
	  #endif
		Sort_D[0]=VoltageTemp;
		VoltageTemp*=Setting.RatioStruct.RatioCT;
		//VoltageTemp=VoltageTemp/1000;
		sprintf(s,"Ia=%6.2fA",VoltageTemp);
    TEXT_SetTextColor(hItem, GUI_YELLOW);
		TEXT_SetText(hItem,s);
    //
    // Initialization of 'Ub=10.00         KV'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_11);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FF00));
    TEXT_SetTextColor(hItem, GUI_GREEN);
		//VoltageTemp=SystemAlarm->GroundAlarm.UbValue;
		#ifdef Use_AllData 
		Voltage=SDSuddentAlarmData->RMSValue[5][1];
		VoltageTemp=Voltage;
		#else
		Voltage=*(u8 *)(SDAlarm_SDRAM+42);
		Voltage+=*(u8 *)(SDAlarm_SDRAM+43)<<8;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+44)<<16;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+45)<<24;
		VoltageTemp=Voltage/100;
		#endif
		Sort_D[1]=VoltageTemp;
		VoltageTemp*=Setting.RatioStruct.RatioCT;
		//VoltageTemp=VoltageTemp/1000;
		sprintf(s,"Ib=%6.2fA",VoltageTemp);
		TEXT_SetText(hItem,s);
    //
    // Initialization of 'Uc=10.00         KV'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_12);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x000000FF));
    TEXT_SetTextColor(hItem, GUI_RED);
		//VoltageTemp=SystemAlarm->GroundAlarm.UcValue;
		#ifdef Use_AllData 
		Voltage=SDSuddentAlarmData->RMSValue[6][1];
		VoltageTemp=Voltage;
		#else
		Voltage=*(u8 *)(SDAlarm_SDRAM+46);
		Voltage+=*(u8 *)(SDAlarm_SDRAM+47)<<8;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+48)<<16;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+49)<<24;
		VoltageTemp=Voltage/100;
		#endif
		Sort_D[2]=VoltageTemp;
		VoltageTemp*=Setting.RatioStruct.RatioCT;
		//VoltageTemp=VoltageTemp/1000;
		sprintf(s,"Ic=%6.2fA",VoltageTemp);
		TEXT_SetText(hItem,s);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_13);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x000000FF));
    TEXT_SetTextColor(hItem, GUI_WHITE);
		//VoltageTemp=SystemAlarm->GroundAlarm.UcValue;
		#ifdef Use_AllData 
		Voltage=SDSuddentAlarmData->RMSValue[3][1];
		VoltageTemp=Voltage;
		#else
		Voltage=*(u8 *)(SDAlarm_SDRAM+50);
		Voltage+=*(u8 *)(SDAlarm_SDRAM+51)<<8;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+52)<<16;
		Voltage+=*(u8 *)(SDAlarm_SDRAM+53)<<24;
		VoltageTemp=Voltage/100;
		#endif
		Sort_D[3]=VoltageTemp;
		VoltageTemp*=Setting.RatioStruct.RatioCT;
		//VoltageTemp=VoltageTemp/1000;
		sprintf(s,"3I0=%6.2fA",VoltageTemp);
		TEXT_SetText(hItem,s);
}
 
		switch(SelectWave)
		{
		case 0:
    
		
		
		GRAPH_DATA_YT_Clear(ahDataUA);
		GRAPH_DATA_YT_Clear(ahDataUB);
		GRAPH_DATA_YT_Clear(ahDataUC);
		GRAPH_DATA_YT_Clear(ahData3U);

		
		
		Scale=sort(Sort_D,3)/(50/1.42);
			 
		for(i=6;i<18;i++)//中心点在第10周期 前4后8
			{
				//for(n=0;n<256;n++)
				n=0;
				
				while(1)
				{
					#ifdef Use_AllData 
					Wave[0]=*(u16 *)(&(SDSuddentAlarmData->Wave[0][0])+i*256+n);
					Wave[1]=*(u16 *)(&(SDSuddentAlarmData->Wave[1][0])+i*256+n);
					Wave[2]=*(u16 *)(&(SDSuddentAlarmData->Wave[2][0])+i*256+n);
					#else
					Wave[0]=*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+2*n);
					Wave[0]+=(*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+2*n+1))<<8;
					
					Wave[1]=*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+10240+2*n);
					Wave[1]+=(*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+10240+2*n+1))<<8;
					
					Wave[2]=*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+20480+2*n);
					Wave[2]+=(*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+20480+2*n+1))<<8;
					#endif
					
					
					
					GRAPH_DATA_YT_AddValue(ahDataUA,Wave[0]/(Scale*ADCFifo.fftratio[0])+90);
				
					GRAPH_DATA_YT_AddValue(ahDataUB,Wave[1]/(Scale*ADCFifo.fftratio[1])+90);
				
					GRAPH_DATA_YT_AddValue(ahDataUC,Wave[2]/(Scale*ADCFifo.fftratio[2])+90);
					n+=4;
					if(n>=256)
						break;
					
					
			  }	
		 	 
		  }
			break;
		case 1:	//display 3U0
		
		
		GRAPH_DATA_YT_Clear(ahDataUA);
		GRAPH_DATA_YT_Clear(ahDataUB);
		GRAPH_DATA_YT_Clear(ahDataUC);
		GRAPH_DATA_YT_Clear(ahData3U);
		
		Scale=Sort_D[3]/(50/1.42);
		
		for(i=6;i<18;i++)//中心点在第10周期 前4后8
			{
				//for(n=0;n<256;n++)
				n=0;
				
				while(1)
				{
					#ifdef Use_AllData 
					Wave[3]=*(u16 *)(&(SDSuddentAlarmData->Wave[3][0])+i*256+n);
					#else
					Wave[3]=*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+10240*3+2*n);
					Wave[3]+=(*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+10240*3+2*n+1))<<8;
					#endif					
					GRAPH_DATA_YT_AddValue(ahData3U,Wave[3]/(Scale*ADCFifo.fftratio[3])+90);
				
					
					n+=4;
					if(n>=256)
						break;
					
			  }	
			}
		  
			break;
		case 2://display IaIbIc
			
		
		
		
		GRAPH_DATA_YT_Clear(ahDataUA);
		GRAPH_DATA_YT_Clear(ahDataUB);
		GRAPH_DATA_YT_Clear(ahDataUC);
		GRAPH_DATA_YT_Clear(ahData3U);

		
		
		Scale=sort(Sort_D,3)/(50/2);
			 
		for(i=6;i<18;i++)//中心点在第10周期 前4后8
			{
				//for(n=0;n<256;n++)
				n=0;
				
				while(1)
				{
					#ifdef Use_AllData 
					Wave[4]=*(u16 *)(&(SDSuddentAlarmData->Wave[4][0])+i*256+n);
					Wave[5]=*(u16 *)(&(SDSuddentAlarmData->Wave[5][0])+i*256+n);
					Wave[6]=*(u16 *)(&(SDSuddentAlarmData->Wave[6][0])+i*256+n);
					#else
					Wave[4]=*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+10240*4+2*n);
					Wave[4]+=(*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+10240*4+2*n+1))<<8;
					
					Wave[5]=*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+10240*5+2*n);
					Wave[5]+=(*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+10240*5+2*n+1))<<8;
					
					Wave[6]=*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+10240*6+2*n);
					Wave[6]+=(*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+10240*6+2*n+1))<<8;
					#endif
					
					
					GRAPH_DATA_YT_AddValue(ahDataUA,Wave[4]/(Scale*ADCFifo.fftratio[4])+90);
				
					GRAPH_DATA_YT_AddValue(ahDataUB,Wave[5]/(Scale*ADCFifo.fftratio[5])+90);
				
					GRAPH_DATA_YT_AddValue(ahDataUC,Wave[6]/(Scale*ADCFifo.fftratio[6])+90);
					n+=4;
					if(n>=256)
						break;
					
					
			  }	
		 	 
		  }
			
			break;
		case 3:
		
		
		GRAPH_DATA_YT_Clear(ahDataUA);
		GRAPH_DATA_YT_Clear(ahDataUB);
		GRAPH_DATA_YT_Clear(ahDataUC);
		GRAPH_DATA_YT_Clear(ahData3U);
		
		
		Scale=Sort_D[3]/(50/2);
		
		for(i=6;i<18;i++)//中心点在第10周期 前4后8
			{
				//for(n=0;n<256;n++)
				n=0;
				
				while(1)
				{
					#ifdef Use_AllData 
					Wave[7]=*(u16 *)(&(SDSuddentAlarmData->Wave[7][0])+i*256+n);
					#else
					Wave[7]=*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+10240*7+2*n);
					Wave[7]+=(*(u8 *)(SDAlarm_SDRAM+R_VoltageDataOffset+i*512+10240*7+2*n+1))<<8;
					#endif					
					GRAPH_DATA_YT_AddValue(ahData3U,Wave[7]/(Scale*ADCFifo.fftratio[7])+90);
				
					
					n+=4;
					if(n>=256)
						break;
					
			  }	
			}
		
		break;//display 3I0
		default:
			break;
			
		}

		
		
		
	}
		
   break;	
		
		
   case WM_PAINT:
    //========bmp logo
    GUI_JPEG_GetInfo(_aclogo2_s, sizeof(_aclogo2_s) ,&JpegInfo);

    hMemJPEG = GUI_MEMDEV_CreateEx(2,2,JpegInfo.XSize,JpegInfo.YSize,GUI_MEMDEV_NOTRANS);
    //hMemJPEG = GUI_MEMDEV_CreateFixed(0,0,JpegInfo.XSize,JpegInfo.YSize,GUI_MEMDEV_HASTRANS,GUI_MEMDEV_APILIST_16,GUICC_M565 );
    GUI_MEMDEV_Select(hMemJPEG);
    GUI_JPEG_Draw(_aclogo2_s,sizeof(_aclogo2_s),0,0);
    GUI_MEMDEV_Select(0);

    GUI_MEMDEV_WriteAt(hMemJPEG,2,2);
	 
		GUI_MEMDEV_Delete(hMemJPEG);//


			//=======标Y轴刻度
		GUI_SetColor(GUI_YELLOW);
		GUI_SetFont(GUI_FONT_24B_ASCII);
		GUI_DispStringAt("KV",2,210);
		GUI_SetFont(GUI_FONT_16B_ASCII);
	 #if 0
		switch(Setting.VoltageSet.MaxRatedValue)
		{
			case 6000:
				
				GUI_DispStringAt("8",0,230);
				GUI_DispStringAt("0",0,320);
				GUI_DispStringAt("-8",0,410);
			
				break;
			case 10000:
				GUI_DispStringAt("12",0,230);
				GUI_DispStringAt("0",0,320);
				GUI_DispStringAt("-12",0,410);
				break;
			case 20000:
				GUI_DispStringAt("24",0,230);
				GUI_DispStringAt("0",0,320);
				GUI_DispStringAt("-24",0,410);
				break;
			case 35000:
				GUI_DispStringAt("42",0,230);
				GUI_DispStringAt("0",0,320);
				GUI_DispStringAt("-42",0,410);
				break;
			case 66000:
				GUI_DispStringAt("80",0,230);
				GUI_DispStringAt("0",0,320);
				GUI_DispStringAt("-80",0,410);
				break;
			default:
				GUI_DispStringAt("12",0,230);
				GUI_DispStringAt("0",0,320);
				GUI_DispStringAt("-12",0,410);
				break;
		}
		#endif
		//=======标X轴刻度
				GUI_DispStringAt("-80ms",20,425);
				GUI_DispStringAt("-40ms",276-128,425);
				GUI_DispStringAt("0",276,425);
				GUI_DispStringAt("40ms",276+128,425);
				GUI_DispStringAt("80ms",276+256,425);
				GUI_DispStringAt("120ms",276+384,425);



      break;


  case WM_INIT_DIALOG:
    //
    // Initialization of 'TempHumidity_A'
    //
    hItem = pMsg->hWin;
    FRAMEWIN_SetTitleVis(hItem, 0);
    FRAMEWIN_SetClientColor(hItem,0x00333333);
    //
    // Initialization of '2017-12-05 10:57:12.320'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
		TEXT_SetFont(hItem,GUI_FONT_20B_ASCII );
    TEXT_SetTextColor(hItem, GUI_WHITE);
    //
	
		hItem = WM_GetDialogItem(pMsg->hWin, ID_GRAPH_0);
    GRAPH_SetBorder(hItem, 2, 0, 0, 0);
    GRAPH_SetColor(hItem,0x00333333,GRAPH_CI_BK);
    GRAPH_SetColor(hItem,0x000455ea,GRAPH_CI_BORDER);
	
		GRAPH_SetGridVis(hItem,1);
    GRAPH_SetGridDistX(hItem,20);//设X栅格 为20
    GRAPH_SetGridDistY(hItem,20);//设Y栅格
		#ifdef UseDefaultScale
     hScale = GRAPH_SCALE_Create(165,GUI_TS_NORMAL,GRAPH_SCALE_CF_HORIZONTAL,64);//产生X轴坐标小工具
    //hItem = GRAPH_SCALE_Create(20,GUI_TS_NORMAL,GRAPH_SCALE_CF_VERTICAL,10);
    GRAPH_AttachScale(hItem,hScale);//添加X坐标刻度
    GRAPH_SCALE_SetFactor(hScale,1);//比例因子
    GRAPH_SCALE_SetTextColor(hScale,GUI_RED);
		GRAPH_SCALE_SetFont(hScale,GUI_FONT_16B_1);

   // hScale = GRAPH_SCALE_Create(0,GUI_TS_NORMAL,GRAPH_SCALE_CF_VERTICAL,20);//产生Y轴坐标小工具
   // hScale = GRAPH_SCALE_Create(20,GUI_TA_CENTER,GRAPH_SCALE_CF_VERTICAL,20);//产生Y轴坐标小工具
    hScale = GRAPH_SCALE_Create(0,GUI_TS_NORMAL,GRAPH_SCALE_CF_VERTICAL,40);
    GRAPH_SCALE_SetOff(hScale,90);//产生负坐标
    GRAPH_AttachScale(hItem,hScale);//添加Y坐标刻度
    GRAPH_SCALE_SetFactor(hScale,0.15);//比例因子
    GRAPH_SCALE_SetTextColor(hScale,GUI_YELLOW);
		GRAPH_SCALE_SetFont(hScale,GUI_FONT_16B_1);
		#endif
//==================================================================

		/*创建数据对象 ********************** */
     ahDataUA = GRAPH_DATA_YT_Create(GUI_YELLOW,780,0,0);
     /* 数据对象添加到图形控件*/
     GRAPH_AttachData(hItem,ahDataUA);
		 GRAPH_DATA_YT_SetAlign(ahDataUA,GRAPH_ALIGN_LEFT);//向左对齐
		 
		 /*创建数据对象 ********************** */
     ahDataUB = GRAPH_DATA_YT_Create(GUI_GREEN,780,0,0);
     /* 数据对象添加到图形控件*/
     GRAPH_AttachData(hItem,ahDataUB);
		 GRAPH_DATA_YT_SetAlign(ahDataUB,GRAPH_ALIGN_LEFT);//向左对齐
		 
		 /*创建数据对象 ********************** */
     ahDataUC = GRAPH_DATA_YT_Create(GUI_RED,780,0,0);
     /* 数据对象添加到图形控件*/
     GRAPH_AttachData(hItem,ahDataUC);
		 GRAPH_DATA_YT_SetAlign(ahDataUC,GRAPH_ALIGN_LEFT);//向左对齐
		 
		 /*创建数据对象 ********************** */
     ahData3U = GRAPH_DATA_YT_Create(GUI_RED,780,0,0);
     /* 数据对象添加到图形控件*/
     GRAPH_AttachData(hItem,ahData3U);
		 GRAPH_DATA_YT_SetAlign(ahData3U,GRAPH_ALIGN_LEFT);//向左对齐
		 
		 StartReadSD_SVA_Flag=1;
		 SVA_WavePosition=0;
		 SelectWave=0;
		 
    // Initialization of 'Cupboard A Over'
    //
		#if USEOld_ResonanceA
		if(SystemAlarm->GridAlarm.DislayFlag&0x04)
		{	
		SystemAlarm->GridAlarm.DislayFlag&=0xFB;//Clear Flag
			
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
    //TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
		TEXT_SetFont(hItem, &XBF_Font24);
    TEXT_SetTextColor(hItem,GUI_RED);// 
		TEXT_SetText(hItem,"产生谐振告警");
		
		//======display time	
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_20);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
		TEXT_SetTextColor(hItem,GUI_WHITE);
		
		year=SystemAlarm->GridAlarm.Tim.year;
		month=SystemAlarm->GridAlarm.Tim.month;
		day=SystemAlarm->GridAlarm.Tim.day;
		hour=SystemAlarm->GridAlarm.Tim.hour;
		minute=SystemAlarm->GridAlarm.Tim.minute;
		second=SystemAlarm->GridAlarm.Tim.second;
		us=SystemAlarm->GridAlarm.Tim.us;
			
		sprintf(s,"20%d-%d-%d %d:%d:%d.%d",year,month,day,hour,minute,second,us); 	
		TEXT_SetText(hItem, s);		
		//========================	
		 // Initialization of 'Text'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
    TEXT_SetText(hItem, "Ua(V)");
    TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
		TEXT_SetTextColor(hItem,GUI_YELLOW);
    //
    // Initialization of 'Text'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
    TEXT_SetText(hItem, "Ub(V)");
    TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
		TEXT_SetTextColor(hItem,GUI_GREEN);
    //
    // Initialization of 'Text'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_3);
    TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
    TEXT_SetText(hItem, "Uc(V)");
		TEXT_SetTextColor(hItem,GUI_RED);
    //
    // Initialization of 'Text'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
		TEXT_SetFont(hItem,&XBF_Font24);
    TEXT_SetText(hItem, "5次");
		TEXT_SetTextColor(hItem,GUI_WHITE);
    
    //
    // Initialization of 'Text'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_5);
		TEXT_SetFont(hItem, &XBF_Font24);
    TEXT_SetText(hItem, "10次");
		TEXT_SetTextColor(hItem,GUI_WHITE);
   
    //
    // Initialization of 'Text'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_6);
    TEXT_SetFont(hItem, &XBF_Font24);
    TEXT_SetText(hItem, "15次");
		TEXT_SetTextColor(hItem,GUI_WHITE);
    //
    // Initialization of 'Text'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_7);
    TEXT_SetFont(hItem, &XBF_Font24);
    TEXT_SetText(hItem, "20次");
		TEXT_SetTextColor(hItem,GUI_WHITE);	
		
		for(i=0;i<3;i++)
		{
			for(j=0;j<4;j++)
			{
			 hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_8+(i*4+j));
			TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);	
       TEXT_SetFont(hItem, &XBF_Font24);
			 f=SystemAlarm->GridAlarm.Value[i][j];
			 sprintf(s,"%7.2f",f);	
       TEXT_SetText(hItem, s);
			 switch(i)
			 { 
				 case 0:
					TEXT_SetTextColor(hItem,GUI_YELLOW);
				 break;
				 case 1:
					TEXT_SetTextColor(hItem,GUI_GREEN);
				 break;
				 case 2:
					TEXT_SetTextColor(hItem,GUI_RED);
				 break;
				 default:
					 break;
				 
			 }
			 		
			}
		}
			
    
		}
		
		else
		{
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
    //TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
		TEXT_SetFont(hItem, &XBF_Font24);
    TEXT_SetTextColor(hItem,GUI_GREEN);// 
		TEXT_SetText(hItem,"没有谐振告警");
		}
	
		
		#endif
    //
   
    // USER START (Optionally insert additional code for further widget initialization)
       //增加回调函数改变BUTTON的皮肤。
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_0);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton0);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_1);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton1);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_2);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton2);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_3);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton3);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_4);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton4);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_5);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton5);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_6);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton6);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_7);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton7);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_8);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton8);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_9);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton9);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_20);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton20);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_21);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton21);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_10);
		BUTTON_SetFont(hItem,&XBF_Font24);
		BUTTON_SetTextColor(hItem,BUTTON_CI_UNPRESSED,0x000455ea);
		BUTTON_SetText(hItem,"上一条");
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_11);
		BUTTON_SetFont(hItem,&XBF_Font24);
		BUTTON_SetTextColor(hItem,BUTTON_CI_UNPRESSED,0x000455ea);
		BUTTON_SetText(hItem,"下一条");
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_30);
		BUTTON_SetFont(hItem,&XBF_Font24);
		BUTTON_SetTextColor(hItem,BUTTON_CI_UNPRESSED,0x000455ea);
		BUTTON_SetText(hItem,"选择");
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_31);
		BUTTON_SetFont(hItem,&XBF_Font24);
		BUTTON_SetTextColor(hItem,BUTTON_CI_UNPRESSED,0x000455ea);
		BUTTON_SetText(hItem,"保护器");
		
    // USER END
    break;
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
    NCode = pMsg->Data.v;
    switch(Id) {
    case ID_BUTTON_0: // Notifications sent by 'RealMonitor'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreateMain();//切换到主画面
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_1: // Notifications sent by 'SystemSet'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        //CreateTempHumdity_S();
				Createpassword();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_2: // Notifications sent by 'AlarmList'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_3: // Notifications sent by 'PowerQuality'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreatePowerQuality();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_4: // Notifications sent by 'Button'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        Createaboutus();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_5: // Notifications sent by 'Over Voltage Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreateOverVoltage_A();
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_6: // Notifications sent by 'Temp&humidity Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreateTempHumidity_A();//温湿报警
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_7: // Notifications sent by ' Ground Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreateGround_A();//接地报警
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        

        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_8: // Notifications sent by 'Resonance Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
			
			case ID_BUTTON_9: // Notifications sent by 'Resonance Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreateShort_A();//短路故障
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
				
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;	
			
						
			case ID_BUTTON_20: // Notifications sent by 'Resonance Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreatePTOpen_A();//PT断线报警
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
				
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;

			case ID_BUTTON_21: // Notifications sent by 'Resonance Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				Clear_Graph();
				GUI_EndDialog(pMsg->hWin,0);
        CreateUnderVoltage_A();//欠压报警
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
				
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;	
			
			case ID_BUTTON_31: // Notifications sent by 'Resonance Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				//Clear_Graph();
				hItem= CreateProtector_W();
        WM_SetStayOnTop(hItem,1);
       //
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
				
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
			
			
			case ID_BUTTON_10: // Notifications sent by 'Resonance Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				if(SVA_WavePosition>=(SDInstantaneousVoltageFault_sum-1))
				{
					break;
				}
				SVA_WavePosition++;
				StartReadSD_SVA_Flag=1;
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
				
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;	
			
			case ID_BUTTON_11: // Notifications sent by 'Resonance Alarm'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				if(SVA_WavePosition>0)
				{
					SVA_WavePosition--;
					StartReadSD_SVA_Flag=1;
				}
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
				
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;

			case ID_BUTTON_30: // Notifications sent by 'Select'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				SelectWave++;
			  if(SelectWave>=4)
				SelectWave=0;	
				WM_SendMessageNoPara(WM_GetClientWindow(RA_hWin), WM_DisplayWave);
				//StartReadSD_GA_Flag=1;
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
				
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;	
			
    // USER START (Optionally insert additional code for further Ids)
    // USER END
    }
    break;
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
    break;
  }
}

/*********************************************************************
*
*       Public code
*
**********************************************************************
*/
/*********************************************************************
*
*       CreateTempHumidity_A
*/
WM_HWIN CreateResonance_A(void);
WM_HWIN CreateResonance_A(void) {
  //WM_HWIN hWin;

  RA_hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
  return RA_hWin;
}

// USER START (Optionally insert additional public code)
// USER END

/*************************** End of file ****************************/
