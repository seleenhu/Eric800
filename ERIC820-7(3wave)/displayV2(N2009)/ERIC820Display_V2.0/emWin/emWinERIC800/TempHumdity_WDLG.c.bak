/*
**********************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.36                          *
*        Compiled Aug 31 2016, 10:53:09                              *
*        (c) 2016 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*/

// USER START (Optionally insert additional includes)
// USER END


#include "DIALOG.h"
#include "Emwin_eric800.h"





extern uint8_t HaveDrawLogoFlag;

extern int BackLightTime;
extern uint8_t LcdBackLightFlag;

/*********************************************************************
*
*       Defines
*
**********************************************************************
*/
#define ID_WINDOW_0  (GUI_ID_USER + 0x00)
#define ID_LISTVIEW_0 (GUI_ID_USER + 0x01)
#define ID_BUTTON_1 (GUI_ID_USER + 0x02)
#define MaxBusID 11
#define MaxOverItem 14

// USER START (Optionally insert additional defines)
// USER END

/*********************************************************************
*
*       Static data
*
**********************************************************************
*/



static const char *BusString[MaxBusID]={"A相母排温度",
													      "B相母排温度",
																"C相母排温度",
																"A相上触头温度",
																"B相上触头温度",
																"C相上触头温度",
																"A相下触头温度",
																"B相下触头温度",
																"C相下触头温度",
																"柜内温度",
																"柜内湿度"
																};
static const char *OverString[MaxOverItem]={
																	"漏电流",
																	"A相温度",
																	"B相温度",
																	"C相温度",
																	"A相湿度",
																	"B相湿度",
																	"C相湿度",
																	"AD相动作次数/时长",
																	"BD相动作次数/时长",
																	"CD相动作次数/时长",
																	"AB相动作次数/时长",
																	"AC相动作次数/时长",
																	"BC相动作次数/时长",
																	"电池电量"
																					};


// USER START (Optionally insert additional static data)
// USER END

/*********************************************************************
*
*       _aDialogCreate
*/
static const GUI_WIDGET_CREATE_INFO _aDialogCreate[] = {
  { WINDOW_CreateIndirect, "TempHumdity_W", ID_WINDOW_0, 0, 0, 800, 480, 0, 0x0, 0 },
	{ LISTVIEW_CreateIndirect, "Listview", ID_LISTVIEW_0, 0, 0, 800, 415, 0, 0x0, 0 },
	{ BUTTON_CreateIndirect, "   ", ID_BUTTON_1, 700, 425, 65, 40, 0, 0x0, 0 },
	
  // USER START (Optionally insert additional widgets)
  // USER END
};

/*********************************************************************
*
*       Static code
*
**********************************************************************
*/

static void _cbButton1(WM_MESSAGE * pMsg)
{
	WM_HWIN  hWin;
	GUI_RECT Rect;
	hWin  = pMsg->hWin;

	switch (pMsg->MsgId)
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
			if (BUTTON_IsPressed(hWin))
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}
			else
			{
				GUI_SetColor(0x000455ea);
				GUI_FillRect(Rect.x0, Rect.y0, Rect.x1, Rect.y1);
				GUI_SetBkColor(0x000455ea);
				GUI_SetColor(GUI_WHITE);
			}

			/*
			GUI_SetFont(&GUI_Font20_ASCII);
			GUI_DispStringInRect("SystemSet", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			*/
			GUI_SetFont(&XBF_Font24);
			GUI_DispStringInRect("返回", &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER);
			break;

		default:
			BUTTON_Callback(pMsg);
	}
}


// USER START (Optionally insert additional static code)
// USER END

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
  WM_HWIN hItem;
	HEADER_Handle hHeader;
	WM_HWIN hWinOld;
	int     NCode;
  int     Id;
	
  float t=25.0;
	float SetMax;
	float SetMin;
	float LineSetMax;
	float OverData;
	//uint16_t n;
	uint16_t Temp16;
	uint16_t Temp16_1;
	uint8_t m;
	char s[10];
	uint32_t TempId;
	(void) OverData;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
	case WM_TIMER:
			WM_RestartTimer(pMsg->Data.v,1000);
	
		hWinOld= WM_SelectWindow(WM_GetClientWindow(pMsg->hWin));	
	//==========不关背光
	
		BackLightTime=0;
		LcdBackLightFlag=0;
	
		//===========
	#if 0
		t=Cupboard_P[Cupboard_No][Bus_A].Value.TempBusA;
		t=t/100;
	
		GUI_SetBkColor(GUI_WHITE);
	  if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
		GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);	
		}			
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][Bus_A].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,30,15);
    GUI_DispStringAt("A相母排温度:",100,15);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	/*
	  t=Cupboard_P[Cupboard_No][Bus_A].Value.TempBusA;
		t=t/10;
	*/
		if(t>=OverTempValue)
		{
			t=25.00;
			GUI_DispFloatMin(t,2);
		}
    else
		{
			GUI_DispFloatMin(t,1);
		}
    GUI_DispString("℃");
    if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{		
    GUI_DispStringAt("正常",300,15);
		}
    else
		{
			if(t<=OverTempValue)
			{	
			GUI_DispStringAt("异常",300,15);	
			}
			/*
			else
			{
			GUI_DispStringAt("未接",300,15);	
			}
			*/
		}
		
//================Bus_B		
		t=Cupboard_P[Cupboard_No][Bus_B].Value.TempBusB;
		t=t/100;
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);
		}			
    GUI_SetFont(&XBF_Font16);
		//TempId=1+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][Bus_B].Id&0x00ffffff;
		sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,30,40);
    GUI_DispStringAt("B相母排温度:",100,40);
		//t=CupboardIdAdr[Cupboard_No].Bus_B;//待定
		/*
		t=Cupboard_P[Cupboard_No][Bus_B].Value.TempBusB;
		t=t/10;
		*/
   if(t>=OverTempValue)
		{
			t=25.00;
			GUI_DispFloatMin(t,2);
		}
    else
		{
			GUI_DispFloatMin(t,1);
		}
		GUI_DispString("℃");
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_DispStringAt("正常",300,40);
		}
		else
		{
			if(t<=OverTempValue)
			{
			GUI_DispStringAt("异常",300,40);	
			}
			/*
			else
			{
				GUI_DispStringAt("未接",300,40);	
			}
			*/
		}			

//================Bus_C		
		t=Cupboard_P[Cupboard_No][Bus_C].Value.TempBusC;
		t=t/100;
		
    if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);
		}			
    GUI_SetFont(&XBF_Font16);
		//TempId=2+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][Bus_C].Id&0x00ffffff;
		sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,30,65);
    GUI_DispStringAt("C相母排温度:",100,65);
		/*
		t=Cupboard_P[Cupboard_No][Bus_C].Value.TempBusC;
		t=t/10;
		*/
    if(t>=OverTempValue)
		{
			t=25.00;
			GUI_DispFloatMin(t,2);
		}
    else
		{
			GUI_DispFloatMin(t,1);
		}
		GUI_DispString("℃");
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_DispStringAt("正常",300,65);
		}
		else
		{
			if(t<=OverTempValue){
			GUI_DispStringAt("异常",300,65);	
			}
			/*
			else
			{
			GUI_DispStringAt("未接",300,65);	
			}
			*/
		}
//=============TouchUp_A
		t=Cupboard_P[Cupboard_No][TouchUp_A].Value.TempTouchUpA;
		t=t/100;
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);
		}			
    GUI_SetFont(&XBF_Font16);
	  //TempId=3+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][TouchUp_A].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,30,90);
    GUI_DispStringAt("A相上触头温度:",100,90);
		/*
		t=Cupboard_P[Cupboard_No][TouchUp_A].Value.TempTouchUpA;
		t=t/10;
		*/
    if(t>=OverTempValue)
		{
			t=25.00;
			GUI_DispFloatMin(t,2);
		}
    else
		{
			GUI_DispFloatMin(t,1);
		}
		GUI_DispString("℃");
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_DispStringAt("正常",300,90);
		}
    else
		{
			if(t<=OverTempValue)
			{
			GUI_DispStringAt("异常",300,90);	
			}
			/*
			else
			{
			GUI_DispStringAt("未接",300,90);		
			}
			*/
		}
//===============TouchUp_B
		t=Cupboard_P[Cupboard_No][TouchUp_B].Value.TempTouchUpB;
		t=t/100;
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);
		}			
    GUI_SetFont(&XBF_Font16);
	  //TempId=4+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][TouchUp_B].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,30,115);
    GUI_DispStringAt("B相上触头温度:",100,115);
		/*
		t=Cupboard_P[Cupboard_No][TouchUp_B].Value.TempTouchUpB;
		t=t/10;
		*/
    if(t>=OverTempValue)
		{
			t=25.00;
			GUI_DispFloatMin(t,2);
		}
    else
		{
			GUI_DispFloatMin(t,1);
		}
		GUI_DispString("℃");
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_DispStringAt("正常",300,115);
		}
		else
		{
			if(t<=OverTempValue)
			{
			GUI_DispStringAt("异常",300,115);	
			}
			/*
			else
			{
			GUI_DispStringAt("未接",300,115);		
			}
			*/
		}			
	
//===================TouchUp_C
		t=Cupboard_P[Cupboard_No][TouchUp_C].Value.TempTouchUpC;
		t=t/100;
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);
		}			
    GUI_SetFont(&XBF_Font16);
	  //TempId=5+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][TouchUp_C].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,30,140);
    GUI_DispStringAt("C相上触头温度:",100,140);
		/*
		t=Cupboard_P[Cupboard_No][TouchUp_C].Value.TempTouchUpC;
		t=t/10;
		*/
    if(t>=OverTempValue)
		{
			t=25.00;
			GUI_DispFloatMin(t,2);
		}
    else
		{
			GUI_DispFloatMin(t,1);
		}
		
		GUI_DispString("℃");
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_DispStringAt("正常",300,140);
		}
		else
		{
			if(t<=OverTempValue)
			{
			GUI_DispStringAt("异常",300,140);	
			}
			/*
			else
			{
			GUI_DispStringAt("未接",300,140);		
			}
			*/
		}			
		
//====================TouchDown_A
		t=Cupboard_P[Cupboard_No][TouchDown_A].Value.TempTouchDownA;
		t=t/100;
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);
		}			
    GUI_SetFont(&XBF_Font16);
	  //TempId=6+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][TouchDown_A].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,30,165);
    GUI_DispStringAt("A相下触头温度:",100,165);
		/*
		t=Cupboard_P[Cupboard_No][TouchDown_A].Value.TempTouchDownA;
		t=t/10;
		*/
    if(t>=OverTempValue)
		{
			t=25.00;
			GUI_DispFloatMin(t,2);
		}
    else
		{
			GUI_DispFloatMin(t,1);
		}
		GUI_DispString("℃");
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_DispStringAt("正常",300,165);
		}
		else
		{
			if(t<=OverTempValue)
			{
			GUI_DispStringAt("异常",300,165);	
			}
			/*
			else
			{
				GUI_DispStringAt("未接",300,165);	
			}
			*/
		}			
		
//=====================TouchDown_B
		
		t=Cupboard_P[Cupboard_No][TouchDown_A].Value.TempTouchDownA;
		t=t/100;
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);
		}			
    GUI_SetFont(&XBF_Font16);
	  //TempId=7+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][TouchDown_B].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,30,190);
    GUI_DispStringAt("B相下触头温度:",100,190);
		/*
		t=Cupboard_P[Cupboard_No][TouchDown_B].Value.TempTouchDownB;
		t=t/10;
		*/
    if(t>=OverTempValue)
		{
			t=25.00;
			GUI_DispFloatMin(t,2);
		}
    else
		{
			GUI_DispFloatMin(t,1);
		}
		GUI_DispString("℃");
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_DispStringAt("正常",300,190);
		}
		else
		{
			if(t<=OverTempValue)
			{
			GUI_DispStringAt("异常",300,190);	
			}
			/*
			else
			{
				GUI_DispStringAt("未接",300,190);	
			}
			*/
		}			
		
//=========================TouchDown_C		
		t=Cupboard_P[Cupboard_No][TouchDown_C].Value.TempTouchDownC;
		t=t/100;
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);
		}			
    GUI_SetFont(&XBF_Font16);
	  //TempId=8+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][TouchDown_C].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,30,215);
    GUI_DispStringAt("C相下触头温度:",100,215);
		/*
		t=Cupboard_P[Cupboard_No][TouchDown_C].Value.TempTouchDownC;
		t=t/10;
		*/
    if(t>=OverTempValue)
		{
			t=25.00;
			GUI_DispFloatMin(t,2);
		}
    else
		{
			GUI_DispFloatMin(t,1);
		}
		GUI_DispString("℃");
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_DispStringAt("正常",300,215);
		}
		else
		{
			if(t<=OverTempValue)
			{
			GUI_DispStringAt("异常",300,215);	
			}
			/*
			else
			{
				GUI_DispStringAt("未接",300,215);	
			}
			*/
		}			
//====================CupboardTemp		
		t=Cupboard_P[Cupboard_No][Cupboard_T].Value.TempCupboard;
		t=t/100;
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);
		}			
    GUI_SetFont(&XBF_Font16);
	  //TempId=9+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][Cupboard_T].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,30,240);
    GUI_DispStringAt("柜内温度:",100,240);
		/*
		t=Cupboard_P[Cupboard_No][Cupboard_T].Value.TempCupboard;
		t=t/10;
		*/
    if(t>=OverTempValue)
		{
			t=25.00;
			GUI_DispFloatMin(t,2);
		}
    else
		{
			GUI_DispFloatMin(t,1);
		}
		GUI_DispString("℃");
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_DispStringAt("正常",300,240);
		}
		else
		{
			if(t<=OverTempValue)
			{
			GUI_DispStringAt("异常",300,240);	
			}
			/*
			else
			{
				GUI_DispStringAt("未接",300,240);	
			}
			*/
		}			
		
//===============Cupboard Humdity
		t=Cupboard_P[Cupboard_No][Cupboard_H].Value.HumdityCupboard;
		//t=t/10;
		if(t>=Setting.HumiditySet.MinValue&&t<=Setting.HumiditySet.MaxValue)
		{	
		GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);	
		}			
    GUI_SetFont(&XBF_Font16);
	  //TempId=10+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][Cupboard_H].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,30,265);
    GUI_DispStringAt("柜内湿度:",100,265);
		/*
		t=Cupboard_P[Cupboard_No][Cupboard_H].Value.HumdityCupboard;
		t=t/10;
		*/
    GUI_DispFloatMin(t,1);
		GUI_DispString("%RH");
		if(t>=Setting.HumiditySet.MinValue&&t<=Setting.HumiditySet.MaxValue)
		{	
    GUI_DispStringAt("正常",300,265);
		}
		
//=============LeakageCurrent
		t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.LeakgaeCurrent;
    if(t<=Setting.LeakageCurrentSet.LeakageValue)
		{
		GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);	
		}			
    GUI_SetFont(&XBF_Font16);
	  //TempId=11+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,30,290);
    GUI_DispStringAt("漏电流:",100,290);
		//t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.LeakgaeCurrent;
    GUI_DispFloatMin(t,1);
		GUI_DispString("uA");
		if(t<=Setting.LeakageCurrentSet.LeakageValue)
		{	
    GUI_DispStringAt("正常",300,290);
		}
		else
		{
		GUI_DispStringAt("异常",300,290);	
		}			
		
//==============OverVoltageTA
		t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageTA;
		t=t/100;
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);
		}			
    GUI_SetFont(&XBF_Font16);
	  //TempId=12+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,30,315);
    GUI_DispStringAt("保护器A相温度:",100,315);
		/*
		t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageTA;
		t=t/10;
		*/
    if(t>=OverTempValue)
		{
			t=25.00;
			GUI_DispFloatMin(t,2);
		}
    else
		{
			GUI_DispFloatMin(t,1);
		}
		GUI_DispString("℃");
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_DispStringAt("正常",300,315);
		}
		else
		{
		GUI_DispStringAt("异常",300,315);	
		}			
			
//=====================OverVoltageTB
		t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageTB;
		t=t/100;
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);
		}		
    GUI_SetFont(&XBF_Font16);
	  //TempId=13+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,30,340);
    GUI_DispStringAt("保护器B相温度:",100,340);
		/*
		t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageTB;
		t=t/10;
		*/
    if(t>=OverTempValue)
		{
			t=25.00;
			GUI_DispFloatMin(t,2);
		}
    else
		{
			GUI_DispFloatMin(t,1);
		}
		GUI_DispString("℃");
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_DispStringAt("正常",300,340);
		}
		else
		{
		GUI_DispStringAt("异常",300,340);	
		}			
		
//====================OverVoltageTC
		t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageTC;
		t=t/100;
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);
		}		
    GUI_SetFont(&XBF_Font16);
	  //TempId=14+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,30,365);
    GUI_DispStringAt("保护器C相温度:",100,365);
		/*
		t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageTC;
		t=t/10;
		*/
    if(t>=OverTempValue)
		{
			t=25.00;
			GUI_DispFloatMin(t,2);
		}
    else
		{
			GUI_DispFloatMin(t,1);
		}
		GUI_DispString("℃");
		if(t>=Setting.TempSet.MinValue&&t<=Setting.TempSet.MaxValue)
		{	
    GUI_DispStringAt("正常",300,365);
		}
		else
		{
		GUI_DispStringAt("异常",300,365);	
		}			
		/*
		GUI_SetColor(GUI_WHITE);
    GUI_SetFont(&XBF_Font16);
	  //TempId=15+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_H].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50,390);
    GUI_DispStringAt("过电压保护器湿度:",120,390);
		t=Cupboard_P[Cupboard_No][OverVoltage_H].Value;
    GUI_DispFloat(t,4);
		GUI_DispString("%RH");
    GUI_DispStringAt("正常",350,390);
		*/
	//=============OverVoltageHA	
		t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageHA;
		if(t>=Setting.HumiditySet.MinValue&&t<=Setting.HumiditySet.MaxValue)
		{	
		GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);	
		}
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,15);
    GUI_DispStringAt("保护器A相湿度:",120+290,15);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  //t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageHA;
    GUI_DispFloatMin(t,1);
    GUI_DispString("%"); 
		if(t>=Setting.HumiditySet.MinValue&&t<=Setting.HumiditySet.MaxValue)
		{	
    GUI_DispStringAt("正常",350+290,15);
		}
		else
		{
		GUI_DispStringAt("异常",350+290,15);	
		}			
		
//===============OverVoltageHB
		t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageHB;
		if(t>=Setting.HumiditySet.MinValue&&t<=Setting.HumiditySet.MaxValue)
		{	
		GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);	
		}
		
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,40);
    GUI_DispStringAt("保护器B相湿度:",120+290,40);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  //t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageHB;
    GUI_DispFloatMin(t,1);
    GUI_DispString("%"); 
		if(t>=Setting.HumiditySet.MinValue&&t<=Setting.HumiditySet.MaxValue)
		{
    GUI_DispStringAt("正常",350+290,40);
		}
		else
		{
		GUI_DispStringAt("异常",350+290,40);	
		}			
//==============OverVoltageHC
		t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageHC;
		
		if(t>=Setting.HumiditySet.MinValue&&t<=Setting.HumiditySet.MaxValue)
		{	
		GUI_SetColor(GUI_BLACK);
		}
		else
		{
		GUI_SetColor(GUI_RED);	
		}
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,65);
    GUI_DispStringAt("保护器C相湿度:",120+290,65);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  //t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageHC;
    GUI_DispFloatMin(t,1);
    GUI_DispString("%"); 
		if(t>=Setting.HumiditySet.MinValue&&t<=Setting.HumiditySet.MaxValue)
		{	
    GUI_DispStringAt("正常",350+290,65);
		}
		else
		{
		GUI_DispStringAt("异常",350+290,65);	
		}			
		
//==================ActionCntAD
		n=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntAD;
		if(n>0)
		{	
		GUI_SetColor(GUI_RED);
		}
		else
		{
		GUI_SetColor(GUI_BLACK);	
		}
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,90);
    GUI_DispStringAt("保护器AD相动作次数:",120+290,90);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  //n=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntAD;
    GUI_DispDec(n,2);
    GUI_DispString("次"); 
    //GUI_DispStringAt("正常",350+290,90);
		
//=====================	ActionCntBD
		n=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntBD;
		if(n>0)
		{	
		GUI_SetColor(GUI_RED);
		}
		else
		{
		GUI_SetColor(GUI_BLACK);	
		}
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,115);
    GUI_DispStringAt("保护器BD相动作次数:",120+290,115);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  //n=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntBD;
    GUI_DispDec(n,2);
    GUI_DispString("次"); 
    //GUI_DispStringAt("正常",350+290,115);

//=============================ActionCntCD
		n=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntCD;
		if(n>0)
		{	
		GUI_SetColor(GUI_RED);
		}
		else
		{
		GUI_SetColor(GUI_BLACK);	
		}
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,140);
    GUI_DispStringAt("保护器CD相动作次数:",120+290,140);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  //n=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntCD;
    GUI_DispDec(n,2);
    GUI_DispString("次"); 
    //GUI_DispStringAt("正常",350+290,140);
//================ActionCntAB
		n=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntAB;
		if(n>0)
		{	
		GUI_SetColor(GUI_RED);
		}
		else
		{
		GUI_SetColor(GUI_BLACK);	
		}	
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,165);
    GUI_DispStringAt("保护器AB相动作次数:",120+290,165);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  //n=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntAB;
    GUI_DispDec(n,2);
    GUI_DispString("次"); 
    //GUI_DispStringAt("正常",350+290,165);
		
//=====================ActionCntAC
		n=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntAC;
		if(n>0)
		{	
		GUI_SetColor(GUI_RED);
		}
		else
		{
		GUI_SetColor(GUI_BLACK);	
		}	
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,190);
    GUI_DispStringAt("保护器AC相动作次数:",120+290,190);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  //n=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntAC;
    GUI_DispDec(n,2);
    GUI_DispString("次"); 
    //GUI_DispStringAt("正常",350+290,190);
//=========================	ActionCntBC
		n=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntBC;
		if(n>0)
		{	
		GUI_SetColor(GUI_RED);
		}
		else
		{
		GUI_SetColor(GUI_BLACK);	
		}	
		GUI_SetColor(GUI_BLACK);
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,215);
    GUI_DispStringAt("保护器BC相动作次数:",120+290,215);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  n=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntBC;
    GUI_DispDec(n,2);
    GUI_DispString("次"); 
    //GUI_DispStringAt("正常",350+290,215);
//=====================		
		GUI_SetColor(GUI_BLACK);
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,240);
    GUI_DispStringAt("保护器AD相动作时长:",120+290,240);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionTimeAD;
    GUI_DispFloat(t,4);
    GUI_DispString("ms"); 
    //GUI_DispStringAt("正常",350+290,240);
		
		GUI_SetColor(GUI_BLACK);
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,265);
    GUI_DispStringAt("保护器BD相动作时长:",120+290,265);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionTimeBD;
    GUI_DispFloat(t,4);
    GUI_DispString("ms"); 
    //GUI_DispStringAt("正常",350+290,265);
		
		GUI_SetColor(GUI_BLACK);
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,290);
    GUI_DispStringAt("保护器CD相动作时长:",120+290,290);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionTimeCD;
    GUI_DispFloat(t,4);
    GUI_DispString("ms"); 
    //GUI_DispStringAt("正常",350+290,290);
		
		GUI_SetColor(GUI_BLACK);
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,315);
    GUI_DispStringAt("保护器AB相动作时长:",120+290,315);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionTimeAB;
    GUI_DispFloat(t,4);
    GUI_DispString("ms"); 
    //GUI_DispStringAt("正常",350+290,315);
		
		GUI_SetColor(GUI_BLACK);
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,340);
    GUI_DispStringAt("保护器AC相动作时长:",120+290,340);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionTimeAC;
    GUI_DispFloat(t,4);
    GUI_DispString("ms"); 
    //GUI_DispStringAt("正常",350+290,340);
		
		GUI_SetColor(GUI_BLACK);
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,365);
    GUI_DispStringAt("保护器BC相动作时长:",120+290,365);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionTimeBC;
    GUI_DispFloat(t,4);
    GUI_DispString("ms"); 
    //GUI_DispStringAt("正常",350+290,365);
		
		
		GUI_SetColor(GUI_BLACK);
    GUI_SetFont(&XBF_Font16);
	  //TempId=0+16*Cupboard_No;
		TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	  sprintf(s,"ID%d",TempId);
    GUI_DispStringAt(s,50+290,390);
    GUI_DispStringAt("保护器电池电量:",120+290,390);
		//t=CupboardIdAdr[Cupboard_No].Bus_A;//待定
	  t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.BatteryValue;
	  t=t/100;
    GUI_DispFloatMin(t,2);
    GUI_DispString("V"); 
		GUI_DispStringAt("正常",350+290,390);
		
		
		#endif 
//===========显示各ID参数	
   for(m=0;m<MaxBusID;m++)
	 {
		hItem = WM_GetDialogItem(pMsg->hWin, ID_LISTVIEW_0);
		LISTVIEW_AddRow(hItem, NULL);
		switch(m)
		{
			case Bus_A:
			t=Cupboard_P[Cupboard_No][m].Value.TempBusA;
			t=t/100;
			break;
			case Bus_B:
			t=Cupboard_P[Cupboard_No][m].Value.TempBusB;
			t=t/100;
			break;
			case Bus_C:
			t=Cupboard_P[Cupboard_No][m].Value.TempBusC;
			t=t/100;
			break;
			case TouchUp_A:
			t=Cupboard_P[Cupboard_No][m].Value.TempTouchUpA;
			t=t/100;
			break;
			case TouchUp_B:
			t=Cupboard_P[Cupboard_No][m].Value.TempTouchUpB;
			t=t/100;
			break;
			case TouchUp_C:
			t=Cupboard_P[Cupboard_No][m].Value.TempTouchUpC;
			t=t/100;
			break;
			case TouchDown_A:
			t=Cupboard_P[Cupboard_No][m].Value.TempTouchDownA;
			t=t/100;
			break;
			case TouchDown_B:
			t=Cupboard_P[Cupboard_No][m].Value.TempTouchDownB;
			t=t/100;
			break;
			case TouchDown_C:
			t=Cupboard_P[Cupboard_No][m].Value.TempTouchDownC;
			t=t/100;
			break;
			case Cupboard_T:
			t=Cupboard_P[Cupboard_No][m].Value.TempCupboard;
			t=t/100;
			break;	
			case Cupboard_H:
			t=Cupboard_P[Cupboard_No][m].Value.HumdityCupboard;	
			break;	
				
			default:
			break;	
			
		}
		
		
		LISTVIEW_SetFont(hItem,&XBF_Font16);
		
		
		TempId=Cupboard_P[Cupboard_No][m].Id&0x00ffffff;
	  sprintf(s,"%04d",TempId);
		LISTVIEW_SetItemText(hItem, 0,m,s);//显示ID
		if(m==Cupboard_H)
		{	
		//sprintf(s,"%s:%6.0fRH",BusString[m],t);
			sprintf(s,"%s:%6.0f",BusString[m],t);
			strcat(s,"%RH");
		}
		else
		{
		sprintf(s,"%s:%6.2f℃",BusString[m],t);	
		}
		LISTVIEW_SetItemText(hItem, 1,m,s);
//===============设置最大值最小值		
		OverData=OverTempValue;
		SetMin=Setting.TempSet.MinValue;
		SetMax=Setting.TempSet.MaxValue;
		LineSetMax=Setting.LineTempMax;
		if(m==Cupboard_H)
		{
		OverData=OverHumiValue;
		SetMin=Setting.HumiditySet.MinValue;
		SetMax=Setting.HumiditySet.MaxValue;
		}		
//============================		
	//	if(t>=OverData)
		if(Cupboard_P[Cupboard_No][m].OnlineFlag==0)
		{
		if(m==Cupboard_H)
		{		
		
			//sprintf(s,"%s:50",BusString[m]);
			sprintf(s,"%s:--",BusString[m]);
			strcat(s,"%RH");
		}
		else
		{
		//sprintf(s,"%s:25.00℃",BusString[m]);
			sprintf(s,"%s:--℃",BusString[m]);
		}			
		LISTVIEW_SetItemText(hItem, 1,m,s);
		LISTVIEW_SetItemTextColor(hItem,0,m,LISTVIEW_CI_UNSEL,GUI_BLACK);
		LISTVIEW_SetItemTextColor(hItem,1,m,LISTVIEW_CI_UNSEL,GUI_BLACK);
		LISTVIEW_SetItemTextColor(hItem,2,m,LISTVIEW_CI_UNSEL,GUI_BLACK);
		//LISTVIEW_SetItemText(hItem, 2,m,"正常" );	
		LISTVIEW_SetItemText(hItem, 2,m,"--" );	
		}
		
		//else if(t>=SetMin&&t<=SetMax)
		else if(t<=LineSetMax)
		{	
		LISTVIEW_SetItemTextColor(hItem,0,m,LISTVIEW_CI_UNSEL,GUI_BLACK);
		LISTVIEW_SetItemTextColor(hItem,1,m,LISTVIEW_CI_UNSEL,GUI_BLACK);
		LISTVIEW_SetItemTextColor(hItem,2,m,LISTVIEW_CI_UNSEL,GUI_BLACK);
		LISTVIEW_SetItemText(hItem, 2,m,"正常" );
		}
		else
		{
		LISTVIEW_SetItemTextColor(hItem,0,m,LISTVIEW_CI_UNSEL,GUI_RED);
		LISTVIEW_SetItemTextColor(hItem,1,m,LISTVIEW_CI_UNSEL,GUI_RED);
		LISTVIEW_SetItemTextColor(hItem,2,m,LISTVIEW_CI_UNSEL,GUI_RED);	
		LISTVIEW_SetItemText(hItem, 2,m,"异常" );
		}
		//=======背景色
		if(m%2==0)
		{	
		LISTVIEW_SetItemBkColor(hItem,0,m,LISTVIEW_CI_UNSEL,0x00fdf7ea);
		LISTVIEW_SetItemBkColor(hItem,1,m,LISTVIEW_CI_UNSEL,0x00fdf7ea);
		LISTVIEW_SetItemBkColor(hItem,2,m,LISTVIEW_CI_UNSEL,0x00fdf7ea);
		}
		else
		{
		LISTVIEW_SetItemBkColor(hItem,0,m,LISTVIEW_CI_UNSEL,0x00f1f1fd);
		LISTVIEW_SetItemBkColor(hItem,1,m,LISTVIEW_CI_UNSEL,0x00f1f1fd);
		LISTVIEW_SetItemBkColor(hItem,2,m,LISTVIEW_CI_UNSEL,0x00f1f1fd);	
		}
	}
		
	LISTVIEW_AddRow(hItem, NULL);
	LISTVIEW_SetItemBkColor(hItem,0,11,LISTVIEW_CI_UNSEL,0x00f1f1fd);
	LISTVIEW_SetItemBkColor(hItem,1,11,LISTVIEW_CI_UNSEL,0x00f1f1fd);
	LISTVIEW_SetItemBkColor(hItem,2,11,LISTVIEW_CI_UNSEL,0x00f1f1fd);	
	LISTVIEW_AddRow(hItem, NULL);
	LISTVIEW_SetItemBkColor(hItem,0,12,LISTVIEW_CI_UNSEL,0x00fdf7ea);
	LISTVIEW_SetItemBkColor(hItem,1,12,LISTVIEW_CI_UNSEL,0x00fdf7ea);
	LISTVIEW_SetItemBkColor(hItem,2,12,LISTVIEW_CI_UNSEL,0x00fdf7ea);
	LISTVIEW_AddRow(hItem, NULL);
	LISTVIEW_SetItemBkColor(hItem,0,13,LISTVIEW_CI_UNSEL,0x00f1f1fd);
	LISTVIEW_SetItemBkColor(hItem,1,13,LISTVIEW_CI_UNSEL,0x00f1f1fd);
	LISTVIEW_SetItemBkColor(hItem,2,13,LISTVIEW_CI_UNSEL,0x00f1f1fd);	
	//LISTVIEW_AddRow(hItem, NULL);
	
	//=======显示保护器数据
	TempId=Cupboard_P[Cupboard_No][OverVoltage_P].Id&0x00ffffff;
	
	sprintf(s,"%04d",TempId);
	LISTVIEW_SetItemText(hItem, 3,0,s);//显示ID
	for(m=0;m<MaxOverItem;m++)
	{
		switch(m)
		{
			case 0:
				Temp16=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.LeakgaeCurrent;
			  break;
			case 1:
				t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageTA;
				t=t/100;
				break;
			case 2:
				t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageTB;
				t=t/100;
				break;
			case 3:
				t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageTC;
				t=t/100;
				break;
			case 4:
				t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageHA;
				break;
			case 5:
				t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageHB;
				break;
			case 6:
				t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.OverVoltageHC;
				break;
			case 7:
				Temp16=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntAD;
				Temp16_1=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionTimeAD;
				break;
			case 8:
				Temp16=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntBD;
				Temp16_1=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionTimeBD;
				break;
			case 9:
				Temp16=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntCD;
				Temp16_1=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionTimeCD;
				break;
			case 10:
				Temp16=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntAB;
				Temp16_1=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionTimeAB;
				break;
			case 11:
				Temp16=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntAC;
				Temp16_1=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionTimeAC;
				break;
			case 12:
				Temp16=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionCntBC;
				Temp16_1=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.ActionTimeBC;
				break;
			case 13:
				//Temp16=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.BatteryValue;
				t=Cupboard_P[Cupboard_No][OverVoltage_P].Value.ProtectorData.BatteryValue;
				t=t/100;
				break;
			default:
				break;
		}
		
		if(m==0)	//漏电流
		{
			if(Cupboard_P[Cupboard_No][OverVoltage_P].OnlineFlag==0)
				sprintf(s,"%s:-- uA",OverString[m]);
			else	
				sprintf(s,"%s:%d uA",OverString[m],Temp16);
		}
		if(m>=1&&m<4)	//温度
		{
			sprintf(s,"%s:%6.2f ℃",OverString[m],t);
		}
		if(m>=4&&m<7)//湿度
		{
			//sprintf(s,"%s:%6.0f RH",OverString[m],t);
			sprintf(s,"%s:%6.0f",OverString[m],t);
			strcat(s,"%RH");
		}
		if(m>=7&&m<13)//动作次数/时长
		{
			if(Cupboard_P[Cupboard_No][OverVoltage_P].OnlineFlag==0)
				sprintf(s,"%s:--次/--ms",OverString[m]);
				else	
				sprintf(s,"%s:%d次/%dms",OverString[m],Temp16,Temp16_1);
		}
		if(m==13)	//电池电量
		{
		if(Cupboard_P[Cupboard_No][OverVoltage_P].OnlineFlag==0)
			sprintf(s,"%s:--V",OverString[m]);
			else
			sprintf(s,"%s:%6.2fV",OverString[m],t);
		}	
		
		LISTVIEW_SetItemText(hItem, 4,m,s);	
		if(m>=7&&m<13)
		{
			if(Temp16>0) //过电压次数>0
			LISTVIEW_SetItemTextColor(hItem,4,m,LISTVIEW_CI_UNSEL,GUI_RED);
			else
			LISTVIEW_SetItemTextColor(hItem,4,m,LISTVIEW_CI_UNSEL,GUI_BLACK);	
		}
		//=========================================
		if(m>=1&&m<7)
		{			
		OverData=OverTempValue;
		SetMin=Setting.TempSet.MinValue;
		SetMax=Setting.TempSet.MaxValue;
		if(m>=4&&m<7)
		{
		OverData=OverHumiValue;
		SetMin=Setting.HumiditySet.MinValue;
		SetMax=Setting.HumiditySet.MaxValue;
		}		
			
		//if(t>=OverData)
		if(Cupboard_P[Cupboard_No][OverVoltage_P].OnlineFlag==0)
		{
		if(m>=4&&m<7)
		{		
			//sprintf(s,"%s:50",OverString[m]);
			sprintf(s,"%s:--",OverString[m]);
			strcat(s,"%RH");
		}
		else
		{
		//sprintf(s,"%s:25.00℃",OverString[m]);
			sprintf(s,"%s:--℃",OverString[m]);
		}			
		LISTVIEW_SetItemText(hItem, 4,m,s);
		LISTVIEW_SetItemTextColor(hItem,3,m,LISTVIEW_CI_UNSEL,GUI_BLACK);
		LISTVIEW_SetItemTextColor(hItem,4,m,LISTVIEW_CI_UNSEL,GUI_BLACK);
		LISTVIEW_SetItemTextColor(hItem,5,m,LISTVIEW_CI_UNSEL,GUI_BLACK);
		//LISTVIEW_SetItemText(hItem, 5,m,"正常" );	
		LISTVIEW_SetItemText(hItem, 5,m,"--" );	
		}
		
		else if(t>=SetMin&&t<=SetMax)
		{	
		LISTVIEW_SetItemTextColor(hItem,3,m,LISTVIEW_CI_UNSEL,GUI_BLACK);
		LISTVIEW_SetItemTextColor(hItem,4,m,LISTVIEW_CI_UNSEL,GUI_BLACK);
		LISTVIEW_SetItemTextColor(hItem,5,m,LISTVIEW_CI_UNSEL,GUI_BLACK);
		LISTVIEW_SetItemText(hItem, 5,m,"正常" );
		}
		else
		{
		LISTVIEW_SetItemTextColor(hItem,3,m,LISTVIEW_CI_UNSEL,GUI_RED);
		LISTVIEW_SetItemTextColor(hItem,4,m,LISTVIEW_CI_UNSEL,GUI_RED);
		LISTVIEW_SetItemTextColor(hItem,5,m,LISTVIEW_CI_UNSEL,GUI_RED);	
		LISTVIEW_SetItemText(hItem, 5,m,"异常" );
		}
		
		}
		
		//=======背景色
		if(m%2==0)
		{	
		LISTVIEW_SetItemBkColor(hItem,3,m,LISTVIEW_CI_UNSEL,0x00fdf7ea);
		LISTVIEW_SetItemBkColor(hItem,4,m,LISTVIEW_CI_UNSEL,0x00fdf7ea);
		LISTVIEW_SetItemBkColor(hItem,5,m,LISTVIEW_CI_UNSEL,0x00fdf7ea);
		}
		else
		{
		LISTVIEW_SetItemBkColor(hItem,3,m,LISTVIEW_CI_UNSEL,0x00f1f1fd);
		LISTVIEW_SetItemBkColor(hItem,4,m,LISTVIEW_CI_UNSEL,0x00f1f1fd);
		LISTVIEW_SetItemBkColor(hItem,5,m,LISTVIEW_CI_UNSEL,0x00f1f1fd);	
		}	
	}
		
		
		
		
	
		WM_SelectWindow(hWinOld);
		
	break;
		
  case WM_PAINT:
   
		

      break;
  case WM_INIT_DIALOG:
    //
    // Initialization of 'TempHumdity_W'
    //
    hItem = pMsg->hWin;
    //WINDOW_SetBkColor(hItem, GUI_GRAY);
		//WINDOW_SetBkColor(hItem, GUI_BLUE);
		WINDOW_SetBkColor(hItem, GUI_WHITE);

		hItem = WM_GetDialogItem(pMsg->hWin, ID_LISTVIEW_0);
	  hHeader=LISTVIEW_GetHeader(hItem);
		HEADER_SetFont(hHeader,&XBF_Font24);
		HEADER_SetBkColor(hHeader,0x000455ea);
		
		HEADER_SetTextColor(hHeader,GUI_BLACK);
		//LISTVIEW_SetDefaultBkColor(LISTVIEW_CI_UNSEL,GUI_RED);
		//LISTVIEW_SetDefaultFont(&GUI_Font24B_ASCII);
		//LISTVIEW_SetFont(hItem,&XBF_Font24);
		LISTVIEW_SetTextColor(hItem,LISTVIEW_CI_UNSEL,GUI_BLACK);
		
		LISTVIEW_AddColumn(hItem, 80, "ID", GUI_TA_HCENTER | GUI_TA_VCENTER);
		LISTVIEW_AddColumn(hItem, 200, "内容", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 60, "状态", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 80, "ID", GUI_TA_HCENTER | GUI_TA_VCENTER);
		LISTVIEW_AddColumn(hItem, 320, "内容(保护器)", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 60, "状态", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_SetGridVis(hItem, 1);
		LISTVIEW_SetRowHeight(hItem, 27);
    LISTVIEW_SetHeaderHeight(hItem, 35);
		
    
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_1);
    WM_SetHasTrans(hItem);
    WM_SetCallback(hItem, _cbButton1);
		//WM_SetFocus(hItem);
		BUTTON_SetFocussable(hItem,0);
		
    // USER START (Optionally insert additional code for further widget initialization)
    // USER END
    break;
  // USER START (Optionally insert additional message handling)
	/*
  case WM_TOUCH:
		HaveDrawLogoFlag=0;
    GUI_EndDialog(pMsg->hWin,0);//关闭此面画
    break;
		*/
	#if 0	
	case WM_TOUCH:
		_LCD_DisplayOn();
		BackLightTime=0;
		LcdBackLightFlag=0;
			break;
	#endif
	case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
		NCode = pMsg->Data.v;
	  
    switch(Id) {
			case ID_BUTTON_1: // 
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
				
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
				//HaveDrawLogoFlag=0;
        GUI_EndDialog(pMsg->hWin,0);//关闭此面画
				//CreateMain();
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;	
		}
		break;
  // USER END
  default:
    WM_DefaultProc(pMsg);
    break;
  }
}

/*********************************************************************
*
*       Public code
*
**********************************************************************
*/
/*********************************************************************
*
*       CreateTempHumdity_W
*/
WM_HWIN CreateTempHumdity_W(void);
WM_HWIN CreateTempHumdity_W(void) {
  WM_HWIN hWin;
	WM_HTIMER hTimer;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
	hTimer =WM_CreateTimer(WM_GetClientWindow(hWin),0,10,0);
	(void)hTimer;
  return hWin;
}

// USER START (Optionally insert additional public code)
// USER END

/*************************** End of file ****************************/
