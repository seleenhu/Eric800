<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\Obj\output.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\Obj\output.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Fri Jun 17 20:46:08 2022
<BR><P>
<H3>Maximum Stack Usage =      10432 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; FaskCalTask &rArr; ADC_JudgeGnd &rArr; AllSelDisplay &rArr; SortFormBigToSmall
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d2]">cr4_fft_256_stm32</a>
 <LI><a href="#[e9]">cr4_fft_64_stm32</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from bsp_can.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[59]">CRYP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[64]">DMA2D_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from bsp_sdio_sd.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream4_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f4xx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[63]">LTDC_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[62]">LTDC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[61]">SAI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from bsp_sdio_sd.o(i.SDIO_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5e]">SPI4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5f]">SPI5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[60]">SPI6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[66]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429_439xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from bsp_timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5c]">UART7_IRQHandler</a> from stm32f4xx_it.o(i.UART7_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5d]">UART8_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[67]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429_439xx.o(.text)
 <LI><a href="#[69]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[68]">fputc</a> from fputc.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[65]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[67]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(.text)
</UL>
<P><STRONG><a name="[1f4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1f5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1f6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1f7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1f8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1f9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[d2]"></a>cr4_fft_256_stm32</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cr4_fft_256_stm32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_VerifyDisplay
</UL>

<P><STRONG><a name="[e9]"></a>cr4_fft_64_stm32</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cr4_fft_64_stm32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadMultiSectors
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllSelDisplay
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTimCom
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleBurstCom
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SortFormBigToSmall
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanMsg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRxDisplay
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRMSCompare
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetModbus16
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCVerification
</UL>

<P><STRONG><a name="[1fa]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1fb]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleRxCom
</UL>

<P><STRONG><a name="[1fd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e6]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WritePage
</UL>

<P><STRONG><a name="[126]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_GetBlockInfo
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadInfo
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elec_Display
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_asm_waypowerMag
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerFactor
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elec_Display
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ShortCircuit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PTFault
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LowValueFault
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeSysExceedV
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeGnd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeExceedV
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_asm_waypowerMag
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_ELECDisplay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ShortCircuit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PTFault
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LowValueFault
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeSysExceedV
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeGnd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeExceedV
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCVerification
</UL>

<P><STRONG><a name="[1ff]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_ELECDisplay
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_asm_waypowerMag
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_ELECDisplay
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerFactor
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elec_Display
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ShortCircuit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PTFault
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LowValueFault
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeSysExceedV
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeGnd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeExceedV
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCVerification
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[200]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[201]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[203]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[73]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[79]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[6b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[204]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>AD7606_EnterAutoMode</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bsp_ad7606.o(i.AD7606_EnterAutoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = AD7606_EnterAutoMode &rArr; bsp_SetTIMOutPWM &rArr; bsp_ConfigTimGpio &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_StartRecord
</UL>

<P><STRONG><a name="[84]"></a>AD7606_ISR</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, bsp_ad7606.o(i.AD7606_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AD7606_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>AD7606_Reset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_ad7606.o(i.AD7606_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD7606_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_StartRecord
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitAD7606
</UL>

<P><STRONG><a name="[89]"></a>AD7606_SetInputRange</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_ad7606.o(i.AD7606_SetInputRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD7606_SetInputRange
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitAD7606
</UL>

<P><STRONG><a name="[8a]"></a>AD7606_StartConvst</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_ad7606.o(i.AD7606_StartConvst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD7606_StartConvst
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_StartRecord
</UL>

<P><STRONG><a name="[8b]"></a>AD7606_StartRecord</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_ad7606.o(i.AD7606_StartRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = AD7606_StartRecord &rArr; AD7606_EnterAutoMode &rArr; bsp_SetTIMOutPWM &rArr; bsp_ConfigTimGpio &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_StopRecord
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_StartConvst
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Reset
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_EnterAutoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>AD7606_StopRecord</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_ad7606.o(i.AD7606_StopRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AD7606_StopRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_StartRecord
</UL>

<P><STRONG><a name="[eb]"></a>ADCParameterSet</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, arithmetic.o(i.ADCParameterSet))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
</UL>

<P><STRONG><a name="[8e]"></a>ADCVerification</STRONG> (Thumb, 462 bytes, Stack size 72 bytes, bsp_ad7606.o(i.ADCVerification))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ADCVerification &rArr; FFT_VerifyDisplay &rArr; Elec_Display &rArr; dsp_asm_waypowerMag &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_VerifyDisplay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Backpointer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>AllSelDisplay</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, bsp_can.o(i.AllSelDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 10320<LI>Call Chain = AllSelDisplay &rArr; SortFormBigToSmall
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SortFormBigToSmall
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeGnd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRMSCompare
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_can.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; can_ISR &rArr; CAN_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>CAN1_Task</STRONG> (Thumb, 988 bytes, Stack size 24 bytes, bsp_can.o(i.CAN1_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 10368<LI>Call Chain = CAN1_Task &rArr; CanRMSCompare &rArr; AllSelDisplay &rArr; SortFormBigToSmall
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_length
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetModbus16
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSelStart
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRxDisplay
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRMSCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[1b8]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[1b9]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_NVIC_Config
</UL>

<P><STRONG><a name="[1b7]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f4xx_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[1b6]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_ISR
</UL>

<P><STRONG><a name="[a9]"></a>CRC_GetModbus16</STRONG> (Thumb, 42 bytes, Stack size 528 bytes, mydefine.o(i.CRC_GetModbus16))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = CRC_GetModbus16 &rArr; GetRevCrc_16
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRevCrc_16
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTask
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Task
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTimCom
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleBurstCom
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSelStart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSBreath
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReadWave
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReadWaveReply
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1TOM3Uart2_H10Tx
</UL>

<P><STRONG><a name="[b0]"></a>Calculate_Task</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, arithmetic.o(i.Calculate_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Calculate_Task &rArr; RMS_ELECDisplay &rArr; U0I0calculate &rArr; Elec_Display &rArr; dsp_asm_waypowerMag &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrequencyCal
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_ELECDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>CanOnlineClr</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, bsp_can.o(i.CanOnlineClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CanOnlineClr
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSBreathTimes
</UL>

<P><STRONG><a name="[b3]"></a>CanOnlineJudge</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, bsp_can.o(i.CanOnlineJudge))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CanOnlineJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSelStart
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRMSCompare
</UL>

<P><STRONG><a name="[b9]"></a>CanOnlineSet</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, bsp_can.o(i.CanOnlineSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CanOnlineSet
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRxDisplay
</UL>

<P><STRONG><a name="[b5]"></a>CanReadWave</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, bsp_can.o(i.CanReadWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = CanReadWave &rArr; CRC_GetModbus16 &rArr; GetRevCrc_16
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetModbus16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRMSCompare
</UL>

<P><STRONG><a name="[b8]"></a>CanSBreath</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, bsp_can.o(i.CanSBreath))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = CanSBreath &rArr; CRC_GetModbus16 &rArr; GetRevCrc_16
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetTime
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetModbus16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRxDisplay
</UL>

<P><STRONG><a name="[ba]"></a>CanSBreathTimes</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, bsp_can.o(i.CanSBreathTimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CanSBreathTimes &rArr; CanOnlineClr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanOnlineClr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>CanSelStart</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, bsp_can.o(i.CanSelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = CanSelStart &rArr; CRC_GetModbus16 &rArr; GetRevCrc_16
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetModbus16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanbuf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanOnlineJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Task
</UL>

<P><STRONG><a name="[194]"></a>ClrSDRAM</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_fmc_sdram.o(i.ClrSDRAM))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; ModuleTxStartIRQ &rArr; DMA_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTxStartIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; Uart2TxStartIRQ &rArr; DMA_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2TxStartIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; SD_ProcessDMAIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_Stream4_IRQHandler &rArr; ModuleSPITxStartIRQ &rArr; DMA_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSPITxStartIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; RS485_DMA2_Stream7_IRQn &rArr; DMA_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_DMA2_Stream7_IRQn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>DMA_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2TxStartIRQ
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_DMA2_Stream7_IRQn
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTxStartIRQ
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSPITxStartIRQ
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2TxStart
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSPITxStart
</UL>

<P><STRONG><a name="[112]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRS485
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2TxStart
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSPITxStart
</UL>

<P><STRONG><a name="[10c]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRS485
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[15c]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_FlowControllerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[10d]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRS485
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2TxStart
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSPITxStart
</UL>

<P><STRONG><a name="[19e]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRS485
</UL>

<P><STRONG><a name="[11e]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSPITxStartIRQ
</UL>

<P><STRONG><a name="[11c]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2TxStartIRQ
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_DMA2_Stream7_IRQn
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTxStartIRQ
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSPITxStartIRQ
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2TxStart
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSPITxStart
</UL>

<P><STRONG><a name="[10e]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRS485
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[11d]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2TxStart
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSPITxStart
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler &rArr; FrequencyABCISR
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrequencyABCISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI1_IRQHandler &rArr; AD7606_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrequencyABCISR
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>EXTI_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrequencyABCISR
</UL>

<P><STRONG><a name="[7f]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrequency
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_StopRecord
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_EnterAutoMode
</UL>

<P><STRONG><a name="[92]"></a>FFT_VerifyDisplay</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, arithmetic.o(i.FFT_VerifyDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = FFT_VerifyDisplay &rArr; Elec_Display &rArr; dsp_asm_waypowerMag &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elec_Display
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cr4_fft_256_stm32
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Backpointer
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCVerification
</UL>

<P><STRONG><a name="[8f]"></a>FIFO_Backpointer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mydefine.o(i.FIFO_Backpointer))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_VerifyDisplay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ShortCircuit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PTFault
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LowValueFault
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeSysExceedV
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeGnd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeExceedV
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCVerification
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTimCom
</UL>

<P><STRONG><a name="[d3]"></a>FIFO_bufcmp</STRONG> (Thumb, 68 bytes, Stack size 28 bytes, mydefine.o(i.FIFO_bufcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FIFO_bufcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTask
</UL>

<P><STRONG><a name="[9b]"></a>FIFO_length</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mydefine.o(i.FIFO_length))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ShortCircuit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PTFault
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LowValueFault
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeSysExceedV
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeGnd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeExceedV
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTask
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Task
</UL>

<P><STRONG><a name="[85]"></a>FIFO_pointer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mydefine.o(i.FIFO_pointer))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_VerifyDisplay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ShortCircuit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PTFault
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LowValueFault
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeSysExceedV
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeGnd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeExceedV
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_bufcmp
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTask
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Task
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCVerification
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart7_M1ANDLCD_IRQ
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_ISR
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTimCom
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_ISR
</UL>

<P><STRONG><a name="[14a]"></a>FMC_GetFlagStatus</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_fmc.o(i.FMC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
</UL>

<P><STRONG><a name="[dc]"></a>FMC_NANDCmd</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f4xx_fmc.o(i.FMC_NANDCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
</UL>

<P><STRONG><a name="[db]"></a>FMC_NANDInit</STRONG> (Thumb, 204 bytes, Stack size 12 bytes, stm32f4xx_fmc.o(i.FMC_NANDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_NANDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
</UL>

<P><STRONG><a name="[83]"></a>FMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_fmc.o(i.FMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_FSMCConfig
</UL>

<P><STRONG><a name="[82]"></a>FMC_NORSRAMInit</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, stm32f4xx_fmc.o(i.FMC_NORSRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_FSMCConfig
</UL>

<P><STRONG><a name="[14b]"></a>FMC_SDRAMCmdConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_fmc.o(i.FMC_SDRAMCmdConfig))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
</UL>

<P><STRONG><a name="[19b]"></a>FMC_SDRAMInit</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, stm32f4xx_fmc.o(i.FMC_SDRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
</UL>

<P><STRONG><a name="[14d]"></a>FMC_SetRefreshCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_fmc.o(i.FMC_SetRefreshCount))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
</UL>

<P><STRONG><a name="[e8]"></a>FaskCalTask</STRONG> (Thumb, 896 bytes, Stack size 40 bytes, arithmetic.o(i.FaskCalTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 10432 + Unknown Stack Size
<LI>Call Chain = FaskCalTask &rArr; ADC_JudgeGnd &rArr; AllSelDisplay &rArr; SortFormBigToSmall
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cr4_fft_64_stm32
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCParameterSet
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorSum_Display
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elec_Display
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_UNormal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ShortCircuit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PTFault
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LowValueFault
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeSysExceedV
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeGnd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeExceedV
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Decompression
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_length
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>FrequencyABCISR</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, bsp_fi.o(i.FrequencyABCISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FrequencyABCISR
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>FrequencyCal</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, bsp_fi.o(i.FrequencyCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FrequencyCal
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Task
</UL>

<P><STRONG><a name="[c9]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_GPIOConfig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigGpioOut
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirgureIO
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ConfigGPIO
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
</UL>

<P><STRONG><a name="[c8]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_GPIOConfig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirgureIO
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
</UL>

<P><STRONG><a name="[d5]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPutScan
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WritePage
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadPage
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_PageCopyBackEx
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_PageCopyBack
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_CompPage
</UL>

<P><STRONG><a name="[107]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTimCom
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleBurstCom
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhaseSwitchDisplay
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSPITxStart
</UL>

<P><STRONG><a name="[87]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_ISR
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirgureIO
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRS485
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_StartConvst
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_SetInputRange
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhaseSwitchDisplay
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSPITxStart
</UL>

<P><STRONG><a name="[86]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSPITxStartIRQ
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_ISR
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRS485
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitAD7606
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_StopRecord
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_StartConvst
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_SetInputRange
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhaseSwitchDisplay
</UL>

<P><STRONG><a name="[1a7]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1e9]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanbuf
</UL>

<P><STRONG><a name="[1e7]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e8]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e6]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>InOutDisplay</STRONG> (Thumb, 370 bytes, Stack size 8 bytes, bsp_inout.o(i.InOutDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InOutDisplay &rArr; InPutScan
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhaseSwitchDisplay
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPutScan
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>InitFrequency</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, bsp_fi.o(i.InitFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InitFrequency &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>InitSaveNand</STRONG> (Thumb, 174 bytes, Stack size 1168 bytes, mydefine.o(i.InitSaveNand))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = InitSaveNand &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_GetBlockInfo
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Format
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[104]"></a>M1TOM3Uart2_H10Tx</STRONG> (Thumb, 774 bytes, Stack size 16 bytes, bsp_moduletomodule.o(i.M1TOM3Uart2_H10Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = M1TOM3Uart2_H10Tx &rArr; CRC_GetModbus16 &rArr; GetRevCrc_16
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetModbus16
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2TxStart
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleRxCom
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[10b]"></a>ModuleComInit</STRONG> (Thumb, 1044 bytes, Stack size 104 bytes, bsp_moduletomodule.o(i.ModuleComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ModuleComInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[10a]"></a>ModuleSPITxStart</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, bsp_moduletomodule.o(i.ModuleSPITxStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ModuleSPITxStart &rArr; DMA_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTimCom
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleBurstCom
</UL>

<P><STRONG><a name="[cd]"></a>ModuleSPITxStartIRQ</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_moduletomodule.o(i.ModuleSPITxStartIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ModuleSPITxStartIRQ &rArr; DMA_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream4_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>ModuleTask</STRONG> (Thumb, 1390 bytes, Stack size 24 bytes, bsp_moduletomodule.o(i.ModuleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 2296<LI>Call Chain = ModuleTask &rArr; ModuleBurstCom &rArr; NandRead2 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_length
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_bufcmp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetModbus16
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTimCom
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleRxCom
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleBurstCom
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>ModuleTxStartIRQ</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_moduletomodule.o(i.ModuleTxStartIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ModuleTxStartIRQ &rArr; DMA_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>NAND_Format</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, bsp_nand_flash.o(i.NAND_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = NAND_Format &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsBadBlock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_BuildLUT
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteSpare
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_EraseBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSaveNand
</UL>

<P><STRONG><a name="[fa]"></a>NAND_GetBlockInfo</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, bsp_nand_flash.o(i.NAND_GetBlockInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = NAND_GetBlockInfo &rArr; NAND_IsFreeBlock &rArr; NAND_IsBadBlock &rArr; FMC_NAND_ReadSpare &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadID
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsBadBlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsFreeBlock
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Reset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSaveNand
</UL>

<P><STRONG><a name="[101]"></a>NAND_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_nand_flash.o(i.NAND_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = NAND_Init &rArr; FMC_NAND_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_BuildLUT
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Reset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSaveNand
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[124]"></a>NAND_IsBadBlock</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_nand_flash.o(i.NAND_IsBadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NAND_IsBadBlock &rArr; FMC_NAND_ReadSpare &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_GetBlockInfo
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Format
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsFreeBlock
</UL>

<P><STRONG><a name="[127]"></a>NAND_MarkBadBlock</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_nand_flash.o(i.NAND_MarkBadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteSpare
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
</UL>

<P><STRONG><a name="[125]"></a>NAND_ReadID</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bsp_nand_flash.o(i.NAND_ReadID))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_GetBlockInfo
</UL>

<P><STRONG><a name="[129]"></a>NAND_ReadMultiSectors</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, bsp_nand_flash.o(i.NAND_ReadMultiSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NAND_ReadMultiSectors &rArr; FMC_NAND_ReadData &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_LBNtoPBN
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadData
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[12b]"></a>NAND_WriteMultiSectors</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, bsp_nand_flash.o(i.NAND_WriteMultiSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkBadBlock
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkUsedBlock
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_LBNtoPBN
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteData
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_CompPage
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[12c]"></a>NAND_WriteToNewBlock</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, bsp_nand_flash.o(i.NAND_WriteToNewBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkBadBlock
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkUsedBlock
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_FindFreeBlock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_BuildLUT
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_PageCopyBackEx
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_PageCopyBack
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_EraseBlock
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrequency
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_NVIC_Config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRS485
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_EnterAutoMode
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Interrupts_Config
</UL>

<P><STRONG><a name="[18c]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_NVIC_Config
</UL>

<P><STRONG><a name="[131]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[c7]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_GPIOConfig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigGpioOut
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirgureIO
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRS485
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ConfigGPIO
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
</UL>

<P><STRONG><a name="[da]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
</UL>

<P><STRONG><a name="[f7]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrequency
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_CfgSpiHard
</UL>

<P><STRONG><a name="[ae]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[7d]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrequency
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRS485
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_EnterAutoMode
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
</UL>

<P><STRONG><a name="[145]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
</UL>

<P><STRONG><a name="[177]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[133]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[132]"></a>RCC_LSEConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[135]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[134]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[ce]"></a>RS485_DMA2_Stream7_IRQn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_rs485.o(i.RS485_DMA2_Stream7_IRQn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RS485_DMA2_Stream7_IRQn &rArr; DMA_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>RTC_Config</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bsp_rtc.o(i.RTC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTC_Config &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleRxCom
</UL>

<P><STRONG><a name="[13e]"></a>RTC_EnterInitMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[13f]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[13b]"></a>RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetTime
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[13d]"></a>RTC_GetTime</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetTime
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[137]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[19f]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[138]"></a>RTC_SetDate</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[139]"></a>RTC_SetTime</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[136]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[13a]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[141]"></a>ReadParam</STRONG> (Thumb, 514 bytes, Stack size 16 bytes, mydefine.o(i.ReadParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadParam &rArr; sf_ReadBuffer &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[be]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[161]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[15f]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[164]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[ef]"></a>SDIO_DataConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[144]"></a>SDIO_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[c0]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[bd]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[160]"></a>SDIO_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[15a]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[c1]"></a>SDIO_GetResponse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[162]"></a>SDIO_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[14f]"></a>SDIO_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[147]"></a>SDIO_Interrupts_Config</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SDIO_Interrupts_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIO_Interrupts_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[f0]"></a>SDIO_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[ee]"></a>SDIO_SendCommand</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[15e]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[151]"></a>SD_Detect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SD_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[14e]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[158]"></a>SD_GetCardInfo</STRONG> (Thumb, 780 bytes, Stack size 20 bytes, bsp_sdio_sd.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[150]"></a>SD_GetState</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SD_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>

<P><STRONG><a name="[153]"></a>SD_GetStatus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[154]"></a>SD_Init</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Interrupts_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[157]"></a>SD_InitializeCards</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[15b]"></a>SD_LowLevel_DMA_RxConfig</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, bsp_sdio_sd.o(i.SD_LowLevel_DMA_RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[15d]"></a>SD_LowLevel_DMA_TxConfig</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, bsp_sdio_sd.o(i.SD_LowLevel_DMA_TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_LowLevel_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[155]"></a>SD_LowLevel_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.SD_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SD_LowLevel_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[156]"></a>SD_PowerON</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, bsp_sdio_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[cc]"></a>SD_ProcessDMAIRQ</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SD_ProcessDMAIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_ProcessDMAIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[163]"></a>SD_ReadBlock</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, bsp_sdio_sd.o(i.SD_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_ReadBlock &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[165]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, bsp_sdio_sd.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[159]"></a>SD_SelectDeselect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[152]"></a>SD_SendStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[166]"></a>SD_StopTransfer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SD_StopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[167]"></a>SD_WaitReadOperation</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.SD_WaitReadOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_WaitReadOperation &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[168]"></a>SD_WriteBlock</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, bsp_sdio_sd.o(i.SD_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_WriteBlock &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[169]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, bsp_sdio_sd.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[110]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_CfgSpiHard
</UL>

<P><STRONG><a name="[111]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSPITxStart
</UL>

<P><STRONG><a name="[1b3]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
</UL>

<P><STRONG><a name="[1b5]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
</UL>

<P><STRONG><a name="[1b4]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
</UL>

<P><STRONG><a name="[10f]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_CfgSpiHard
</UL>

<P><STRONG><a name="[7e]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrequency
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_EnterAutoMode
</UL>

<P><STRONG><a name="[119]"></a>SaveNandFaultNum</STRONG> (Thumb, 94 bytes, Stack size 1168 bytes, mydefine.o(i.SaveNandFaultNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = SaveNandFaultNum &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleRxCom
</UL>

<P><STRONG><a name="[16b]"></a>SaveNandTask</STRONG> (Thumb, 792 bytes, Stack size 1184 bytes, mydefine.o(i.SaveNandTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = SaveNandTask &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>SendCanMsg</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bsp_can.o(i.SendCanMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendCanMsg &rArr; myCAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myCAN_Transmit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanbuf
</UL>

<P><STRONG><a name="[b6]"></a>SendCanbuf</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bsp_can.o(i.SendCanbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SendCanbuf &rArr; SendCanMsg &rArr; myCAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSelStart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSBreath
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReadWave
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReadWaveReply
</UL>

<P><STRONG><a name="[a6]"></a>SortFormBigToSmall</STRONG> (Thumb, 1378 bytes, Stack size 10312 bytes, bsp_can.o(i.SortFormBigToSmall))
<BR><BR>[Stack]<UL><LI>Max Depth = 10312<LI>Call Chain = SortFormBigToSmall
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllSelDisplay
</UL>

<P><STRONG><a name="[98]"></a>SysGetTime</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mydefine.o(i.SysGetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysGetTime &rArr; RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ShortCircuit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PTFault
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LowValueFault
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeSysExceedV
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeGnd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeExceedV
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSBreath
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; SysTick_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[16f]"></a>SysTick_ISR</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, bsp_timer.o(i.SysTick_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SoftTimerDec
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[18d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[66]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, bsp_timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1b0]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>

<P><STRONG><a name="[174]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrequency
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_StopRecord
</UL>

<P><STRONG><a name="[1b1]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>

<P><STRONG><a name="[f2]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrequencyABCISR
</UL>

<P><STRONG><a name="[173]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>

<P><STRONG><a name="[1a9]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>

<P><STRONG><a name="[1aa]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>

<P><STRONG><a name="[1ab]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>

<P><STRONG><a name="[1ac]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>

<P><STRONG><a name="[1ad]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>

<P><STRONG><a name="[1ae]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>

<P><STRONG><a name="[1af]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>

<P><STRONG><a name="[f8]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrequency
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
</UL>

<P><STRONG><a name="[5c]"></a>UART7_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART7_IRQHandler &rArr; Uart7_M1ANDLCD_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart7_M1ANDLCD_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[17a]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart7_M1ANDLCD_IRQ
</UL>

<P><STRONG><a name="[115]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRS485
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
</UL>

<P><STRONG><a name="[116]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRS485
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2TxStart
</UL>

<P><STRONG><a name="[178]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart7_M1ANDLCD_IRQ
</UL>

<P><STRONG><a name="[114]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
</UL>

<P><STRONG><a name="[113]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRS485
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
</UL>

<P><STRONG><a name="[179]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart7_M1ANDLCD_IRQ
</UL>

<P><STRONG><a name="[105]"></a>Uart2TxStart</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, bsp_moduletomodule.o(i.Uart2TxStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart2TxStart &rArr; DMA_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1TOM3Uart2_H10Tx
</UL>

<P><STRONG><a name="[cb]"></a>Uart2TxStartIRQ</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_moduletomodule.o(i.Uart2TxStartIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart2TxStartIRQ &rArr; DMA_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
</UL>

<P><STRONG><a name="[176]"></a>Uart7_M1ANDLCD_IRQ</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp_moduletomodule.o(i.Uart7_M1ANDLCD_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart7_M1ANDLCD_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>WriteParam</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mydefine.o(i.WriteParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WriteParam &rArr; sf_WriteBuffer &rArr; sf_AutoWritePage &rArr; sf_PageWrite &rArr; sf_WriteEnable &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[209]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[de]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadMultiSectors
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkBadBlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteSpare
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WritePage
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteData
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSpare
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_PageCopyBackEx
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_PageCopyBack
</UL>

<P><STRONG><a name="[17f]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[20a]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[11a]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNandTask
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleRxCom
</UL>

<P><STRONG><a name="[9a]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_ELECDisplay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ShortCircuit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PTFault
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LowValueFault
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeSysExceedV
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeGnd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeExceedV
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
</UL>

<P><STRONG><a name="[91]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_asm_waypowerMag
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerFactor
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ShortCircuit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PTFault
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LowValueFault
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeSysExceedV
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeGnd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeExceedV
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCVerification
</UL>

<P><STRONG><a name="[20b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[20c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[20d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[180]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[183]"></a>bsp_ConfigGpioOut</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bsp_tim_pwm.o(i.bsp_ConfigGpioOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsp_ConfigGpioOut &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetRCCofGPIO
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>

<P><STRONG><a name="[185]"></a>bsp_ConfigTimGpio</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, bsp_tim_pwm.o(i.bsp_ConfigTimGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsp_ConfigTimGpio &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetRCCofTIM
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetRCCofGPIO
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetPinSource
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetAFofTIM
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>

<P><STRONG><a name="[14c]"></a>bsp_DelayMS</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bsp_timer.o(i.bsp_DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_DelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
</UL>

<P><STRONG><a name="[187]"></a>bsp_GetAFofTIM</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, bsp_tim_pwm.o(i.bsp_GetAFofTIM))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
</UL>

<P><STRONG><a name="[188]"></a>bsp_GetPinSource</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, bsp_tim_pwm.o(i.bsp_GetPinSource))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
</UL>

<P><STRONG><a name="[184]"></a>bsp_GetRCCofGPIO</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, bsp_tim_pwm.o(i.bsp_GetRCCofGPIO))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigGpioOut
</UL>

<P><STRONG><a name="[186]"></a>bsp_GetRCCofTIM</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, bsp_tim_pwm.o(i.bsp_GetRCCofTIM))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
</UL>

<P><STRONG><a name="[18a]"></a>bsp_Idle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.bsp_Idle))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>

<P><STRONG><a name="[18b]"></a>bsp_Init</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, bsp.o(i.bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240<LI>Call Chain = bsp_Init &rArr; InitSaveNand &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSaveNand
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadInfo
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_NVIC_Config
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitTimer
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRS485
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtIO
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitDWT
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitAD7606
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleComInit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSDRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>bsp_InitAD7606</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_ad7606.o(i.bsp_InitAD7606))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsp_InitAD7606 &rArr; AD7606_FSMCConfig &rArr; FMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_SetInputRange
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Reset
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_FSMCConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[18e]"></a>bsp_InitDWT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_dwt.o(i.bsp_InitDWT))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[18f]"></a>bsp_InitExtIO</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_ext_io.o(i.bsp_InitExtIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsp_InitExtIO &rArr; ConfirgureIO &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirgureIO
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[193]"></a>bsp_InitExtSDRAM</STRONG> (Thumb, 104 bytes, Stack size 80 bytes, bsp_fmc_sdram.o(i.bsp_InitExtSDRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsp_InitExtSDRAM &rArr; SDRAM_InitSequence &rArr; FMC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAMInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_GPIOConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[19c]"></a>bsp_InitHardTimer</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, bsp_timer.o(i.bsp_InitHardTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_InitHardTimer &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitTimer
</UL>

<P><STRONG><a name="[191]"></a>bsp_InitI2C</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(i.bsp_InitI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_InitI2C &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[198]"></a>bsp_InitRS485</STRONG> (Thumb, 356 bytes, Stack size 88 bytes, bsp_rs485.o(i.bsp_InitRS485))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bsp_InitRS485 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[190]"></a>bsp_InitRTC</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsp_rtc.o(i.bsp_InitRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_InitRTC &rArr; RTC_Config &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[196]"></a>bsp_InitSFlash</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.bsp_InitSFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_InitSFlash &rArr; sf_ReadInfo &rArr; sf_ReadID &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadInfo
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetAddressMode
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteStatus
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ConfigGPIO
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_CfgSpiHard
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[192]"></a>bsp_InitTimer</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bsp_timer.o(i.bsp_InitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_InitTimer &rArr; bsp_InitHardTimer &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[171]"></a>bsp_RunPer10ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.bsp_RunPer10ms))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[1f2]"></a>bsp_SPI_Init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bsp_spi_bus.o(i.bsp_SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
</UL>

<P><STRONG><a name="[7c]"></a>bsp_SetTIMOutPWM</STRONG> (Thumb, 416 bytes, Stack size 88 bytes, bsp_tim_pwm.o(i.bsp_SetTIMOutPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = bsp_SetTIMOutPWM &rArr; bsp_ConfigTimGpio &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigGpioOut
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_EnterAutoMode
</UL>

<P><STRONG><a name="[1f1]"></a>bsp_SpiBusEnter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_spi_bus.o(i.bsp_SpiBusEnter))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
</UL>

<P><STRONG><a name="[1f3]"></a>bsp_SpiBusExit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_spi_bus.o(i.bsp_SpiBusExit))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
</UL>

<P><STRONG><a name="[1b2]"></a>bsp_spiRead1</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_spi_bus.o(i.bsp_spiRead1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_spiRead1
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadBuffer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetAddressMode
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadID
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_CmpData
</UL>

<P><STRONG><a name="[1a3]"></a>bsp_spiWrite1</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_spi_bus.o(i.bsp_spiWrite1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadBuffer
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetAddressMode
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadID
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_PageWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseSector
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteStatus
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteEnable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_CmpData
</UL>

<P><STRONG><a name="[a7]"></a>can_ISR</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, bsp_can.o(i.can_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_ISR &rArr; CAN_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>can_Init</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, bsp_can.o(i.can_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[19a]"></a>can_NVIC_Config</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_can.o(i.can_NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[1cc]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1d1]"></a>disk_initialize</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1d8]"></a>disk_ioctl</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1d2]"></a>disk_read</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = disk_read &rArr; SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadMultiSectors
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[1e4]"></a>disk_status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1d3]"></a>disk_write</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[ff]"></a>f_close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNandFaultNum
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSaveNand
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNandTask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead
</UL>

<P><STRONG><a name="[100]"></a>f_closedir</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = f_closedir &rArr; validate
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNandFaultNum
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSaveNand
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNandTask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead
</UL>

<P><STRONG><a name="[12d]"></a>f_lseek</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead2
</UL>

<P><STRONG><a name="[103]"></a>f_mkfs</STRONG> (Thumb, 1230 bytes, Stack size 112 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = f_mkfs &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSaveNand
</UL>

<P><STRONG><a name="[fb]"></a>f_mount</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNandFaultNum
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSaveNand
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNandTask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead
</UL>

<P><STRONG><a name="[fd]"></a>f_open</STRONG> (Thumb, 376 bytes, Stack size 608 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enq_lock
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNandFaultNum
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSaveNand
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNandTask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead
</UL>

<P><STRONG><a name="[fc]"></a>f_opendir</STRONG> (Thumb, 148 bytes, Stack size 552 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNandFaultNum
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSaveNand
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNandTask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead
</UL>

<P><STRONG><a name="[fe]"></a>f_read</STRONG> (Thumb, 416 bytes, Stack size 64 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSaveNand
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead
</UL>

<P><STRONG><a name="[1d4]"></a>f_sync</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[16a]"></a>f_write</STRONG> (Thumb, 472 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNandFaultNum
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNandTask
</UL>

<P><STRONG><a name="[1c2]"></a>ff_convert</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1bd]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[68]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[1bf]"></a>get_fat</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1d9]"></a>get_fattime</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, diskio.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_fattime &rArr; RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[19d]"></a>i2c_Stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_i2c_gpio.o(i.i2c_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
</UL>

<P><STRONG><a name="[65]"></a>main</STRONG> (Thumb, 274 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 10432 + Unknown Stack Size
<LI>Call Chain = main &rArr; FaskCalTask &rArr; ADC_JudgeGnd &rArr; AllSelDisplay &rArr; SortFormBigToSmall
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParam
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNandTask
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrequency
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InOutDisplay
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSBreathTimes
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Task
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Task
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCVerification
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_StartRecord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[16d]"></a>myCAN_Transmit</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.myCAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = myCAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanMsg
</UL>

<P><STRONG><a name="[1c0]"></a>put_fat</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1ec]"></a>sf_EraseSector</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.sf_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sf_EraseSector &rArr; sf_WriteEnable &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteEnable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
</UL>

<P><STRONG><a name="[1ed]"></a>sf_PageWrite</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, bsp_spi_flash.o(i.sf_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sf_PageWrite &rArr; sf_WriteEnable &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteEnable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
</UL>

<P><STRONG><a name="[142]"></a>sf_ReadBuffer</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bsp_spi_flash.o(i.sf_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sf_ReadBuffer &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
</UL>

<P><STRONG><a name="[1f0]"></a>sf_ReadID</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bsp_spi_flash.o(i.sf_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sf_ReadID &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadInfo
</UL>

<P><STRONG><a name="[197]"></a>sf_ReadInfo</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.sf_ReadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sf_ReadInfo &rArr; sf_ReadID &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadID
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
</UL>

<P><STRONG><a name="[1a6]"></a>sf_SetAddressMode</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.sf_SetAddressMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sf_SetAddressMode &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
</UL>

<P><STRONG><a name="[17c]"></a>sf_WriteBuffer</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, bsp_spi_flash.o(i.sf_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sf_WriteBuffer &rArr; sf_AutoWritePage &rArr; sf_PageWrite &rArr; sf_WriteEnable &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParam
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[af]"></a>GetRevCrc_16</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, mydefine.o(i.GetRevCrc_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetRevCrc_16
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetModbus16
</UL>

<P><STRONG><a name="[ec]"></a>ADC_Decompression</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, arithmetic.o(i.ADC_Decompression))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Decompression
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
</UL>

<P><STRONG><a name="[94]"></a>ADC_JudgeExceedV</STRONG> (Thumb, 1222 bytes, Stack size 80 bytes, arithmetic.o(i.ADC_JudgeExceedV))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ADC_JudgeExceedV &rArr; Elec_Display &rArr; dsp_asm_waypowerMag &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskSysExceedVHalut
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskGndHalut
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elec_Display
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeFastExceedV
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetTime
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_length
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Backpointer
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
</UL>

<P><STRONG><a name="[97]"></a>ADC_JudgeFastExceedV</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, arithmetic.o(i.ADC_JudgeFastExceedV))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeExceedV
</UL>

<P><STRONG><a name="[9c]"></a>ADC_JudgeGnd</STRONG> (Thumb, 1840 bytes, Stack size 72 bytes, arithmetic.o(i.ADC_JudgeGnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 10392<LI>Call Chain = ADC_JudgeGnd &rArr; AllSelDisplay &rArr; SortFormBigToSmall
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllSelDisplay
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskGndHalut
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elec_Display
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRightPhase
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetTime
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_length
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Backpointer
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
</UL>

<P><STRONG><a name="[9f]"></a>ADC_JudgeSysExceedV</STRONG> (Thumb, 904 bytes, Stack size 64 bytes, arithmetic.o(i.ADC_JudgeSysExceedV))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ADC_JudgeSysExceedV &rArr; Elec_Display &rArr; dsp_asm_waypowerMag &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskSysExceedVHalut
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elec_Display
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetTime
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_length
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Backpointer
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
</UL>

<P><STRONG><a name="[a0]"></a>ADC_LowValueFault</STRONG> (Thumb, 1074 bytes, Stack size 72 bytes, arithmetic.o(i.ADC_LowValueFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ADC_LowValueFault &rArr; Elec_Display &rArr; dsp_asm_waypowerMag &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskGndHalut
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elec_Display
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PTFastFault
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetTime
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_length
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Backpointer
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
</UL>

<P><STRONG><a name="[a1]"></a>ADC_PTFastFault</STRONG> (Thumb, 502 bytes, Stack size 8 bytes, arithmetic.o(i.ADC_PTFastFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_PTFastFault
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PTFault
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LowValueFault
</UL>

<P><STRONG><a name="[a2]"></a>ADC_PTFault</STRONG> (Thumb, 1074 bytes, Stack size 72 bytes, arithmetic.o(i.ADC_PTFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ADC_PTFault &rArr; Elec_Display &rArr; dsp_asm_waypowerMag &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskGndHalut
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elec_Display
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PTFastFault
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetTime
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_length
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Backpointer
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
</UL>

<P><STRONG><a name="[a3]"></a>ADC_ShortCircuit</STRONG> (Thumb, 956 bytes, Stack size 64 bytes, arithmetic.o(i.ADC_ShortCircuit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ADC_ShortCircuit &rArr; Elec_Display &rArr; dsp_asm_waypowerMag &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elec_Display
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_UNormal
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetTime
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_length
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Backpointer
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
</UL>

<P><STRONG><a name="[a4]"></a>ADC_UNormal</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, arithmetic.o(i.ADC_UNormal))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ShortCircuit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
</UL>

<P><STRONG><a name="[9e]"></a>CheckRightPhase</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, arithmetic.o(i.CheckRightPhase))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeGnd
</UL>

<P><STRONG><a name="[99]"></a>Elec_Display</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, arithmetic.o(i.Elec_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Elec_Display &rArr; dsp_asm_waypowerMag &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_asm_waypowerMag
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_VerifyDisplay
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U0I0calculate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_ELECDisplay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ShortCircuit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PTFault
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LowValueFault
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeSysExceedV
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeGnd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeExceedV
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
</UL>

<P><STRONG><a name="[95]"></a>FaskGndHalut</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, arithmetic.o(i.FaskGndHalut))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PTFault
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LowValueFault
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeGnd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeExceedV
</UL>

<P><STRONG><a name="[96]"></a>FaskSysExceedVHalut</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, arithmetic.o(i.FaskSysExceedVHalut))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeSysExceedV
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_JudgeExceedV
</UL>

<P><STRONG><a name="[12e]"></a>PowerFactor</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, arithmetic.o(i.PowerFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PowerFactor &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_ELECDisplay
</UL>

<P><STRONG><a name="[b1]"></a>RMS_ELECDisplay</STRONG> (Thumb, 1188 bytes, Stack size 72 bytes, arithmetic.o(i.RMS_ELECDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = RMS_ELECDisplay &rArr; U0I0calculate &rArr; Elec_Display &rArr; dsp_asm_waypowerMag &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U0I0calculate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerFactor
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elec_Display
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Task
</UL>

<P><STRONG><a name="[12f]"></a>U0I0calculate</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, arithmetic.o(i.U0I0calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = U0I0calculate &rArr; Elec_Display &rArr; dsp_asm_waypowerMag &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elec_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_ELECDisplay
</UL>

<P><STRONG><a name="[ea]"></a>VectorSum_Display</STRONG> (Thumb, 58 bytes, Stack size 36 bytes, arithmetic.o(i.VectorSum_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VectorSum_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaskCalTask
</UL>

<P><STRONG><a name="[d1]"></a>dsp_asm_waypowerMag</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, arithmetic.o(i.dsp_asm_waypowerMag))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dsp_asm_waypowerMag &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elec_Display
</UL>

<P><STRONG><a name="[189]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_timer.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>

<P><STRONG><a name="[170]"></a>bsp_SoftTimerDec</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_timer.o(i.bsp_SoftTimerDec))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[c6]"></a>ConfirgureIO</STRONG> (Thumb, 2092 bytes, Stack size 16 bytes, bsp_ext_io.o(i.ConfirgureIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ConfirgureIO &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtIO
</UL>

<P><STRONG><a name="[148]"></a>SDRAM_GPIOConfig</STRONG> (Thumb, 492 bytes, Stack size 16 bytes, bsp_fmc_sdram.o(i.SDRAM_GPIOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SDRAM_GPIOConfig &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
</UL>

<P><STRONG><a name="[149]"></a>SDRAM_InitSequence</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, bsp_fmc_sdram.o(i.SDRAM_InitSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDRAM_InitSequence &rArr; FMC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SetRefreshCount
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAMCmdConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_GetFlagStatus
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
</UL>

<P><STRONG><a name="[1e5]"></a>i2c_Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_i2c_gpio.o(i.i2c_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
</UL>

<P><STRONG><a name="[bc]"></a>CmdError</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[bf]"></a>CmdResp1Error</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, bsp_sdio_sd.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[c2]"></a>CmdResp2Error</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[c3]"></a>CmdResp3Error</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[c4]"></a>CmdResp6Error</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, bsp_sdio_sd.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[c5]"></a>CmdResp7Error</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[ed]"></a>FindSCR</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, bsp_sdio_sd.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[143]"></a>SDEnWideBus</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, bsp_sdio_sd.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[f4]"></a>InPutScan</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, bsp_inout.o(i.InPutScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InPutScan
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InOutDisplay
</UL>

<P><STRONG><a name="[f5]"></a>PhaseSwitchDisplay</STRONG> (Thumb, 340 bytes, Stack size 8 bytes, bsp_inout.o(i.PhaseSwitchDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PhaseSwitchDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InOutDisplay
</UL>

<P><STRONG><a name="[81]"></a>AD7606_FSMCConfig</STRONG> (Thumb, 96 bytes, Stack size 96 bytes, bsp_ad7606.o(i.AD7606_FSMCConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AD7606_FSMCConfig &rArr; FMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAMInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitAD7606
</UL>

<P><STRONG><a name="[1ea]"></a>sf_AutoWritePage</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, bsp_spi_flash.o(i.sf_AutoWritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sf_AutoWritePage &rArr; sf_PageWrite &rArr; sf_WriteEnable &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadBuffer
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_PageWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseSector
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_NeedErase
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_CmpData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteBuffer
</UL>

<P><STRONG><a name="[1a1]"></a>sf_CfgSpiHard</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bsp_spi_flash.o(i.sf_CfgSpiHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sf_CfgSpiHard &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
</UL>

<P><STRONG><a name="[1ee]"></a>sf_CmpData</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bsp_spi_flash.o(i.sf_CmpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sf_CmpData &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
</UL>

<P><STRONG><a name="[1a0]"></a>sf_ConfigGPIO</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_spi_flash.o(i.sf_ConfigGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sf_ConfigGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
</UL>

<P><STRONG><a name="[1eb]"></a>sf_NeedErase</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_spi_flash.o(i.sf_NeedErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sf_NeedErase
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
</UL>

<P><STRONG><a name="[1a2]"></a>sf_SetCS</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.sf_SetCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sf_SetCS
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusExit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusEnter
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadBuffer
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetAddressMode
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadID
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_PageWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseSector
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteStatus
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteEnable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ConfigGPIO
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_CmpData
</UL>

<P><STRONG><a name="[1a4]"></a>sf_WaitForWriteEnd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.sf_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sf_WaitForWriteEnd &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_PageWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseSector
</UL>

<P><STRONG><a name="[1ef]"></a>sf_WriteEnable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.sf_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sf_WriteEnable &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_PageWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseSector
</UL>

<P><STRONG><a name="[1a5]"></a>sf_WriteStatus</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.sf_WriteStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sf_WriteStatus &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
</UL>

<P><STRONG><a name="[106]"></a>ModuleBurstCom</STRONG> (Thumb, 1560 bytes, Stack size 24 bytes, bsp_moduletomodule.o(i.ModuleBurstCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272<LI>Call Chain = ModuleBurstCom &rArr; NandRead2 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetModbus16
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandRead
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSPITxStart
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTask
</UL>

<P><STRONG><a name="[117]"></a>ModuleRxCom</STRONG> (Thumb, 718 bytes, Stack size 24 bytes, bsp_moduletomodule.o(i.ModuleRxCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256<LI>Call Chain = ModuleRxCom &rArr; SaveNandFaultNum &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNandFaultNum
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1TOM3Uart2_H10Tx
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTask
</UL>

<P><STRONG><a name="[120]"></a>ModuleTimCom</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, bsp_moduletomodule.o(i.ModuleTimCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = ModuleTimCom &rArr; CRC_GetModbus16 &rArr; GetRevCrc_16
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_pointer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Backpointer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetModbus16
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSPITxStart
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTask
</UL>

<P><STRONG><a name="[109]"></a>NandRead</STRONG> (Thumb, 438 bytes, Stack size 1184 bytes, bsp_moduletomodule.o(i.NandRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = NandRead &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleBurstCom
</UL>

<P><STRONG><a name="[108]"></a>NandRead2</STRONG> (Thumb, 450 bytes, Stack size 1184 bytes, bsp_moduletomodule.o(i.NandRead2))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = NandRead2 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleBurstCom
</UL>

<P><STRONG><a name="[d4]"></a>FMC_NAND_CompPage</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, bsp_nand_flash.o(i.FMC_NAND_CompPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FMC_NAND_CompPage
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
</UL>

<P><STRONG><a name="[d6]"></a>FMC_NAND_EraseBlock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_nand_flash.o(i.FMC_NAND_EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_NAND_EraseBlock &rArr; FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Format
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[d7]"></a>FMC_NAND_GetStatus</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_nand_flash.o(i.FMC_NAND_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WritePage
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Reset
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_PageCopyBackEx
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_PageCopyBack
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_EraseBlock
</UL>

<P><STRONG><a name="[d9]"></a>FMC_NAND_Init</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, bsp_nand_flash.o(i.FMC_NAND_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FMC_NAND_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NANDInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NANDCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_GetBlockInfo
</UL>

<P><STRONG><a name="[dd]"></a>FMC_NAND_PageCopyBack</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, bsp_nand_flash.o(i.FMC_NAND_PageCopyBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FMC_NAND_PageCopyBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_GetStatus
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[df]"></a>FMC_NAND_PageCopyBackEx</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, bsp_nand_flash.o(i.FMC_NAND_PageCopyBackEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FMC_NAND_PageCopyBackEx &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_GetStatus
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[e0]"></a>FMC_NAND_ReadData</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bsp_nand_flash.o(i.FMC_NAND_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FMC_NAND_ReadData &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadPage
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadMultiSectors
</UL>

<P><STRONG><a name="[e1]"></a>FMC_NAND_ReadPage</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, bsp_nand_flash.o(i.FMC_NAND_ReadPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WritePage
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSpare
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadData
</UL>

<P><STRONG><a name="[e2]"></a>FMC_NAND_ReadSpare</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bsp_nand_flash.o(i.FMC_NAND_ReadSpare))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FMC_NAND_ReadSpare &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadPage
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsBadBlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsFreeBlock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_BuildLUT
</UL>

<P><STRONG><a name="[d8]"></a>FMC_NAND_ReadStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bsp_nand_flash.o(i.FMC_NAND_ReadStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_GetStatus
</UL>

<P><STRONG><a name="[e3]"></a>FMC_NAND_Reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_nand_flash.o(i.FMC_NAND_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_NAND_Reset &rArr; FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_GetBlockInfo
</UL>

<P><STRONG><a name="[e4]"></a>FMC_NAND_WriteData</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bsp_nand_flash.o(i.FMC_NAND_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FMC_NAND_WriteData &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WritePage
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
</UL>

<P><STRONG><a name="[e5]"></a>FMC_NAND_WritePage</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, bsp_nand_flash.o(i.FMC_NAND_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadPage
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_GetStatus
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteSpare
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteData
</UL>

<P><STRONG><a name="[e7]"></a>FMC_NAND_WriteSpare</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bsp_nand_flash.o(i.FMC_NAND_WriteSpare))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WritePage
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Format
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkBadBlock
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkUsedBlock
</UL>

<P><STRONG><a name="[121]"></a>NAND_BuildLUT</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, bsp_nand_flash.o(i.NAND_BuildLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NAND_BuildLUT &rArr; FMC_NAND_ReadSpare &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Format
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[122]"></a>NAND_FindFreeBlock</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_nand_flash.o(i.NAND_FindFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = NAND_FindFreeBlock &rArr; NAND_IsFreeBlock &rArr; NAND_IsBadBlock &rArr; FMC_NAND_ReadSpare &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsFreeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[123]"></a>NAND_IsFreeBlock</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_nand_flash.o(i.NAND_IsFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NAND_IsFreeBlock &rArr; NAND_IsBadBlock &rArr; FMC_NAND_ReadSpare &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsBadBlock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_GetBlockInfo
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_FindFreeBlock
</UL>

<P><STRONG><a name="[12a]"></a>NAND_LBNtoPBN</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_nand_flash.o(i.NAND_LBNtoPBN))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadMultiSectors
</UL>

<P><STRONG><a name="[128]"></a>NAND_MarkUsedBlock</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_nand_flash.o(i.NAND_MarkUsedBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = NAND_MarkUsedBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
</UL>

<P><STRONG><a name="[b4]"></a>CanFaultSave</STRONG> (Thumb, 560 bytes, Stack size 12 bytes, bsp_can.o(i.CanFaultSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CanFaultSave
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRMSCompare
</UL>

<P><STRONG><a name="[ac]"></a>CanRMSCompare</STRONG> (Thumb, 462 bytes, Stack size 24 bytes, bsp_can.o(i.CanRMSCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 10344<LI>Call Chain = CanRMSCompare &rArr; AllSelDisplay &rArr; SortFormBigToSmall
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllSelDisplay
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReadWave
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanOnlineJudge
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFaultSave
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Task
</UL>

<P><STRONG><a name="[b7]"></a>CanReadWaveReply</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, bsp_can.o(i.CanReadWaveReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = CanReadWaveReply &rArr; CRC_GetModbus16 &rArr; GetRevCrc_16
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetModbus16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRxDisplay
</UL>

<P><STRONG><a name="[aa]"></a>CanRxDisplay</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, bsp_can.o(i.CanRxDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = CanRxDisplay &rArr; CanSBreath &rArr; CRC_GetModbus16 &rArr; GetRevCrc_16
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSBreath
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanOnlineSet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReadWaveReply
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Task
</UL>

<P><STRONG><a name="[13c]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[140]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[172]"></a>SetSysClock</STRONG> (Thumb, 272 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1ba]"></a>check_fs</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1c3]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1dd]"></a>chk_lock</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1da]"></a>clear_lock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ff.o(i.clear_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1bc]"></a>cmp_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1be]"></a>create_chain</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1c1]"></a>create_name</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1d6]"></a>dec_lock</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, ff.o(i.dec_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1c5]"></a>dir_alloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1c8]"></a>dir_find</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1c7]"></a>dir_next</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[1cd]"></a>dir_register</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1c6]"></a>dir_sdi</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[1de]"></a>enq_lock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.enq_lock))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1db]"></a>find_volume</STRONG> (Thumb, 636 bytes, Stack size 80 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[1d0]"></a>fit_lfn</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1dc]"></a>follow_path</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1cf]"></a>gen_numname</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1d7]"></a>get_ldnumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1e2]"></a>inc_lock</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1df]"></a>ld_clust</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1ca]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1ce]"></a>mem_cpy</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1c4]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1bb]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1e1]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1e0]"></a>st_clust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1c9]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1e3]"></a>sync_fs</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1cb]"></a>sync_window</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FMC_NAND_WriteSpare &rArr; FMC_NAND_WritePage &rArr; FMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1d5]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[17e]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[182]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[181]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[69]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
