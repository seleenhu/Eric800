; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\stm32f4xx_pwr.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\stm32f4xx_pwr.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\User\arithmetic -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX --omf_browse=.\flash\obj\stm32f4xx_pwr.crf ..\..\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_pwr.c]
                          THUMB

                          AREA ||i.PWR_BackupAccessCmd||, CODE, READONLY, ALIGN=2

                  PWR_BackupAccessCmd PROC
;;;148      */
;;;149    void PWR_BackupAccessCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L1.8|
;;;150    {
;;;151      /* Check the parameters */
;;;152      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;153      
;;;154      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
000002  6208              STR      r0,[r1,#0x20]
;;;155    }
000004  4770              BX       lr
;;;156    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_BackupRegulatorCmd||, CODE, READONLY, ALIGN=2

                  PWR_BackupRegulatorCmd PROC
;;;352      */
;;;353    void PWR_BackupRegulatorCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L2.8|
;;;354    {
;;;355      /* Check the parameters */
;;;356      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;357    
;;;358      *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;359    }
000004  4770              BX       lr
;;;360    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      0x420e00a4

                          AREA ||i.PWR_ClearFlag||, CODE, READONLY, ALIGN=2

                  PWR_ClearFlag PROC
;;;847      */
;;;848    void PWR_ClearFlag(uint32_t PWR_FLAG)
000000  4903              LDR      r1,|L3.16|
;;;849    {
;;;850      /* Check the parameters */
;;;851      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;852      
;;;853    #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
;;;854      if (PWR_FLAG != PWR_FLAG_UDRDY)
;;;855      {
;;;856        PWR->CR |=  PWR_FLAG << 2;
;;;857      }
;;;858      else
;;;859      {
;;;860        PWR->CSR |= PWR_FLAG_UDRDY;
;;;861      }
;;;862    #endif /* STM32F427_437xx ||  STM32F429_439xx */
;;;863    
;;;864    #if defined (STM32F40_41xxx) || defined (STM32F401xx) 
;;;865      PWR->CR |=  PWR_FLAG << 2;
000002  6809              LDR      r1,[r1,#0]
000004  ea410180          ORR      r1,r1,r0,LSL #2
000008  4a01              LDR      r2,|L3.16|
00000a  6011              STR      r1,[r2,#0]
;;;866    #endif /* STM32F40_41xxx */
;;;867    }
00000c  4770              BX       lr
;;;868    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40007000

                          AREA ||i.PWR_DeInit||, CODE, READONLY, ALIGN=1

                  PWR_DeInit PROC
;;;133      */
;;;134    void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;135    {
;;;136      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  0708              LSLS     r0,r1,#28
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;137      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f04f5080          MOV      r0,#0x10000000
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;138    }
000014  bd10              POP      {r4,pc}
;;;139    
                          ENDP


                          AREA ||i.PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTANDBYMode PROC
;;;756      */
;;;757    void PWR_EnterSTANDBYMode(void)
000000  480a              LDR      r0,|L5.44|
;;;758    {
;;;759      /* Clear Wakeup flag */
;;;760      PWR->CR |= PWR_CR_CWUF;
000002  6800              LDR      r0,[r0,#0]
000004  f0400004          ORR      r0,r0,#4
000008  4908              LDR      r1,|L5.44|
00000a  6008              STR      r0,[r1,#0]
;;;761      
;;;762      /* Select STANDBY mode */
;;;763      PWR->CR |= PWR_CR_PDDS;
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]
000010  f0400002          ORR      r0,r0,#2
000014  6008              STR      r0,[r1,#0]
;;;764      
;;;765      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;766      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000016  4806              LDR      r0,|L5.48|
000018  6800              LDR      r0,[r0,#0]
00001a  f0400004          ORR      r0,r0,#4
00001e  4904              LDR      r1,|L5.48|
000020  6008              STR      r0,[r1,#0]
;;;767      
;;;768    /* This option is used to ensure that store operations are completed */
;;;769    #if defined ( __CC_ARM   )
;;;770      __force_stores();
000022  bf00              NOP      
000024  bf00              NOP      
;;;771    #endif
;;;772      /* Request Wait For Interrupt */
;;;773      __WFI();
000026  bf30              WFI      
;;;774    }
000028  4770              BX       lr
;;;775    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x40007000
                  |L5.48|
                          DCD      0xe000ed10

                          AREA ||i.PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTOPMode PROC
;;;644      */
;;;645    void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
000000  b510              PUSH     {r4,lr}
;;;646    {
000002  4602              MOV      r2,r0
;;;647      uint32_t tmpreg = 0;
000004  2000              MOVS     r0,#0
;;;648      
;;;649      /* Check the parameters */
;;;650      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;651      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;652      
;;;653      /* Select the regulator state in STOP mode ---------------------------------*/
;;;654      tmpreg = PWR->CR;
000006  4b0d              LDR      r3,|L6.60|
000008  6818              LDR      r0,[r3,#0]
;;;655      /* Clear PDDS and LPDS bits */
;;;656      tmpreg &= CR_DS_MASK;
00000a  f6404303          MOV      r3,#0xc03
00000e  4398              BICS     r0,r0,r3
;;;657      
;;;658      /* Set LPDS, MRLVDS and LPLVDS bits according to PWR_Regulator value */
;;;659      tmpreg |= PWR_Regulator;
000010  4310              ORRS     r0,r0,r2
;;;660      
;;;661      /* Store the new value */
;;;662      PWR->CR = tmpreg;
000012  4b0a              LDR      r3,|L6.60|
000014  6018              STR      r0,[r3,#0]
;;;663      
;;;664      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;665      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000016  4b0a              LDR      r3,|L6.64|
000018  681b              LDR      r3,[r3,#0]
00001a  f0430304          ORR      r3,r3,#4
00001e  4c08              LDR      r4,|L6.64|
000020  6023              STR      r3,[r4,#0]
;;;666      
;;;667      /* Select STOP mode entry --------------------------------------------------*/
;;;668      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
000022  2901              CMP      r1,#1
000024  d101              BNE      |L6.42|
;;;669      {   
;;;670        /* Request Wait For Interrupt */
;;;671        __WFI();
000026  bf30              WFI      
000028  e000              B        |L6.44|
                  |L6.42|
;;;672      }
;;;673      else
;;;674      {
;;;675        /* Request Wait For Event */
;;;676        __WFE();
00002a  bf20              WFE      
                  |L6.44|
;;;677      }
;;;678      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;679      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
00002c  4b04              LDR      r3,|L6.64|
00002e  681b              LDR      r3,[r3,#0]
000030  f0230304          BIC      r3,r3,#4
000034  4c02              LDR      r4,|L6.64|
000036  6023              STR      r3,[r4,#0]
;;;680    }
000038  bd10              POP      {r4,pc}
;;;681    
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
                          DCD      0x40007000
                  |L6.64|
                          DCD      0xe000ed10

                          AREA ||i.PWR_EnterUnderDriveSTOPMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterUnderDriveSTOPMode PROC
;;;708      */
;;;709    void PWR_EnterUnderDriveSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
000000  b510              PUSH     {r4,lr}
;;;710    {
000002  4602              MOV      r2,r0
;;;711      uint32_t tmpreg = 0;
000004  2000              MOVS     r0,#0
;;;712      
;;;713      /* Check the parameters */
;;;714      assert_param(IS_PWR_REGULATOR_UNDERDRIVE(PWR_Regulator));
;;;715      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;716      
;;;717      /* Select the regulator state in STOP mode ---------------------------------*/
;;;718      tmpreg = PWR->CR;
000006  4b0d              LDR      r3,|L7.60|
000008  6818              LDR      r0,[r3,#0]
;;;719      /* Clear PDDS and LPDS bits */
;;;720      tmpreg &= CR_DS_MASK;
00000a  f6404303          MOV      r3,#0xc03
00000e  4398              BICS     r0,r0,r3
;;;721      
;;;722      /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
;;;723      tmpreg |= PWR_Regulator;
000010  4310              ORRS     r0,r0,r2
;;;724      
;;;725      /* Store the new value */
;;;726      PWR->CR = tmpreg;
000012  4b0a              LDR      r3,|L7.60|
000014  6018              STR      r0,[r3,#0]
;;;727      
;;;728      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;729      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000016  4b0a              LDR      r3,|L7.64|
000018  681b              LDR      r3,[r3,#0]
00001a  f0430304          ORR      r3,r3,#4
00001e  4c08              LDR      r4,|L7.64|
000020  6023              STR      r3,[r4,#0]
;;;730      
;;;731      /* Select STOP mode entry --------------------------------------------------*/
;;;732      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
000022  2901              CMP      r1,#1
000024  d101              BNE      |L7.42|
;;;733      {   
;;;734        /* Request Wait For Interrupt */
;;;735        __WFI();
000026  bf30              WFI      
000028  e000              B        |L7.44|
                  |L7.42|
;;;736      }
;;;737      else
;;;738      {
;;;739        /* Request Wait For Event */
;;;740        __WFE();
00002a  bf20              WFE      
                  |L7.44|
;;;741      }
;;;742      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;743      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
00002c  4b04              LDR      r3,|L7.64|
00002e  681b              LDR      r3,[r3,#0]
000030  f0230304          BIC      r3,r3,#4
000034  4c02              LDR      r4,|L7.64|
000036  6023              STR      r3,[r4,#0]
;;;744    }
000038  bd10              POP      {r4,pc}
;;;745    
                          ENDP

00003a  0000              DCW      0x0000
                  |L7.60|
                          DCD      0x40007000
                  |L7.64|
                          DCD      0xe000ed10

                          AREA ||i.PWR_FlashPowerDownCmd||, CODE, READONLY, ALIGN=2

                  PWR_FlashPowerDownCmd PROC
;;;498      */
;;;499    void PWR_FlashPowerDownCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L8.8|
;;;500    {
;;;501      /* Check the parameters */
;;;502      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;503    
;;;504      *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
000002  6248              STR      r0,[r1,#0x24]
;;;505    }
000004  4770              BX       lr
;;;506    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  PWR_GetFlagStatus PROC
;;;819      */
;;;820    FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
000000  4601              MOV      r1,r0
;;;821    {
;;;822      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;823      
;;;824      /* Check the parameters */
;;;825      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;826      
;;;827      if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
000004  4a03              LDR      r2,|L9.20|
000006  6852              LDR      r2,[r2,#4]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L9.16|
;;;828      {
;;;829        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L9.18|
                  |L9.16|
;;;830      }
;;;831      else
;;;832      {
;;;833        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L9.18|
;;;834      }
;;;835      /* Return the flag status */
;;;836      return bitstatus;
;;;837    }
000012  4770              BX       lr
;;;838    
                          ENDP

                  |L9.20|
                          DCD      0x40007000

                          AREA ||i.PWR_MainRegulatorModeConfig||, CODE, READONLY, ALIGN=2

                  PWR_MainRegulatorModeConfig PROC
;;;374      */
;;;375    void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
000000  4601              MOV      r1,r0
;;;376    {
;;;377      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;378    	
;;;379      /* Check the parameters */
;;;380      assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));
;;;381    
;;;382      tmpreg = PWR->CR;
000004  4a03              LDR      r2,|L10.20|
000006  6810              LDR      r0,[r2,#0]
;;;383      
;;;384      /* Clear VOS[15:14] bits */
;;;385      tmpreg &= CR_VOS_MASK;
000008  f4204040          BIC      r0,r0,#0xc000
;;;386      
;;;387      /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
;;;388      tmpreg |= PWR_Regulator_Voltage;
00000c  4308              ORRS     r0,r0,r1
;;;389      
;;;390      /* Store the new value */
;;;391      PWR->CR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;392    }
000010  4770              BX       lr
;;;393    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0x40007000

                          AREA ||i.PWR_OverDriveCmd||, CODE, READONLY, ALIGN=2

                  PWR_OverDriveCmd PROC
;;;409      */
;;;410    void PWR_OverDriveCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L11.8|
;;;411    {
;;;412      /* Check the parameters */
;;;413      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;414      
;;;415      /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
;;;416      *(__IO uint32_t *) CR_ODEN_BB = (uint32_t)NewState;
000002  6408              STR      r0,[r1,#0x40]
;;;417    }
000004  4770              BX       lr
;;;418    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_OverDriveSWCmd||, CODE, READONLY, ALIGN=2

                  PWR_OverDriveSWCmd PROC
;;;427      */
;;;428    void PWR_OverDriveSWCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L12.8|
;;;429    {
;;;430      /* Check the parameters */
;;;431      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;432    
;;;433      /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
;;;434      *(__IO uint32_t *) CR_ODSWEN_BB = (uint32_t)NewState;
000002  6448              STR      r0,[r1,#0x44]
;;;435    }
000004  4770              BX       lr
;;;436    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_PVDCmd||, CODE, READONLY, ALIGN=2

                  PWR_PVDCmd PROC
;;;221      */
;;;222    void PWR_PVDCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L13.8|
;;;223    {
;;;224      /* Check the parameters */
;;;225      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;226      
;;;227      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
000002  6108              STR      r0,[r1,#0x10]
;;;228    }
000004  4770              BX       lr
;;;229    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_PVDLevelConfig||, CODE, READONLY, ALIGN=2

                  PWR_PVDLevelConfig PROC
;;;196      */
;;;197    void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
000000  4601              MOV      r1,r0
;;;198    {
;;;199      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;200      
;;;201      /* Check the parameters */
;;;202      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;203      
;;;204      tmpreg = PWR->CR;
000004  4a03              LDR      r2,|L14.20|
000006  6810              LDR      r0,[r2,#0]
;;;205      
;;;206      /* Clear PLS[7:5] bits */
;;;207      tmpreg &= CR_PLS_MASK;
000008  f02000e0          BIC      r0,r0,#0xe0
;;;208      
;;;209      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;210      tmpreg |= PWR_PVDLevel;
00000c  4308              ORRS     r0,r0,r1
;;;211      
;;;212      /* Store the new value */
;;;213      PWR->CR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;214    }
000010  4770              BX       lr
;;;215    
                          ENDP

000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      0x40007000

                          AREA ||i.PWR_UnderDriveCmd||, CODE, READONLY, ALIGN=2

                  PWR_UnderDriveCmd PROC
;;;454      */
;;;455    void PWR_UnderDriveCmd(FunctionalState NewState)
000000  b130              CBZ      r0,|L15.16|
;;;456    {
;;;457      /* Check the parameters */
;;;458      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;459    
;;;460      if (NewState != DISABLE)
;;;461      {
;;;462        /* Set the UDEN[1:0] bits to enable the Under Drive mode */
;;;463        PWR->CR |= (uint32_t)PWR_CR_UDEN;
000002  4907              LDR      r1,|L15.32|
000004  6809              LDR      r1,[r1,#0]
000006  f4412140          ORR      r1,r1,#0xc0000
00000a  4a05              LDR      r2,|L15.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L15.28|
                  |L15.16|
;;;464      }
;;;465      else
;;;466      {
;;;467        /* Reset the UDEN[1:0] bits to disable the Under Drive mode */
;;;468        PWR->CR &= (uint32_t)(~PWR_CR_UDEN);
000010  4903              LDR      r1,|L15.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4212140          BIC      r1,r1,#0xc0000
000018  4a01              LDR      r2,|L15.32|
00001a  6011              STR      r1,[r2,#0]
                  |L15.28|
;;;469      }
;;;470    }
00001c  4770              BX       lr
;;;471    
                          ENDP

00001e  0000              DCW      0x0000
                  |L15.32|
                          DCD      0x40007000

                          AREA ||i.PWR_WakeUpPinCmd||, CODE, READONLY, ALIGN=2

                  PWR_WakeUpPinCmd PROC
;;;255      */
;;;256    void PWR_WakeUpPinCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L16.8|
;;;257    {
;;;258      /* Check the parameters */  
;;;259      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;260    
;;;261      *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;262    }
000004  4770              BX       lr
;;;263    
                          ENDP

000006  0000              DCW      0x0000
                  |L16.8|
                          DCD      0x420e00a0

;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_pwr_c_0c2a8b75____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f4xx_pwr_c_0c2a8b75____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_pwr_c_0c2a8b75____REVSH|
#line 144
|__asm___15_stm32f4xx_pwr_c_0c2a8b75____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
